<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://shenguosai.github.io/atom.xml" rel="self"/>
  
  <link href="http://shenguosai.github.io/"/>
  <updated>2023-11-14T16:55:59.674Z</updated>
  <id>http://shenguosai.github.io/</id>
  
  <author>
    <name>乙未丁酉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>更换新电脑后，hexo无损重新部署</title>
    <link href="http://shenguosai.github.io/2023/11/14/%E6%9B%B4%E6%8D%A2%E6%96%B0%E7%94%B5%E8%84%91%E5%90%8E%EF%BC%8Chexo%E6%97%A0%E6%8D%9F%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/"/>
    <id>http://shenguosai.github.io/2023/11/14/%E6%9B%B4%E6%8D%A2%E6%96%B0%E7%94%B5%E8%84%91%E5%90%8E%EF%BC%8Chexo%E6%97%A0%E6%8D%9F%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/</id>
    <published>2023-11-14T13:44:02.000Z</published>
    <updated>2023-11-14T16:55:59.674Z</updated>
    
    <content type="html"><![CDATA[<p>趁着双十一入手了樊想S500 pro的2T SSD，到货后就迫不及待的换下了原来笔记本里500G的老硬盘。<br>然后发现新装系统后各种软件的安装和配置都要重新来一遍。<br>下面记录下hexo的迁移过程。<br>首先将原硬盘的hexo目录拷贝到新硬盘。<br>然后配置环境：<br>1.安装nodejs和git，nodejs安装好才可以使用npm安装hexo，git就是用来上传博客用的；（如果不希望多装软件可只安装git而不需要git bash）<br>2.如果可以将原来电脑中的<code>C:\User\username\.gitconfig</code>文件和<code>C:\User\username（斜体）\.ssh\</code>目录拷贝到同目录下就不需要重新配置了。(其中username是自己电脑的用户名)<br>  如果没有就只能重新设置并生成ssh key文件了，命令如下：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.mail &quot;user mail address&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;user mail address&quot;</span><br></pre></td></tr></table></figure><br>3.进入到hexo部署文件夹，执行命令安装hexo和hexo-depolyer-git插件<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br>然后这里会出现一个问题，我是使用vs code中的终端来操作的，怎么样识别不了hexo命令，提示如下：（由于忘记截图了，网上找了张类似的）<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20231114224848.png" alt="20231114224848"></p><p>处理方案在提示中就有，可以通过访问请参阅后面的链接查看，核心问题是power shell的安全策略，将hexo命令视为了不安全脚本，不允许执行。只需要放开权限就行。<br>通过管理员权限运行power shell，然后输入命令：<code>set-ExecutionPolicy RemoteSigned</code><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20231115001919.png" alt="20231115001919"><br>选择”Y”即可。</p><p>然后就可以正常在vs code的终端里使用hexo了。<br>虽然可以正常上传，但是上传时会有换行符的问题，解决方法：<br>将默认时的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#提交时转换为LF，检出时转换为CRLF</span><br><span class="line">git config --globel core.autocrlf true</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#提交检出时均不做换行符转换</span><br><span class="line">git config --globel core.autocrlf false</span><br></pre></td></tr></table></figure><p>4.图床设置<br>下载插件vs code的插件PicGo，配置方法网上有很多，但是需要注意一点在<code>Picgo &gt; Pic Bed &gt; Github: Custom Url</code>中需要填入图传链接格式为<code>https://raw.githubusercontent.com/用户名/仓库名/分支名</code>，一开始这个地方没有设置对对上传没有影响但是在博客中看不到图片。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;趁着双十一入手了樊想S500 pro的2T SSD，到货后就迫不及待的换下了原来笔记本里500G的老硬盘。&lt;br&gt;然后发现新装系统后各种软件的安装和配置都要重新来一遍。&lt;br&gt;下面记录下hexo的迁移过程。&lt;br&gt;首先将原硬盘的hexo目录拷贝到新硬盘。&lt;br&gt;然后配置环境</summary>
      
    
    
    
    <category term="Tutotial" scheme="http://shenguosai.github.io/categories/Tutotial/"/>
    
    
  </entry>
  
  <entry>
    <title>Elecom MR-C18BK 读卡器</title>
    <link href="http://shenguosai.github.io/2023/09/13/Elecom-MR-C18BK-%E8%AF%BB%E5%8D%A1%E5%99%A8/"/>
    <id>http://shenguosai.github.io/2023/09/13/Elecom-MR-C18BK-%E8%AF%BB%E5%8D%A1%E5%99%A8/</id>
    <published>2023-09-13T11:40:45.000Z</published>
    <updated>2023-09-13T11:49:18.602Z</updated>
    
    <content type="html"><![CDATA[<p>这两天帮父亲新接手的球馆弄监控，花了一番功夫终于把已经停产的十几年前的监控摄像头搞定，发现里面的TF卡却坏掉了。于是在京东上买了BanQ的Joy联名TF卡，买来之后插上读卡器发现无法识别，申请换新之后还是无法识别，这才开始怀疑自己的读卡器是不是有问题。但是前两天刚试过家里的4G的TF卡读取是没有问题的。<br>于是从同事那里借来较新的读卡器发现成功读出来了，就怀疑自己应该也是十几年前买的读卡器是不是不支持大容量TF卡，于是到主页上查找了一番，发现Micro SD卡容量最大支持到16GB。<br><br><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194643.png" alt="20230913194643"><br><br><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194802.png" alt="20230913194802"><br><br><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194820.png" alt="20230913194820"><br><br></p><p><a href="https://www2.elecom.co.jp/data-media/memory-rw/mr-c18/">商品说明链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天帮父亲新接手的球馆弄监控，花了一番功夫终于把已经停产的十几年前的监控摄像头搞定，发现里面的TF卡却坏掉了。于是在京东上买了BanQ的Joy联名TF卡，买来之后插上读卡器发现无法识别，申请换新之后还是无法识别，这才开始怀疑自己的读卡器是不是有问题。但是前两天刚试过家里的</summary>
      
    
    
    
    <category term="Electronic Equipments" scheme="http://shenguosai.github.io/categories/Electronic-Equipments/"/>
    
    
  </entry>
  
  <entry>
    <title>无门关·平常是道</title>
    <link href="http://shenguosai.github.io/2023/09/13/%E6%97%A0%E9%97%A8%E5%85%B3%C2%B7%E5%B9%B3%E5%B8%B8%E6%98%AF%E9%81%93/"/>
    <id>http://shenguosai.github.io/2023/09/13/%E6%97%A0%E9%97%A8%E5%85%B3%C2%B7%E5%B9%B3%E5%B8%B8%E6%98%AF%E9%81%93/</id>
    <published>2023-09-13T01:11:08.000Z</published>
    <updated>2023-09-13T08:19:15.714Z</updated>
    
    <content type="html"><![CDATA[<center><font size="5"><b>无门关·平常是道</b></font></center><br><center><font size="1">南宋 慧开</font></center><br><center>春有百花秋有月，夏有凉风冬有雪。</center><center>若无闲事挂心头，便是人间好时节。</center><br><center>善是青松恶是花，看看眼前不如它。</center><center>有朝一日遭霜打，只见青松不见花。</center><br><center>面上无嗔是供养，口里无嗔出妙香。</center><center>心中无嗔无价宝，不断不灭是真常。</center><br><center>佛在灵山莫远求，灵山只在汝心头。</center><center>人人有个灵山塔，好向灵山塔下修。</center><br>这是一首禅诗，诗名为《无关门·平常是道》，出自无门关(又称《禅宗无门关》)第十九则，南宋无门慧开禅师撰。<br><b>释义：</b>春天有百花，夏天有凉风，秋天有明月，冬天有瑞雪，但最重要的还是一个人心上没有那些人世间的俗事(功名利禄等等)，可以开开心心地欣赏这美景，这才是好季节。<br><b>原文如下：</b><center><b>《无门关》十九　　　平常是道</b></center>南泉因赵州问，如何是道。泉云，平常心是道。州云，还可趣向否。泉云，拟向即乖。州云，不拟争知是道。泉云，道不属知，不属不知。知是妄觉，不知是无记。若真达不拟之道，犹如太虚阔然洞豁，岂可强是非也。州于言下顿悟。<br>【<b>无门曰</b>】<br>南泉被赵州发问，直得瓦解冰消分疏不下。赵州纵饶悟去，更参三十年始得。<br>【<b>颂曰</b>】<br>春有百花秋有月，夏有凉风冬有雪，若无闲事挂心头，便是人间好时节。<br><b>译文：</b>赵州问南泉：“什么是道？”南泉回答：“平常心是道。”赵州说：“可还有什么趣向吗？”南泉说：“只要一拟定方向，就背离这个道了。”赵州说：“如果不预知方向，又怎么知道这就是道呢？”南泉说：“道不属于知，也不属于不知，知是妄觉，不知是无记，如果真的到达不预知的道，才会像太虚一样，阔然洞豁。这道又怎能预先拟定，强加以它是或非呢？”赵州听完这番话后，当下顿悟。<br>【<b>评唱</b>】<br>无门说：“南泉被赵州发问，直到赵州的疑团瓦解冰消。话虽这么说，赵州纵然当下已顿悟，可是非得再参上三十年不可。”</br>【<b>颂曰</b>】春天百花盛开，秋夜月色皎洁。夏天凉风徐徐，冬天白雪皑皑。一个人只要没有闲杂的事情挂在心头，那便是人间最好的时节。<br>在此基础上衍生出谒子：<font size=2><center><b>无门关·平常是道</b></center></font><font size=1><center>南宋 慧开</center><center>春有百花秋有月，夏有凉风冬有雪。</center><center>若无闲事挂心头，便是人间好时节。</center><center>善是青松恶是花，看看眼前不如它。</center><center>有朝一日遭霜打，只见青松不见花。</center><center>面上无嗔是供养，口里无嗔出妙香。</center><center>心中无嗔无价宝，不断不灭是真常。</center><center>佛在灵山莫远求，灵山只在汝心头。</center><center>人人有个灵山塔，好向灵山塔下修。</center></font><br>南宋高僧慧开禅师，杭州钱塘人，俗姓梁，生於宋孝宗淳熙十年。因苦参“无”字话头而开悟，慧开又特别着重“无”字法门，每天对着“无”字苦苦参究，故成为无门和尚。<br>慧开在法堂内经行，边走边参详“无”字话头。在夕阳西下、夜幕沉沉的寂寥中，从遥遥的斋堂那一头，传来一阵接一阵绵绵密密的鼓声，豁然如排山倒海般，慧开胸中久远以来的疑团突然被鼓声撞散，顿时消失，豁然而悟。慧开禅师心中一片大光明，高唱谒颂：<br><center>青天白日一声雷，大地群生眼豁开。</center><center>万家森罗齐稽首，须弥勃跳舞三台。</center>一派天淡云闲列长空，丽日高照大地春的气象。慧开就此开悟。他的很多诗歌都以富含禅理禅机，成为佛诗佳作，在禅门中代代相传。他的《饭熟已多时》便是其中的代表，诗云：<center>只为分明极，翻令所得迟。</center><center>早知灯是火，饭熟已多时。</center>有一年，京城大旱，理宗请慧开禅师登坛祈雨，慧开禅师持咒祝祷之后，默然返回寺中，理宗急忙遣派内侍前来询问，祈雨的结果如何？禅师淡然回答说：“寂然不动，感而后通。”语音方毕，天空俄然乌云密布，大雨倾盆注下，解除了已久的大旱，立下大功德。理宗因此颁赐慧开禅师金澜法衣，敕封为佛眼禅师，以示褒扬。就佛家而言，佛眼即是佛，而佛就是佛眼，可见对慧开禅师的评价之高。无门和尚将历代禅宗之公案甄选汇编，选择其中四十八则，纂集为脍炙人口之《无门关》一书，并自作序文道：<br><center>“大道无门，千差有路；<br>透得此关，乾坤独步。”</center>并且把赵州禅师“狗子无佛性”的公案列为第一则，深得六祖慧能大师“无念，无相，无性”的思想要旨。其第十九则诗，谒朗朗上口，最为佛弟子所爱颂：<center>“春有百花秋有月，夏有凉风冬有雪，<br>若无闲事挂心头，便是人间好时节。”</center><br>慧开禅师晚年，倦于槌拂，于西湖边卓庵隐居。虽然如是，前来参学者犹众。<br><center>“三十三天天外天，九霄云外有神仙。<br>神仙本是凡人做，只怕凡人心不坚。”</center>慧海禅师开示说：“世人很难做到一心一用，他们在利害得失中穿梭，囿于浮华的宠辱，产生了‘种种思量’和‘千般妄想’。”这是他们生命中最大的障碍，因此在生命的表层停留不前。<br>南宋理宗定元年四月命工匠砌塔，八日塔龛砌成，禅师自撰龛语道：<br><center>“地水火风，梦幻泡影。<br>七八十年，一弹指顷。”</center>书谒毕，跏跌而逝。]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;&lt;font size=&quot;5&quot;&gt;&lt;b&gt;无门关·平常是道&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;font size=&quot;1&quot;&gt;南宋 慧开&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;春有百花秋有月，夏有凉风冬有雪。&lt;/cent</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Poetry" scheme="http://shenguosai.github.io/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>如果你是一个普通的父母</title>
    <link href="http://shenguosai.github.io/2023/09/11/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E7%88%B6%E6%AF%8D/"/>
    <id>http://shenguosai.github.io/2023/09/11/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E7%88%B6%E6%AF%8D/</id>
    <published>2023-09-11T01:14:04.000Z</published>
    <updated>2023-09-11T01:38:43.123Z</updated>
    
    <content type="html"><![CDATA[<p>　　网上看到了一段话，非常治愈，非常鸡汤。大家都说是从人民日报看到的，但是我搜索了一圈也没看到哪一期的人民日报上刊登了这样的文字。文字是好文字就好，何必非要冠以噱头，互联网时代让信息变得巨量却碎片，周末在家辅导孩子功课时孩子非要在网络上搜索知识，经过好一通解释才说服孩子试着使用工具书来查阅资料。互联网给我们带来无穷便利的同时也在剥夺人类的自主能力，让人类的依赖性变得更强。正如“奶头乐”阴谋，资本利用了人类的劣根性让普通人为其辛劳一生却不自知。所以说无论什么主义社会，只要有统治阶级，就一定会想方设法的愚化群众。是不是又到了开启民智的时期？<br>　　话题扯了有点远，这篇分享的主要目的还是来分享这段治愈的文字：</p><blockquote><p>&emsp;&emsp;如果你是一个普通的父母，没有什么优秀的资源和太多的文化，不知道该怎么教育孩子，那我们就不如多鼓励他，多认可孩子，多表扬孩子，多理解和支持孩子，不要把自己的认知、焦虑、恐惧、愤怒和委屈转移给孩子，这就是对孩子最好的教育。<br>&emsp;&emsp;孩子若是平凡之辈，那就承欢膝下，若是出类拔萃，那就让他展翅高飞，接受孩子的平庸，就像孩子从来没要求父母一定要多么得好一样……记住了:<b><font color="orange">穷不怪父，孝不比兄，苦不责妻，气不凶子</font></b>，送给自己一起共勉。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　网上看到了一段话，非常治愈，非常鸡汤。大家都说是从人民日报看到的，但是我搜索了一圈也没看到哪一期的人民日报上刊登了这样的文字。文字是好文字就好，何必非要冠以噱头，互联网时代让信息变得巨量却碎片，周末在家辅导孩子功课时孩子非要在网络上搜索知识，经过好一通解释才说服孩子试着</summary>
      
    
    
    
    <category term="分享" scheme="http://shenguosai.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="育儿" scheme="http://shenguosai.github.io/tags/%E8%82%B2%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>SPICE简史</title>
    <link href="http://shenguosai.github.io/2023/09/04/SPICE%E7%AE%80%E5%8F%B2/"/>
    <id>http://shenguosai.github.io/2023/09/04/SPICE%E7%AE%80%E5%8F%B2/</id>
    <published>2023-09-04T07:10:04.000Z</published>
    <updated>2023-09-11T01:40:51.985Z</updated>
    
    <content type="html"><![CDATA[<p>　　如今，SPICE广泛应用在仿真模拟电路(运放、基准、电源、AD&#x2F;DA等)，混合信号电路(PLL、SRAM&#x2F;DRAM，高速接口)，精确数字电路(延时、时序、功耗、漏电流等)，建立SoC的时序及功耗单元库，分析系统级的信号完整性，等等。<br>作为最早的电子设计自动化软件，它今天仍然是最重要的软件之一。可以说，没有SPICE，就没有电子设计自动化这个产业，也就没有今天的半导体工业。它的市场超过上亿美元。所有这一切，都是从1970年加州大学伯克利分校电机工程系的一堂课开始的。</p><h2 id="SPICE的诞生"><a href="#SPICE的诞生" class="headerlink" title="SPICE的诞生"></a>SPICE的诞生</h2><p>　　时间回到1970年，在加州大学伯克利分校电机工程与计算机科学系(UC Berkeley, Dept. EECS)，Ron Rohrer教授给7个研究生上“电路综合”课。Rohrer教授那时刚刚从仙童半导体公司(Fairchild Semiconductor)返回伯克利，没有时间准备教材。所以，在第一堂课，他就宣布：学生们一起写一个电路仿真程序。他跟系里管教学的助人Don Peterson教授达成一个协议：只要Peterson教授认可学生们写的仿真程序，他们就全部通过。否则的话，他们就全部不及格。这七个学生中有一个还是从机械系来的。他感到十分委屈：教授啊，俺啥电路都不会，俺就是来学电路的。这倒好，电路没学到，反而要去写电路仿真程序。这可咋办啊？Rohrer教授想了想，说没关系。虽然电路你不懂，但你的数值分析不是很厉害吗？OK，你就负责解方程这块吧。最后的结果证明了恰恰是学生们自己开发的解稀疏矩阵的模块是一个亮点，它使得可处理的电路规模成倍的增大。为什么这么说呢？如果你学过数值方法，你就知道一般解方程组用的是高斯消元法。它的时间复杂度是$O^{(n*3)}$。也就是说，电路规模增大一倍，你的运算时间就要增大到8倍。当时的电路仿真程序最多可以仿真10个晶体管。超过这个数，不是你的预算被烧没了，就是你的耐心被耗没了。但是，学生们注意到从电路搭出来的矩阵有个特点，就是它的稀疏性。一个电路矩阵里很多元素都是0(意味着两个电路节点之间没有连接关系)。既然是0，那就没有必要去存储和计算它了。这样一来，存储量和计算量大大减少了。<br>　　很多SPICE里面的基本要素都来自于Rohrer教授指导的这一堂电路分析课的项目，包括上面讲到的解稀疏矩阵的模块，还有隐式积分算法的使用使得瞬态分析更加稳定。并且，程序里加入了自带的半导体器件模型，用户只要给出一组模型参数，用不着自己提供器件模型的FORTRAN模块了。<br>这7个学生推举Laurence Nagel为代表，由他负责向Peterson教授汇报结果。这个结果就是CANCER。没错，它的意思就是“癌症”。它是“不包括辐射的非线性电路计算机分析”(“Computer Analysis of Nonlinear Circuits, Excluding Radiation”)的缩写。不要忘了，这是在一个叛逆的时代。当时绝大部分的电路分析软件来自于大公司与政府&#x2F;军方的合同开发。在冷战和核威胁的环境下，政府&#x2F;军方要求这些软件都具有分析电路抗辐射的能力。伯克利是反战的大本营，学生们自己开发的程序当然要跟政府&#x2F;军方的要求对着干了。<br>有同学可能会问：为什么要开发一个电路仿真程序？呵呵，要知道在这之前，人们分析电路，要么是用笔和纸，要么就要搭电路板(Bread Board)。Peterson教授就被学生们称之为“信封教授”，因为他认为电路分析用个信封的背面来做就足够了。但随着电路规模的增大，用笔纸变得越来越不可能，搭电路板又不能精确反应芯片上的电路特性，而且费用也越来越高。因此，用软件来做仿真就变得日益迫切了。<br>　　当课程结束，Nagel向Peterson教授汇报CANCER之后，Peterson教授给予了认可。学生们都通过了！CANCER成了Nagel的硕士论文课题。它在伯克利被很多本科生及研究生使用，并且给了大量的建议去改进它。呵呵，都说学生是最好的“小白鼠”，这话果然不假(再插一段话：基于这堂课的巨大成功，Rohrer教授后来又用同样的办法试了几堂课，但都失败了。他自己总结说，是因为有Nagel，伯克利的那堂课才成功了。所以，如果没有Rohrer教授那样的功力和Nagel那样天分的学生，SPICE也不可能从一堂课里诞生出来。)<br>　　到了1971年的秋天，Nagel在伯克利又开始了他的博士生生活，这一回是在Peterson教授的指导下了。(在这之前，Rohrer教授离开了伯克利到工业界去发展。原因嘛，据说Rohrer教授与Peterson教授在是否要公开CANCER的源代码上有不同意见。Rohrer教授后来又回到了学术界，在卡内基-梅隆大学(CMU)做教授，并指导开发了AWE，这是后话。)<br>　　Peterson教授给Nagel的第一个任务是给程序起个新名字。确实，CANCER太难听了，谁都不喜欢。Nagel花了天知道多长时间才想出来这样好听的，也就是我们现在还在用的名字：SPICE(Simulation Program with Integrated Circuit Emphasis)。(所以，如果你要写一个新程序，创建一个新公司，生一个小孩，一定要给他&#x2F;她起个好听的名字。)<br>　　1971年被正式认定为SPICE诞生的年份。</p><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901155141.png"         alt="加载错误"         style="zoom:100%">    <br>    Laurence Nagel当年在伯克利的照片    </center></div><br><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901155358.png"         alt="加载错误"         style="zoom:100%">    <br>    Ron Rohere教授    </center></div><br><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901155442.png"         alt="加载错误"         style="zoom:100%">    <br>    Don Peterson教授    </center></div><br>　　SPICE还是开源代码的先驱。当时也有开源代码，但都没有太大的商业价值。SPICE就不同了。有人已经看到它的商业价值，但Peterson教授坚持要把代码开源(我们都得真心的感谢Peterson教授)。任何人只要花20美元的手续费，就可以得到SPICE的源代码(当然，在冷战时期，SPICE被禁止出口到政府认为的“共产国家)。有人会问，那这样一来，伯克利是不是损失了一大笔钱呢？事实并非如此。伯克利的SPICE帮助数字设备公司(DEC)卖出了很多台VAX机。反过来，DEC给伯克利电子系捐赠了1800万美元(这可是二十年年的数目，考虑到通货膨胀，你可以想象现在值多少钱)。这么多钱可不是一个学校卖代码能获得的。所以，做好事终究还是会得到好报的。<h2 id="SPICE2和SPICE3"><a href="#SPICE2和SPICE3" class="headerlink" title="SPICE2和SPICE3"></a>SPICE2和SPICE3</h2><p>　　在70年代初期，伯克利电子系用的计算机是CDC6400大型机，它的运算能力相当于286(时钟频率是10MHz，可它的成本是六百万美元。再看看今天你手中的iphone，它的时钟频率超过1GHz，成本不到600美元——这是100万倍性价比的差别！)分给每个学生的主内存白天为256KB。到了晚上人少，你就可得到384KB。运行一个不算太大的电路仿真，用Nagel的话说，就像把你11码大的脚穿进婴儿的鞋里——你得想尽一切办法节省内存。能仿真的最大的电路规模也就是25个双极型晶体管(相当于50个电路节点)。而且，那时候SPICE还只有双极型晶体管模型。71年的秋季，从贝尔实验室来到伯克利的David Hodges教授带来了第一个MOSFET模型：Shichman-Hodges模型。如果你用过SPICE(并且年头足够多的话)，你应该知道这就是Level1 MOSFET模型。它是所有MOSFET模型的鼻祖。<br>　　1975年Nagel从伯克利博士毕业。他的论文<em><strong>“SPICE2:A COMPUTER PROGRAM TO SIMULATE SEMICONDUCTOR CIRCUITS”</strong></em>，成为了EDA行业被引用最多的文章。<br>　　SPICE2这个版本基本上奠定了今天电路仿真程序的基石，其中包括：改进的节点分析法(Modified Nodal Analysis)，稀疏矩阵解法(Sparse Matrix Solver)，牛顿-拉夫逊迭代(Newton-Raphson Iteration)，隐形数值积分(Implicit Numerical Integration)，动态步长的瞬态分析(Dynamic Time Step Control)，局部截断误差(Local Truncation Error)，等等——说太多技术细节了，还是接着讲故事吧。</p><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901165841.png"         alt="加载错误"         style="zoom:100%">    <br>    Nagel博士论文的封面    </center></div><br>　　下载这篇论文：[SPICE2:A COMPUTER PROGRAM TO SIMULATE SEMICONDUCTOR CIRCUITS](https://www2.eecs.berkeley.edu/Pubs/TechRpts/1975/9602.html)　　如果你想了解SPICE的核心秘密，就下载一份好好读读吧！　　最早的SPICE2没有用户界面。它的运行是批处理方式。也就是说，你准备好了你的电路描述和仿真命令，就把它们提交给主机系统里。然后呢？然后你就可以回家了。因为你的几十(百)个同事也在做着同样的事情。所以，等第二天早上上了班再看结果吧！　　SPICE2的输入是用打卡。你可能会问：什么是打卡啊？呵呵，祝贺你年纪够小。对那些年过半百的人，最初接触到的计算机输入界面就是像下面这样的卡：<div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901171423.png"         alt="加载错误"         style="zoom:100%">    <br>    IBM Punch Card    </center></div><br>　　你把你的电路描述及仿真命令打在一叠这样的卡上，然后放到读卡机里。你可能听说过SPICE的输入叫“SPICE DECK”，这个名字就是从这叠卡来的。　　SPICE2的输出是行打印机。是的，就是用下面这样的打印机打出仿真结果在纸上(想象一下那时消耗了多少纸张)。<div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901172227.png"         alt="加载错误"         style="zoom:100%">    <br>    Fujitsu FACOM 655B Line Printer    </center></div><br>　　你也可以打印输入输出的信号波形。每个波形是用不同的字符画的。像下面这样(看着是不是很粗糙呀)：<div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901172528.png"></div><br>　　有同学读SPICE手册时会看到一个奇怪的选项叫“NOPAGE”。这是因为SPICE的输出在页与页之间的折线处会加入一个分页符，流出空白。这个选项就是要求不要停止打印的。这样一来，波形就不会因为换页而在页与页之间断掉了。随着行打印机的消失，这个选择项也进入了历史。后来SPICE2的输入/输出也进化成了文件输入/出。像下面这样：<div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/111.png"></div><br>　　Nagel毕业后去了贝尔实验室。从此以后，SPICE2的改进就由Nagel的室友，Ellis Cohen，继续进行下去。Ellis是个计算机编程能手。用当时周围学生的话说，他就是一个长成人形的计算机。是他(以及后来的Andrei Vladimirescu和Sally Liu)把学校里开发的程序SPICE改造成了实用的SPICE2G6。在SPICE的早期开发中，他是个无名英雄。今天工业界里的很多商业SPICE就是基于SPICE2G6开发出来的。　　到了八十年代，SPICE2已经遍及了各个大学。但它的问题也显现了出来：FORTRAN代码太难维护，加新的器件模型需要改动的地方太多，等等。在此同时，C作为一种新的程序语言正方兴未艾。于是，用C语言重新写SPICE就被提到了议事日程上来。这个任务被伯克利的Thomas Quarles在89年完成了。比起SPICE2来，SPICE3增加了用户界面，你可以使用命令，甚至命令串来控制程序。另外，还增加了图形界面看波形。更重要的是，SPICE3的程序构架更加清晰，更加模块化。维护及修改起来更加容易。八十年代也是计算机硬件突飞猛进的时代：大型机(mainframe)被工作站(workstation)取代。UNIX及架构在它上面的C-shell和X-window成为软件开发及应用的基本框架。另外，个人电脑(PC)也越来越普及。这些都为SPICE的广泛应用打下了坚实的基础。<div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230901180559.png"         alt="加载错误"         style="zoom:100%">    <br>    Quarles论文封面    </center></div><br>　　同样，你可以用这里的链接下载***[Quarles的论文](http://www.eecs.berkeley.edu/Pubs/TechRpts/1989/ERL-89-46.pdf)***。　　下面是SPICE3(版本3f5)的执行语句，注意它是交互式的。每一个“Spice<number>->”后面是一个spice3的命令。不如“source”就是把电路读入，“run”就是运行，“display”就是显示，“quit”就是退出。<div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/222.png"></div><br>SPICE3自带了一个图形模块nutmeg。下面是nutmeg显示的波形，是不是比SPICE2的行打印的字符波形好看多了？<div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/333.png"></div><br>　　自从上世纪90年代后，学术界SPICE的发展基本就停止在SPICE3f5这个版本了。这是不是意味着SPICE停滞不前了呢？非也。至少在两个方向上SPICE还在一直发展：一个是器件模型(特别是MOSFET模型)，另一个是商业SPICE程序。(这里值得提一下，有一批SPICE的爱好者及高校把SPICE3f5接过来，并整合了其它几个开源软件(xspice,cider,gss,adms等)，建成了ngspice。Ngspice也在缓慢的进化着，但比起商业SPICE进化的速度慢多了。你可以在sourceforce上找到ngspice。)<h2 id="SPICE中器件模型的演变"><a href="#SPICE中器件模型的演变" class="headerlink" title="SPICE中器件模型的演变"></a>SPICE中器件模型的演变</h2><p>　　SPICE里面自带了很多模型。像无源元件电阻、电容、电感等等，以及有源器件二极管、双极管等。但花样最多的、变化最频繁的、复杂度最高的，当属MOSFET的模型了。这主要是因为从七八十年代以后，MOSFET的工艺因为它的低功耗，高集成度而变成了主流。那时候还是个半导体工业百花争鸣的年代。很多半导体公司如雨后春笋般的冒出来(就像现在的社交媒体公司一样)。几乎每一家公司都在工艺及器件上有点自己的绝活，所以集成电路公司大多是个独立器件制造商(IDM)。这就造成了MOSFET的模型也层出不穷。谁家的SPICE支持的MOSFET模型越多，谁的SPICE用户群就越大。<br>　　前面我们说过SPICE2中加上了MOSFET Level1的模型。等到SPICE3出来的时候，里面已经加入了Level2及Level3模型。到了九十年代，又加入了著名的BSIM(Berkeley Short-channel IGFET Model)模型。可以这样说，现在所有的Foundry用的模型都来自于BSIM家族。为什么在众多MOSFET模型中BSIM胜出了呢？<br>　　我们知道，SPICE是用来解含有非线性器件的电路方程的。解非线性方程的一个有效方法就是牛顿迭代–把非线性方程在某个点给它线性化，然后逐次逼近最终解。这个过程有点像两个宇航飞船对接–如果对方的接口在你的左边，你就往左偏一下。如果你偏多了，对方的接口在你的右边了，你就再稍往右偏点，知道最后两个接口对准锁定。但这里面又个要求：就是非线性曲线的一阶导数要连续。如果不连续的话，就好像喝醉酒的人来控制飞船对接，忽左忽右，或者根本就掉过头来，布置东南西北，上下左右了，如何能对接上呢？不幸的是，很多早期的MOSFET模型(包括Level1、2、3)都有这个问题–模型的电流曲线的一阶导数在工作区域内不连续。这是因为人为的把器件分成了不同的工作区域。不同区之间能保证电流连续已经不错了，哪还去管它的导数呢！这样做的后果就像管对接的人喝醉了酒，没法瞄准目标，最后导致SPICE不收敛　(Non-convergence)，或时间步长太小(Time Step Too Small–这有很大可能也是不收敛造成的)。<br>　　早期的BSIM模型还保留了工作区的概念。但在不同的区域之间加入了平滑过渡曲线，以保证电流曲线及其一阶导数的连续性。在它后来的版本中，就彻底抛弃了工作区域的观念–干脆只用一个(连续且可导)曲线来代表整个工作区域里的特性。这就从根本上解决了不连续的问题。BSIM家族中最成功的代表是BSIM3v3(HSPICE中的Level49)和BSIM4v5(HSPICE中的Level54)。从此以后，再也没有其他的模型能出其右。它们俩也是工业界的MOSFET器件模型标准。BSIM3v3跨越了亚微米的工艺(0.3微米至0.13微米，大致从1993年到2000年)，BSIM4跨越了深亚微米到纳米的工艺(90纳米至20纳米，大致从2002年到2012年)。<br>　　你可能会问：这么好的器件模型是谁做的？猜一下–对了，还是伯克利。是伯克利电子系器件模型小组。它的掌门人就是胡正明教授(Pref. Chenmin Hu)。</p><div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230903215808.png"></div><br>　　今天的SPICE开发者要感谢胡教授。如果BSIM不是工业标准，那你就得像HSPICE一样加几十上百个MOSFET模型。不光工作量大，容易出错，还有很多内部的模型人家还不愿意给你呢(参见下面Smart-Spice的故事)。而现在，你只要加一、二个开源的BSIM标准模型就可以覆盖绝大部分用户了。　　有同学要问：现在的最新工艺不是已经到了16纳米、14纳米，以致10纳米，那这些工艺的器件结构与模型又是什么呢？答案已经有了：还是胡教授的小组开发的FinFET(也叫3维FET)模型。实际上，早在99年胡教授就发表了FinFET的文章。因此他也被称作FinFET之父。他同时是美国和中国的科学院士。同学，如果你的一生中能达到以上其中的任何一项，是不是就可以笑傲江湖了呢？　　就像半导体工艺由简到繁的过程一样，MOS器件模型也从Level1的几个公式/几十行代码，发展到BSIM的几百个公式/上万行代码。这里值得提出的一点，与BSIM3/BSIM4模型不同的是，FinFET模型不是用C语言，而是用Verilog-A语言写的。这直接导致了把它加到SPICE3中的困难。虽然很多商业SPICE已经支持Verilog-A，但现在开源的SPICE3却还没有做到(这里插一句：基于SPICE3的ngspice当中包含了支持Verilog-A的开源编译器ADMS。但要做到完全自动编译FinFET模型这样重量级的模块还有一段路要走)。也就是说，虽然FinFET模型是开源的，但现在它的仿真载体并不开源。这种现象与早期的SPICE研发反了过来。现在学术界落到了工业界的后面。看到这儿，学术界的同学是不是要深思一下呢？<h2 id="商业SPICE的演变"><a href="#商业SPICE的演变" class="headerlink" title="商业SPICE的演变"></a>商业SPICE的演变</h2><p>　　前面我们提到当CANCER出来的时候就有人意识到了它的商业价值。毫无疑问，SPICE的出世必定会有人把它商业化。事实却是如此。八九十年代是商业SPICE出现的高峰期。至少有几十个SPICE的变种冒出来。有的获得了巨大成功，有的毫无声息的消失了，有的还在惨淡经营着。同学，如果你想创业，这里面有太多的经验和教训了。</p><h3 id="HSIPCE"><a href="#HSIPCE" class="headerlink" title="HSIPCE"></a>HSIPCE</h3><p>　　先来说说HSPICE，记得我们前面讲过的批处理运行吧。在当时的大公司里，这是电路仿真标准的运行方式，但这么做的效率太低了。设计者需要尽量短的时间看到仿真结果，然后修改电路参数再做仿真。如此多次以达到最佳结果。有两个孪生兄弟Shawn Hailey及Kim Hailey，当时都在AMD做设计，看到了这里面的问题。与其让几百个客户排队等一个银行柜员，为什么不让每一个客户都有一个柜员呢？问题就是商机。他们决定跳出来开自己的公司。于是78年，Meta-Software成立了，他们把改进的SPICE变种取名为HSPICE(你现在明白了吧，为什么要以H开头？这可是兄弟俩姓的第一个字母)。他们把SPICE2从大型机移植到了VAX小型机上，后来又移植到Sun工作站上。就这样，借着计算机硬件改朝换代的东风，越来越多的公司开始使用HSPICE了。直到如今，这个HSPICE成了工业界的“金标准”。只要你做个仿真器，人们一定会跟HSPICE比结果的。而且，在SPICE前面加一个字母成了时尚。到今天，有人开玩笑说A-SPICE到Z-SPICE都已经被人用过了(当然，HSPICE仍然是最出名的)。<br>　　有人可能会问：要是我当时也把SPICE移植到小型机上，我是不是也可以成功？呵呵，成功的要素有很多，光用一条是远远不够的。比如说用户的反馈就是相当重要的一条。举个例子，HSPICE是第一个把器件模型库卡(.LIB)和结果测量卡(.MEASURE)做进去的。像这样的例子还有很多。这些虽然不是什么革命性的技术创新，但它们很实用，能大大提高用户的使用效率。甚至某些时候，对用户来说，这样的小改进比创新的算法更重要。<br>　　前面我们提到了七八十年代有很多的MOSFET器件模型。HSPICE把能拿到的器件模型都收进去了。所以，HSPICE的MOSFET器件模型是最全的(不信的话，你就去拿本HSPICE的MOSFET模型手册读一下–注意，它是一本独立的手册。也就是说，光是它里面的七八十个MOSFET模型就是一本书了)。但这样还不够，Meta还开发了自己的MOSFET模型：Level28.他们跟用户的工艺线紧密联系。在工艺线流片之前，相应的器件模型参数已由芯片加工厂(Foundry)提供给芯片设计者了。如果你是设计者，你还能不用它吗？这样做的结果直接导致了HSPICE用户群急速的扩大。就像滚雪球一样，一旦超过了临界质量(critical mass),它自己就会越滚越大。据Meta-Software的人说，在公司巅峰的时候，它们的销售员就是一台传真机。你只要把传真机号码告诉客户，他们就把订单发来啦(那时候的钱真好赚啊，当然公司里肯定不止一台传真机)。从78年成立到96年这18年期间，公司一共卖出了一万一千多套HSPICE，它的年成长率达到了25%~30%。<br>　　1996年Meta-Software被Avant收购，到2001年，Avant又被Synopsys收购。关于Avant的故事有很多。这个公司(包括它的头儿 Jerry Hsu)就像EDA业界的一匹黑马。它的故事足可以写另一个长篇了。<br>Meta-Software兄弟中的老大，Shawn Hailey，已于2011年去世。在此之前，他把自己的名字改成了Ashawna Hailey。</p><div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230903224801.png"></div><br><h3 id="PSICE"><a href="#PSICE" class="headerlink" title="PSICE"></a>PSICE</h3><p>　　PSPICE像HSPICE一样，PSPICE的故事也跟它的名字有关。首先，这第一个字母“P”并不是其创始人的名字。事实上，创始人的名字Wolfram Blume里面根本没有字母“P”。那这字母“P”到底是什么依稀呢？对了，它就是PC。PSPICE的发展跟PC的发展是密不可分的。但这并不是PSPICE的初衷。<br>　　时间回到1984年，那时Wolfram Blume从加州理工(CalTech)毕业加入南加州一家半导体公司。工作中，他听到很多抱怨，说公司内部的SPICE速度太慢了。这位老兄也不含糊，立马对其SPICE来了一个详尽的分析。结果发现，大部分时间花在了算MOSFET模型的方程上(记得前面我们讲的MOSFET的复杂性吧)。他一想，如果能用硬件来并行处理这些方程，岂不就可以加快仿真速度了吗？(呵呵，又是一个看到商机的主)？恰恰那个时候英特尔推出了支持硬件并行的8085&#x2F;8086&#x2F;8087.说干就干，这位老哥创立了MicroSim公司。又是在这时，IBM推出了基于Intel芯片的IBM-PC。另一个机会又来了：只要把SPICE从大型机上移植到PC上就行了。这事儿比起第一个事儿简单太多了。可是，人们当时认为PC就是个游戏机而已，没人拿它来做什么正经事儿(呵呵，看看现在不还是这样吗？)。所以，这个老哥并没有把这第二件事看得太重，而是集中绝大部分精力和资源去做硬件并行。<br>　　当时的IBM-PC有640KB内存。最大的数组只允许64KB内存。而SPICE是用一个巨长的数组来存储所有的数据。把SPICE的数据放到IBM-PC的结构，用这位老哥的话说，就像把一只鲸鱼塞进一个金鱼缸里。但他们做到了(中间略去他们N个睡不着的工作之夜)。并行硬件的确加快了方程的处理，可他们也快没钱了。这位老兄忽然想到，咱不是把SPICE移植到PC上了吗？咱就先卖着这个软件，用卖它的钱继续开发咱得并行硬件。就这样，PSPICE就开始在PC上出现了。<br>　　最初这位老兄是想卖硬件加速器的PSPICE版本，可结果恰恰相反，两年后，纯软件的PSPICE卖出去一千多套，而硬件加速器只卖了两套。到这时候，这位老兄也明白了，做硬件吃力不讨好，市场并不需要。他把卖出去的两套硬件加速器又自己买了回来(当然又半卖半送给人家N套纯软件的版本)。<br>　　同学你看，一个高新复杂的技术并不一定会做出一个卖座的产品。反过来，一个貌似简单的技术可能很受市场的欢迎。另外，PSPICE虽然不是赚钱最多的，但它的用户数绝对是最大的(遍及全世界五大洲)。你可以下载一个免费的PSPICE用。当然，只限于十个晶体管。但这对一般学生的学习来讲，大部分情况下已经够用了(想一想当年的大型机也就只能算这么多)。你如果在网上搜一搜，就会发现阿拉伯语(以及其它语言)的PSPICE的教材。你如果是在校生的话，很可能也在用PSPICE。</p><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/444.png"         alt="加载错误"         style="zoom:100%">    <br>    PSPICE第二版封面    </center></div><br>　　MicroSim在1998年被OrCAD收购，OrCAD在2000年又被Cadence收购。<h2 id="Spectre"><a href="#Spectre" class="headerlink" title="Spectre"></a>Spectre</h2><p>　　话说89年，伯克利毕业了最后一批做SPICE研究的学生。其中一个叫Ken Kundent。Ken非常有才气，他在伯克利的研究成果后来成为了安捷伦的微波仿真软件。同时他的傲气也不小。在加入Cadence后，他看到HSPICE卖的很火，就决定做个新的仿真工具去取代它。这就是Spectre。据说他用了两个星期就写出了第一个版本(呵呵，不愧是伯克利SPICE大本营出来的)。SPECTRE比HSPICE要快两三倍，还具有更高的精度及更好的收敛性。但它并没能取代HSPICE。为什么呢？一个原因是兼容性。SPECTRE的输入格式跟HSPICE有很大不同。Ken计算机编程的功底很深，他设计的Spectre的输入格式像C语言一样。虽然从计算机语言角度看，Spectre的输入比HSPICE的输入更规范，但SPICE的用户是电路设计者，他们才不管你的语言多么优美，只要好用就行。另外，如果你是个电路设计者，花了几年功夫好不容易才学会了一种语言格式，用它已经写了成百上千个电路网表，而且它们都工作的好好的，为什么要去换成另外一个呢？另外，还有一个重要的原因，就是用户对HSPICE的信赖。这种信赖不是一时半会儿就能建立起来的。它是经过几十年，成千上万遍仿真，几百次tape-out(流片)才能形成的。怎么能说换就换呢。<br>　　Ken琢磨着，既然更快更好还没办法取代SPICE，那我们就得做点SPICE没有的东西。做什么呢？恰好在九十年代中期，一种标准的设计语言VHDL开始向模拟电路扩展，这就是VHDL-AMS(VHDL的模拟电路及数模混合电路描述语言)。(这里再插一句，最早的数模混合电路描述语言是MAST，它是Analog公司的仿真器Saber里面使用的。VHDL-AMS是基于欧洲Anacad公司开发的HDL-A语言发展而来的。后来Anacad的仿真器成为Mentor的Eldo)。但当时还没有Verilog的AMS扩展(原因是VHDL主要在欧洲使用。而Verilog主要在美国使用)。Ken就想，好吧，我们也来做个标准的设计语言到Spectre里。这就是Verilog-AMS(Verilog的模拟电路及数模混合电路描述语言)。不过这事儿说起来容易做起来难。首先，既然你是标准，那就要大伙儿都同意。让大伙儿都同意的事是要花时间的，没那么快。其次更重要的，是你要让模拟电路设计者来学习并使用这个语言。这可是比登天还难的事儿。如果你是一个模拟电路设计者，你想想你在学校的课本上看到的是运放的电路还是它的描述语言？当然是电路了。至少到今天为止，还没有一本模拟电路的教科书是只用描述语言的。你再看看数字电路的教材，几乎全部都是VHDL或Verilog描述语言(呵呵，如果你还用晶体管来设计数字电路，那你的年龄够大了)。另外，当你做模拟设计的时候，你是在搭晶体管电路呢，还是在写描述语言？对模拟电路设计者来说，用语言而不用电路来做设计是不可想象的。反过来，对数字电路设计者来说，用电路而不用语言来做设计也是不可想象的。<br>　　Spectre-AMS做出来后，Ken发现当时的感兴趣者寥寥无几(呵呵，这哥们专找硬骨头啃)。那怎么办？在公司做产品是要卖钱的。Ken有点儿绝望了。这时，他想到了回去做他在学校的老本行：射频电路仿真。至少这个功能别的SPICE还没有。他把这个想法告诉了当时Cadence的市场经理Jim Hogan。Jim做了个市场调查。那时射频电路设计市场几乎不存在，只有几家做镓砷电路的算搭点边。当Jim把这调查结果告诉Ken，Ken也无可奈何的耸耸肩。Jim对Ken看了好一会儿，说，管它呢，你就做去吧。谁知道这一次却是歪打正着了。九十年代中后期正是无线通信市场腾飞的时候。很多在学校用Spectre-RF的毕业生加入了新的做射频电路芯片的设计公司。这些公司必须要用Spectre-RF做射频仿真。而Spectre-RF是Spectre的一个选项。因此，Spectre也就借着Spectre-RF的东风开始流行起来了。后来，HSPICE和Smart-Spice也跟风在自己的SPICE中加进了RF的选项。这也算是Spectre对SPICE的功能扩展做的贡献吧。</p><div>    <center>    <img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230903235201.png"         alt="加载错误"         style="zoom:100%">    <br>    Ken Kundent    </center></div><br><h3 id="Smart-Spice"><a href="#Smart-Spice" class="headerlink" title="Smart Spice"></a>Smart Spice</h3><p>　　Smart-Spice是Silvaco公司的产品。说道Silvaco，就不得不说它的创始人Ivan Pesic。Ivan来自黑山共和国(Montenegro，欧洲巴尔干半岛的一个小国家)。像所有第三世界国家的穷学生一样，通过自己的勤奋努力来到美国。来美国之后，他先开了一家修车店。知道攒够了钱，才在1984年成立了Silvaco。他有一个儿子，可能是年幼时受了老爸的修车店的熏陶，决定长大了当个汽车修理工。因此学习也不上进。怎么让这小子好好学习呢？简单。有一天，老Ivan把儿子带到了圣荷塞（SanJose，硅谷一大城市）一个最破的修车厂的马路对面，对儿子说：你就坐在这儿，看看汽车修理工一天的工作是什么样的。自从那一天结束以后，儿子的学习成绩就全变成A了。<br>　　说到Ivan Pesic，我们还不得不说他打官司的故事。Silvaco的历史上与N家公司打过官司(而且大部分都赢了)。在此我们只讲讲与Meta-Software(后被Avant并购)的官司。话说八十年代末到九十年代初，Meta-Software和它的HSPICE如日中天，这其中它自己的Level28模型起了重要作用。Silvaco最初的产品是TCAD(Technology CAD)，并不是SPICE。这时它也准备开发自己的Smart-Spice，但它拿不到HSPICE的Level28模型。怎么办？Silvaco采用了一个瞒天过海的迂回战术。Silvaco有个不错的模型参数提取软件叫Utmost。它就找到Meta-Software说，你看，如果把你们的Level28模型公式放到我们的Utmost中，就会有更多的用户用你们的HSPICE。Meta一想也对，就把Level28模型给了Silvaco。没成想，过了两年，Silvaco自己的Smart-Spice出来了，而且里面还带着Level28模型。这下Meta-Software气坏了。就把Silvaco告上了法庭。也就在这个前后，Avant并购了Meta-Software。但Avant只看到了HSPICE这只下金蛋的鸡，却忽略了Meta-Software跟Silvaco的官司。也许是因为Avant恰恰正在和Cadence打着一场更大的官司，从而忽略了这个小案子。不管是什么原因，当法庭开庭要宣判的那一天，Avant居然没有人出庭。这下法官可气坏了。好啊，竟然藐视本法庭，来啊，判Avant输，并赔Silvaco两千万！本来Silvaco上庭前战战兢兢的，盼望着和解就不错了。这下倒好，不光不用和解了，还得了一大笔钱。呵呵，人们都说国外重视知识产权。这种重视其实是来自于众多这样的动不动就成败上千万的官司。所以同学，如果你是学理工出身的，那你不妨去学学法律。如果你是学文科出身的，那你不妨去学学理工。估摸着在不久的将来，国内这样的涉及知识产权的大官司也会越来越多。作为一个懂高科技的律师(或者一个懂知识产权法律的工程师)会很抢手的。<br>　　但是，一个公司如果光靠打官司，那也是赢得不了客户的。说实话，Smart-Spice做得还是蛮不错的，价格又便宜。Smart-Spice还是第一个“基于使用时间许可证”(use-time based license)的工具。这对许多小公司或个人用户是个好消息。如果你没几万美元去买高大上的商业SPICE，或者你就只需要跑几次仿真，那就可以最少花十几美元用Smart-Spice完成你要做的事。这就像买车还是租车一样。卖车店能赚钱，租车店也会有很多顾客的。这不也是一个很好的商业模式吗？<br>　　Ivan Pesic于2012年因癌症在日本去世。如今，他本来想当汽车修理工的儿子已经继承了老爸的事业，接替掌管Silvaco了。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230904002306.png" alt="20230904002306"></p><h3 id="Aeolus-AS"><a href="#Aeolus-AS" class="headerlink" title="Aeolus-AS"></a>Aeolus-AS</h3><p>　　我们应该感到骄傲–这是我们中国本土的SPICE。虽然名字叫起来很拗口。光从名字上也看不出这是SPICE。它是由华大九天开发的。至于为什么起这样一个名字，还是请华大的刘总来解答吧。本人并没有用过这个工具。下面的几句话是从华大的网页上摘下来的，也算给他们做个广告吧。“它是新一代高速高精度并行晶体管级电路仿真工具，能够在保持高精度的前提下突破目前验证大规模电路所遇到的容量、速度瓶颈。Aeolus-AS能够处理上千万个元器件规模的设计，仿真速度也比上一代晶体管级电路仿真工具有大幅提升，同时支持多核并行。”<br><br><br>　　还有一类是工业界但非商业(也就是不拿出来卖的)SPICE，通常它们都是公司内部开发使用的。一般只有拥有Fab的大公司(像Intel、前Infenion、前Motorola、Fujitsu等)才能负担得起一个开发团队。这种公司内部的SPICE基本都会有自己的器件模型。在这里我们就不多说了。</p><h2 id="SPICE的变异与进化"><a href="#SPICE的变异与进化" class="headerlink" title="SPICE的变异与进化"></a>SPICE的变异与进化</h2><h3 id="SPICE的变异与进化-1"><a href="#SPICE的变异与进化-1" class="headerlink" title="SPICE的变异与进化"></a>SPICE的变异与进化</h3><p>　　SPICE最初是用来做小型电路仿真的。电路中的元器件数也就几十最多到几百个。随着电路规模越做越大，电路种类越来越多，人们会问：SPICE能不能跑得更快一些，能运行的电路更大一些？自然而然的，SPICE的变种就出现了。我们在这儿讲三个方面：第一是快速仿真；第二是数模混合仿真；第三是扩展应用。<br>　　先说说快速仿真(fast SPICE)。这也是市场最大，发展最多的一块儿。因为SPICE是把整个电路放到一个矩阵中来解。人们就想能不能把电路分成小块单独解，然后再把各块之间连接起来，这样不就快了吗？的确，对数字电路，确实可以用分割的方法。因为数字电路的信号是有方向的，我们可以在没有直流通路的地方把它分开(例如在两个串联的反相器中间)。另外就是数字信号是离散的，我们可以把它分成几段。分的段越大，时间步长也就能越大，需要解的次数就少了(当然结果也就没那么精确了)。还有就是器件模型。我们前面讲过如今的mosfet模型非常复杂，要花很多时间去算，那能不能把它简化呢？可以。事实证明对数字电路以及数模混合电路(像PLL、Memory、Serdes)来说，用表格模型(table model)来代替复杂的方程模型是个不错的选择。通过这些简化，快速仿真可以比原来的SPICE快几十到上百倍，而精度是在SPICE的5%~10%之内。像EPIC的PowerMill(后来成为Synopsys的NanoSim)，Anagram的ADM(后来成为Avant的StarSim)，Celestry(后来成为Cadence)的UltraSim，Nassda(后来成为Synopsys)的HSIM，等等。最近比较流行的是Magma(现在是Synopsys)的FineSim，BDA(现在是Mentor)的AFS，Proplus的NanoSpice。<br>　　其次来说说数模混合仿真。当一个系统中既有模拟电路，又有数字电路，人么自然就会想到把SPICE和数字仿真器(如Synopsys的VerilogVCS、Cadence的NC、Mentor的ModelSim)连在一起运行。SPICE去算模拟电路部分，数字仿真器去算数字电路部分，它们之间用数模&#x2F;模数转换器(AD&#x2F;DA)连接。注意这种运行方式跟上面的快速仿真不同。这样的混合仿真需要两个仿真器。而且这样的构架有缺点。主要的问题是数模转换没有一个标准。市面上有很多SPICE以及Verilog仿真工具，每一个工具的转换界面都不一样，这就造成混合仿真的界面非常复杂。因此，最近发展的混合仿真都采用数模一体化的构架，大大简化了转换界面，而且用户只需要再一个环境下就可以进行混合仿真。这样的工具有Cadence的Virtuoso-AMS、Synopsys的HSIM-plusHDL、Silvaco的Harmony、华大的Aeolus-ADS等。<br>　　最后再来说说SPICE的扩展应用。虽说SPICE是针对集成电路(IC)开发的，但它的应用已扩展到系统级(System Level)，主要是电路板(PCB)级的仿真。那系统级仿真与集成电路仿真有何区别呢？它们不都是电路吗？呵呵，没错，它们都是电路，但区别还是蛮大的。主要是它们的规模与尺寸的不同。我们知道，集成电路是集成在芯片上的。其器件尺寸现在已做到纳米级。而系统的尺寸还在毫米、厘米甚至米的数量级。学过电磁的同学都知道，当器件的尺寸大于信号波长的时候，就要考虑分布的场效应了。拿一段导线做例子。一段在芯片上的导线，你可以把它看做一个电阻。而一段电路板上的导线，你就必须用传输线(Transmission Line)来代表它，否则误差就太大了。如果信号的频率再高，那就要用S参数了(S-Parameter)。因此，电路仿真发展出一大分支，这就是所谓的“信号完整性”工具。像Agilent的ADS、Mentor的HyperLynx以及Cadence的OrCAD和Allegro</p><h3 id="SPICE今后的道路"><a href="#SPICE今后的道路" class="headerlink" title="SPICE今后的道路"></a>SPICE今后的道路</h3><p>　　从70年代初到如今的四十多年里，SPICE从只能仿真十几个节点&#x2F;器件到今天可以仿真上百万个节点&#x2F;器件的电路，这是一个非常惊人的成就。但这个成就的主要原因是摩尔定律。前面我们讲述过自从90年代中期，SPICE本身就没有太大的变化了。这怪就怪(不，应该是感谢才对)SPICE的先驱们。他们奠定了一个坚实的基础，使得我们后面的人都没什么可做的了。的确，要改变SPICE的基石，例如改进的节点分析法(Modified Nodal Analysis)，稀疏矩阵解法(Sparse Metrix Solver)，牛顿-拉夫逊迭代(Newton-Raphson Iteration)，隐形数值积分(Implicit Numberical Integration)，等等，确实不容易。说到底，SPICE是一个解非线性常微分方程的工具。你要想从根本上有个革命性的改变，那你还是从数学上着手吧。<br>　　SPICE是一个非常通用的工具。虽然集成电路是它的着重点，但我们看到它也被广泛应用到了系统级、电源级甚至延伸到了不同领域的仿真。我们前面讲到了数模混合(Mixed-Signal)，但它还是在电路的范畴内。可不可以把它扩展到其他领域(Mixed-Domain&#x2F;Multiple Discipline)，比如机械、热力甚至生物领域？答案是可以的。例如，在电路领域中，我们解的是跨过两个节点的电压和通过一个支路的电流。而在机械领域中，我们解的是两个点的位置和力。从早期Saber的MAST语言，到现在的工业标准Verilog-AMS和VHDL-AMS都已经支持不同领域的描述。这就给跨领域的仿真带来了可能。虽然Verilog-AMS还没有被模拟电路设计者广泛采用，但它很可能先从另一个地方发扬光大。比如，微机电系统(MEMS)很有可能是下一个大的应用领域。<br>　　另一方面，虽然SPICE可以解很多类型的电路，但它的运算速度也因此受到了制约。每一种电路都有它自己的特点，比如数字电路信号的离散型，存储器(RAM)结构的重复性，等等。我们可以在SPICE的基础上，利用这些电路的特点来开发特制的“SPICE”以提高仿真的效率。前面说的快速SPICE仿真工具就属于这一类。它们的通用性不如SPICE，但它们针对某一类电路的仿真效率是非常高的。<br>　　最后一方面，我们从SPICE的发展可以清晰的看到，软件的发展是与硬件的发展密不可分的。现在的处理器基本上都是多核、多线程的，新一代的商业SPICE也利用了这些新的处理器架构。最新的图形处理器(GPU)更是达到了上百个核，上万个线程。并行的开发工具像开放计算语言(OpenCL)，CUDA也逐渐成熟。高性能计算(HPC)以及云计算也在日益普及。SPICE能否利用这些新的环境来提高仿真效率呢？呵呵，这个问题就需要你来解答了。<br>下面的图给出了主要SPICE的发展过程。其中的代号如下：</p><style>    tr td,th{        border:2px solid lightgrey;    }    .mt{        border-collapse: collapse;    }</style><table class="mt">    <tr>        <th>代号</th>        <td>UCB</td>        <td>gEDA</td>        <td>Meta</td>        <td>SNPS</td>        <td>μSIM</td>        <td>CDN</td>        <td>MENT</td>    </tr>    <tr>        <th>意义</th>        <td>伯克利</td>        <td>GNU EDA</td>        <td>Meta-Software</td>        <td>Synopsys</td>        <td>MicroSIM</td>        <td>Cadence</td>        <td>Mentor</td>    </tr></table><div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230904094920.png"></div><br>　　下面的图给出了主要快速仿真工具的发展过程，“+”代表并购。　　注意这些快速仿真工具都是商业化的。目前还没有一个开源的快速仿真工具具有像伯克利SPICE那样广泛的影响力。<div align="center"><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230904144358.png"></div><br><p>　　哪里可以找到SPICE仿真模型？<br>寻找SPICE模型最好的方法就是去浏览厂商或是制造商的网页。下面列出的是部分最常用的并且在其网站上提供SPICE模型的芯片制造商。</p><table><thead><tr><th>厂商</th><th>描述</th></tr></thead><tbody><tr><td>Analog Devices</td><td>放大器和比较器、AD&#x2F;DA、嵌入式处理与DSP、MEMS和传感器、RF&#x2F;IF组件、开关&#x2F;多路复用器、模拟微控制器、接口、电源与温度管理</td></tr><tr><td>Analog and RF Models</td><td>模拟与射频模型</td></tr><tr><td>Apex Microtechnology</td><td>线性放大器、PWM放大器</td></tr><tr><td>Christophe Basso</td><td>开关电源</td></tr><tr><td>Coilcraft, Inc.</td><td>功率磁技术、射频电感、EMI&#x2F;RFI滤波器、宽带磁技术</td></tr><tr><td>Directed Energy</td><td>二极管、开关模式MOSFETs、HF&#x2F;VHF线性MOSFET、MOSFET驱动IC</td></tr><tr><td>Duncan Amps</td><td>放大器、真空管</td></tr><tr><td>Fairchild Semiconductors</td><td>放大器与比较器、二极管与整流二极管、接口、数字逻辑设备、信号转换、电压频率转换器、微控制器、光电管、开关、功率控制器、功率驱动器、晶体管、滤波器、稳压器</td></tr><tr><td>Infineon Technologies AG</td><td>光纤、微控制器、功率半导体、小型信号离散原件</td></tr><tr><td>International Rectifier</td><td>HEXFET功率MOSFET、二极管、桥、晶闸管、继电器、高压IC、只能功率模块、只能功率开关、HiRel功率MOSFETs、HiRel高压门驱动器</td></tr><tr><td>Kemet</td><td>含有铝、陶瓷和钽的表面覆盖电容器与含有陶瓷和钽的贴片电容</td></tr><tr><td>Linear Technology</td><td>信号调理、数据转换、功率管理、接口、高频率与光学</td></tr><tr><td>Maxim</td><td>放大器与比较器、模拟开关与多路复用器、时钟、计数器、继电器线路、振荡器、RTC、数据转换器、采样与保持、数字电势剂、光纤通信、滤波器(模拟)、高频ASIC、热插拔与功率开关、接口与互联、内存：暂时、非暂时、多功能、温度管理、传感器、传感器调理、电压参考、无线、射频与电缆</td></tr><tr><td>National Semiconductor</td><td>放大器、功率管理、温度传感器、接口、LVDS、以太网、USB技术、Micro SMD</td></tr><tr><td>ON Semiconductor</td><td>功率管理、放大器、比较器、模拟开关、晶闸管、二极管、整流器、双极性晶体管、FET、标准逻辑、差分逻辑</td></tr><tr><td>Philips</td><td>模拟&#x2F;线性、音频、汽车、连接器、数据&#x2F;媒体&#x2F;视频处理、离散、显示器、接口与控制、逻辑、微控制器、功率与功率管理、射频、传感器</td></tr><tr><td>Polyfet</td><td>Polyfet晶体管</td></tr><tr><td>Protek</td><td>瞬态电压抑止</td></tr><tr><td>SMPS Power Supplies</td><td>开关电源仿真</td></tr><tr><td>Supertex</td><td>混和信号半导体、高压接口产品</td></tr><tr><td>ST Microelectronics</td><td>放大器与线性IC、模拟与混和信号IC、二极管、EMI滤波与调理、逻辑、信号开关、内存、微控制器、电源管理、保护设备、传感器、智能卡IC、晶闸管与交流开关、晶体管</td></tr><tr><td>Texas Instruments</td><td>缓冲器、驱动器与收发器、触发器、锁存存器、门、计数器、解码器&#x2F;编码器&#x2F;多路复用器、数字比较器</td></tr><tr><td>Tyco Electronics(前身Amp)</td><td>电磁元件、无源元件、电源、射频与微波产品</td></tr><tr><td>Vishay</td><td>模拟开关、电容、二极管、电感、集成模块、功率IC、LED、功率MOSFET、电阻以及热敏电阻的制造商。</td></tr><tr><td>Zetex</td><td>直流—直流变换控制器、参考电压源、电流监控、电机控制、Acoustar™声音解决方案、线性稳压器</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　如今，SPICE广泛应用在仿真模拟电路(运放、基准、电源、AD&amp;#x2F;DA等)，混合信号电路(PLL、SRAM&amp;#x2F;DRAM，高速接口)，精确数字电路(延时、时序、功耗、漏电流等)，建立SoC的时序及功耗单元库，分析系统级的信号完整性，等等。&lt;br&gt;作为最早的</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Semiconductor" scheme="http://shenguosai.github.io/tags/Semiconductor/"/>
    
  </entry>
  
  <entry>
    <title>放大器的谐波失真(THD)</title>
    <link href="http://shenguosai.github.io/2023/08/21/%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E8%B0%90%E6%B3%A2%E5%A4%B1%E7%9C%9F-THD/"/>
    <id>http://shenguosai.github.io/2023/08/21/%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E8%B0%90%E6%B3%A2%E5%A4%B1%E7%9C%9F-THD/</id>
    <published>2023-08-21T13:47:21.000Z</published>
    <updated>2023-08-21T15:16:49.446Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结和收集关于放大器谐波失真的原因及改良方法。</p><h2 id="一、什么是谐波失真"><a href="#一、什么是谐波失真" class="headerlink" title="一、什么是谐波失真"></a>一、什么是谐波失真</h2><blockquote><p>THD是英文Total Harmonic Distortion的缩写，译成中文即为总谐波失真。</p></blockquote><h4 id="谐波失真是什么？"><a href="#谐波失真是什么？" class="headerlink" title="谐波失真是什么？"></a>谐波失真是什么？</h4><p>谐波失真的原因是电路电路的线性度不好。<br>理想线性电路的输入x和输出y可以使用一次方程表示：$y&#x3D;ax+b$<br>如果输出和输入的关系偏离了上述方程的直线我们称之为线性度差。<br>下面是一个典型的线性度差的代表电路：Diode Clip电路。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821215601.png" alt="20230821215601"><br>根据二极管的顺方向I-V特性可知，在±0.6V之外被clip，就是说当输入电压在±0.6V之外时，电路显现非线性特性，如下图：<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821215939.png" alt="20230821215939"><br>如果将正弦波作为此电路的输入信号，输出信号变为在原信号基础上叠加了“不存在”的信号。其输入即输出入下式所示：<br>输入：$V_{in}&#x3D;sinωt$<br>输出：$V_{out}&#x3D;a_1sin(ωt+φ_1)+a_2sin(ωt+φ_2)+a_3sin(ωt+φ_3)+…$<br>输入输出的FFT(Fast Fourier Transform)结果如下图所示：<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821220543.png" alt="20230821220543"></p><h2 id="二、谐波失真的定量分析"><a href="#二、谐波失真的定量分析" class="headerlink" title="二、谐波失真的定量分析"></a>二、谐波失真的定量分析</h2><p>在进行谐波失真的定量分析时经常用到的指标为THD和THD+N。</p><blockquote><p>THD+N即Total Harmonic Distortion + Noise的缩写。</p></blockquote><p>通常我们所说的谐波失真都是叠加了输入信号的高次谐波。THD的定义即为在基波的高次谐波的平方和的平方根与基波的电压之比。<br>即：$V_{THD}&#x3D;\frac{\sqrt{V_2^2+V_3^2+V_4^2+…+V_N^2}}{V_1}$<br>其中，$V_1$为基波电压成分，$V_2$、$V_3$、$V_4$···$V_N$为整数倍的谐波电压成分。<br>高次谐波成分+噪声，即THD+N就是在高次谐波中再加入噪声：<br>$V_{THD}&#x3D;\frac{\sqrt{V_2^2+V_3^2+V_4^2+…+V_N^2+V_{Noise}^2}}{V_1}$</p><h2 id="三、通过反馈改善谐波失真"><a href="#三、通过反馈改善谐波失真" class="headerlink" title="三、通过反馈改善谐波失真"></a>三、通过反馈改善谐波失真</h2><p>改善THD方法中最一般的方法就是利用反馈，还是用上面的Diode Clip电路举例说明，在此电路中加入放大器及其反馈后电路结构如下：<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821222803.png" alt="20230821222803"></p><p><em>我们使用LTSpice中的理想放大器，设置其直流增益为100dB，带宽为10MHz。则1kHz的输入信号的增益为80dB。</em><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821223007.png" alt="20230821223007"></p><p>由于作为中间节点的放大器的输出可以对非线性进行抵消，所以整个电路的输入输出特性有了较大的改善。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821223242.png" alt="20230821223242"></p><p>使用1kHz的正弦波作为输入时可以看出只有少量的谐波成分的残留。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821223841.png" alt="20230821223841"></p><p>通过FFT结果可以看到奇数倍的高次谐波成分。$THD&#x3D;3.2%$<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224015.png" alt="20230821224015"></p><h4 id="下面讨论如果进一步削减谐波失真应该怎么做"><a href="#下面讨论如果进一步削减谐波失真应该怎么做" class="headerlink" title="下面讨论如果进一步削减谐波失真应该怎么做"></a>下面讨论如果进一步削减谐波失真应该怎么做</h4><p>首先为了加强反馈网络我们可以保持放大器带宽的情况下将放大器的增益提高到120dB以上。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224157.png" alt="20230821224157"></p><p>可以看到THD完全没有改善还是3.2%，原因是1kHz的反馈量没有变化。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224254.png" alt="20230821224254"></p><p>然后尝试保持放大器的直流增益不变将带宽增加到100MHz。由于是单极点放大器，所以1kHz时的增益约上升10倍。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224406.png" alt="20230821224406"></p><p>THD改善了0.35%，约上升了1&#x2F;10。所以，<b><font color="red"> 改善AC的谐波失真需要重点关注带宽！！</font></b><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224550.png" alt="20230821224550"></p><p>为确保放大器的稳定性，在高频阶段通常降低增益。也就是说在单位增益频率附近的信号无法使用反馈来改善THD。所以，一般来说高频信号的THD会比较差。</p><h2 id="四、输出端形成的开关谐波失真"><a href="#四、输出端形成的开关谐波失真" class="headerlink" title="四、输出端形成的开关谐波失真"></a>四、输出端形成的开关谐波失真</h2><p>经过妥当设计的放大器在规格范围内使用时，造成谐波失真的最多原因是输出端的谐波失真。<br>通过使用射极跟随器驱动负载电路的电路举例说明：<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821224912.png" alt="20230821224912"></p><p>射极跟随器通常对输入电压进行约1倍的放大输出(即，输出&#x3D;输入)，但如果集电极的电流在接近0A附近工作时，线性度会发生恶化。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821225043.png" alt="20230821225043"></p><p>使用正弦波作为输入信号，在集电极电流为0(cut off)时输出波形出现严重失真。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821225153.png" alt="20230821225153"></p><p>现实中放大器则通常通过一个npn和一个pnp组成推挽式结构，在一侧无法正常工作时通过另一侧进行补偿。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821225302.png" alt="20230821225302"></p><p>即使使用合适的偏置在输入信号为0时两侧的三极管均不会发生cut off(Class AB)，在大振幅或大负载电流的情况下也会使一侧的三极管发生cut off，不可避免地导致THD指标恶化。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821225458.png" alt="20230821225458"></p><p>开关谐波失真在Class A结构中可以避免，但是会增加功耗及电路的复杂度。</p><h2 id="五、耗尽层电容引起的失真"><a href="#五、耗尽层电容引起的失真" class="headerlink" title="五、耗尽层电容引起的失真"></a>五、耗尽层电容引起的失真</h2><p>去除开关因素导致的失真之后，剩余的就是耗尽层电容为起因导致的失真。<br>由于耗尽层是绝缘的，所以在Si和耗尽层之间可以看做形成电容，这个电容称之为耗尽层电容。耗尽层的长度随两边的电压不同而变化，就是说随着两端电压的不同耗尽层电容值是发生变化的。可变容量二极管就是利用这一原理制作而成的。普通的小信号用PN结二极管以及晶体管的集电极和基电极之间的容值也会跟随两端电压而变化。<br>耗尽层电容导致的失真由以下电路模型展示。<br>虽然在直流区域有反馈，但是在100kHz时输出由G1的互导和Q1的寄生电容决定。<br>Q1以外均使用理想器件，Q1为共基级放大电路，所以输出波形仅会受到由集电极电位影响的非线性度影响而导致失真。Q1的集极-基级之间的反向偏置，所以在集电极上形成耗尽层电容$C_{ob}$经电源V2连接GND。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821230626.png" alt="20230821230626"></p><p>若集电极电压发生变化，则$C_{ob}$的容值发生变化，导致$C_{ob}$的充电电流释放至GND而造成了失真发生。THD为0.47%。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821230849.png" alt="20230821230849"></p><p>其对策为增加射极跟随器使$C_{ob}$的充电电流能够回流。通过Q2可以使Q1的集电极&#x3D;&#x3D;&gt; $C_{ob}$&#x3D;&#x3D;&gt; GND释放的电流进行回流而抵消$C_{ob}$造成的非线性。为使开环增益相同增加C3.<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821231335.png" alt="20230821231335"></p><p>此时，THD有了巨大的改善，变为0.0008%。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230821231413.png" alt="20230821231413"></p><blockquote><p>参考文献：<br><em><font size=2>Douglas Self, Small Signal Audio Design, 2010, Focal Press</font></em><br><em><font size=2>黒田徹, 解析OPアンプ&amp;トランジスタ活用, 2002, CQ出版</font></em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主要总结和收集关于放大器谐波失真的原因及改良方法。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是谐波失真&quot;&gt;&lt;a href=&quot;#一、什么是谐波失真&quot; class=&quot;headerlink&quot; title=&quot;一、什么是谐波失真&quot;&gt;&lt;/a&gt;一、什么是谐波失真&lt;/h2&gt;&lt;blockquot</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Semiconductor" scheme="http://shenguosai.github.io/tags/Semiconductor/"/>
    
  </entry>
  
  <entry>
    <title>《我叫赵甲第》片尾名言及经典台词</title>
    <link href="http://shenguosai.github.io/2023/08/19/%E3%80%8A%E6%88%91%E5%8F%AB%E8%B5%B5%E7%94%B2%E7%AC%AC%E3%80%8B%E7%89%87%E5%B0%BE%E5%90%8D%E8%A8%80/"/>
    <id>http://shenguosai.github.io/2023/08/19/%E3%80%8A%E6%88%91%E5%8F%AB%E8%B5%B5%E7%94%B2%E7%AC%AC%E3%80%8B%E7%89%87%E5%B0%BE%E5%90%8D%E8%A8%80/</id>
    <published>2023-08-19T06:04:53.000Z</published>
    <updated>2023-08-19T07:27:09.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="片尾名言"><a href="#片尾名言" class="headerlink" title="片尾名言"></a>片尾名言</h1><h4 id="第1集"><a href="#第1集" class="headerlink" title="第1集"></a>第1集</h4><blockquote><p>生活的道路是自由美好的，可是我们迷了路，贪婪毒害了任性，用仇恨分割了世界。</p><p align="right"> ——查理·卓别林《大独裁者》</blockquote><h4 id="第2集"><a href="#第2集" class="headerlink" title="第2集"></a>第2集</h4><blockquote><p>一切都是瞬息，一切都将会过去，而那过去了的，就会成为亲切的怀恋。</p><p align="right"> ——亚历山大·普希金《假如生活欺骗了你》</blockquote><h4 id="第3集"><a href="#第3集" class="headerlink" title="第3集"></a>第3集</h4><blockquote><p>我姑且举灰黑的手装作喝干一杯酒，我将在不知道时候的时候独立远行。</p><p align="right"> ——鲁迅《野草》</blockquote><h4 id="第4集"><a href="#第4集" class="headerlink" title="第4集"></a>第4集</h4><blockquote><p>一旦走进深处，人与人就是相互的迷宫。</p><p align="right"> ——史铁生《活出爱》</blockquote><h4 id="第5集"><a href="#第5集" class="headerlink" title="第5集"></a>第5集</h4><blockquote><p>爱情是叹息吹起的一阵烟。</p><p align="right"> ——威廉·莎士比亚《罗密欧与朱丽叶》</blockquote><h4 id="第6集"><a href="#第6集" class="headerlink" title="第6集"></a>第6集</h4><blockquote><p>当我猜到谜底，才发现，一切都已过去，岁月早已换了谜题。</p><p align="right"> ——席慕蓉《谜题》</blockquote><h4 id="第7集"><a href="#第7集" class="headerlink" title="第7集"></a>第7集</h4><blockquote><p>即使一切都已发生过，我也习惯了，不再流泪。</p><p align="right"> ——舒婷《路遇》</blockquote><h4 id="第8集"><a href="#第8集" class="headerlink" title="第8集"></a>第8集</h4><blockquote><p>孤独的人有他们自己的泥沼。</p><p align="right"> ——张爱玲《年轻的时候》</blockquote><h4 id="第9集"><a href="#第9集" class="headerlink" title="第9集"></a>第9集</h4><blockquote><p>有生命的种子绝不会悲观、叹气，它相信有了阻力才有磨炼。</p><p align="right"> ——夏衍《种子的力》</blockquote><h4 id="第10集"><a href="#第10集" class="headerlink" title="第10集"></a>第10集</h4><blockquote><p><b><font color="red">我们飞翔得越高，我们在那些不能飞翔得人眼中的形象越是渺小。</font></b></p><p align="right"> ——费里德里希·尼采《查拉图斯特拉如是说》</blockquote><h4 id="第11集"><a href="#第11集" class="headerlink" title="第11集"></a>第11集</h4><blockquote><p>纵使黑暗吞噬了一切，太阳还可以重新回来。</p><p align="right"> ——汪国真《只要明天还在》</blockquote><h4 id="第12集"><a href="#第12集" class="headerlink" title="第12集"></a>第12集</h4><blockquote><p>我们的心是一座宝库，一下子倒空了，就会破产。</p><p align="right"> ——奥诺雷·德·巴尔扎克《高老头》</blockquote><h4 id="第13集"><a href="#第13集" class="headerlink" title="第13集"></a>第13集</h4><blockquote><p><b><font color="red">人总是倾向于把自己生活的小圈子看作是世界的中心，并把自己特殊的个人生活当做宇宙的法则。</font></b></p><p align="right"> ——恩斯特·卡希尔《人论》</blockquote><h4 id="第14集"><a href="#第14集" class="headerlink" title="第14集"></a>第14集</h4><blockquote><p>从前有个古老的故事，一个猎人得到了无上的光荣和尊严，但他却长时间遇到极大的困难和生命的危险。</p><p align="right"> ——汉斯·安徒生《光荣的荆棘路》</blockquote><h4 id="第15集"><a href="#第15集" class="headerlink" title="第15集"></a>第15集</h4><blockquote><p>弓在紧张状态的顶点马上将直射出，最沉重而又最自由的一箭。</p><p align="right"> ——阿尔贝·加缪《适度与过度》</blockquote><h4 id="第16集"><a href="#第16集" class="headerlink" title="第16集"></a>第16集</h4><blockquote><p>我想无论是写作还是人生，正确的出发都是走进窄门，不要被宽阔的大门所迷惑，那里面的路没有多长。</p><p align="right"> ——余华《兄弟》</blockquote><h4 id="第17集"><a href="#第17集" class="headerlink" title="第17集"></a>第17集</h4><blockquote><p>未来不同于过去之处，在于它明确地留给人类充足的选择和行动的空间。</p><p align="right"> ——齐格蒙特·鲍曼《自由》</blockquote><h4 id="第18集"><a href="#第18集" class="headerlink" title="第18集"></a>第18集</h4><blockquote><p>要像一座卓立的塔，绝不因为暴雨而倾斜。</p><p align="right"> ——但丁·阿利吉耶里《神曲》</blockquote><h4 id="第19集"><a href="#第19集" class="headerlink" title="第19集"></a>第19集</h4><blockquote><p>你看不见你自己，你看见的只是你的影子。</p><p align="right"> ——泰戈尔《飞鸟集》</blockquote><h4 id="第20集"><a href="#第20集" class="headerlink" title="第20集"></a>第20集</h4><blockquote><p>君子成人之美，不成人之恶，小人反是。</p><p align="right"> ——孔子《论语》</blockquote><h4 id="第21集"><a href="#第21集" class="headerlink" title="第21集"></a>第21集</h4><blockquote><p>唯一能自慰的是，我们曾真诚而充满激情地在这个世界上生活过，竭尽全力的劳动过，并不计代价地将自己的血汗献给了不死的人类之树。</p><p align="right"> ——路遥《平凡的世界》</blockquote><h4 id="第22集"><a href="#第22集" class="headerlink" title="第22集"></a>第22集</h4><blockquote><p>一个不成熟的人的标志，是他愿意为了某个理由而轰轰烈烈的死去；而一个成熟的人的标志，是他愿意为了某个理由而谦恭的活下去。</p><p align="right"> ——杰罗姆·塞林格《麦田里的守望者》</blockquote><h4 id="第23集"><a href="#第23集" class="headerlink" title="第23集"></a>第23集</h4><blockquote><p>忘却了的梦，日后也无法重温。</p><p align="right"> ——川端康成《千只鹤》</blockquote><h4 id="第24集"><a href="#第24集" class="headerlink" title="第24集"></a>第24集</h4><blockquote><p>死并非生的对立面，而是作为生的一部分永存。</p><p align="right"> ——村上春树《挪威的森林》</blockquote><h4 id="第25集"><a href="#第25集" class="headerlink" title="第25集"></a>第25集</h4><blockquote><p>天亮的日子多着呢，太阳不过是一个晓星。</p><p align="right"> ——亨利·梭罗《瓦尔登湖》</blockquote><h4 id="第26集"><a href="#第26集" class="headerlink" title="第26集"></a>第26集</h4><blockquote><p>沙漠很美，是因为有个地方藏着一口井。</p><p align="right"> ——安托万·埃克苏佩里《小王子》</blockquote><h4 id="第27集"><a href="#第27集" class="headerlink" title="第27集"></a>第27集</h4><blockquote><p>我相信那一切都是种子，只有经过埋葬，才有生机。</p><p align="right"> ——顾城《给我的尊师安徒生》</blockquote><h4 id="第28集"><a href="#第28集" class="headerlink" title="第28集"></a>第28集</h4><blockquote><p>一个人自身能够成为什么样的人，取决于他在生命旅途中所遭遇到的他人以及召唤着他的信念。</p><p align="right"> ——卡尔·雅斯贝尔斯《时代的精神状况》</blockquote><h4 id="第29集"><a href="#第29集" class="headerlink" title="第29集"></a>第29集</h4><blockquote><p>生命对每个人都提出了问题，他必须通过对自己生命的理解来回答生命的提问。</p><p align="right"> ——维克多·弗兰克尔《活出生命的意义》</blockquote><h4 id="第30集"><a href="#第30集" class="headerlink" title="第30集"></a>第30集</h4><blockquote><p>人们所走的道路会预示某种结局。这就是说，如果他们坚持走他们的道路，他们就一定会到达那种结局。</p><p align="right"> ——查尔斯·狄更斯《圣诞颂歌》</blockquote><h1 id="经典台词"><a href="#经典台词" class="headerlink" title="经典台词"></a>经典台词</h1><blockquote><p><b><font color="red">人必有所执，方能有所成。</font></b></p></blockquote><p>说说为什么抽烟，为了等一个劝我戒烟的女人。</p><blockquote><p>争取不要错过谁，错过的，就尽量去祝福。</p></blockquote><p>人生为棋我为卒，行动虽慢，命运多舛，可谁曾见我后腿半步？</p><blockquote><p>一个人在山脚喊得再起劲，山腰和山头上的人都懒得理会。</p></blockquote><p>耿直其实很多时候也是一种变相的圆融，成本低，收益却不低，是聪明人才知道的诀窍。</p><blockquote><p>多读书，是腹有诗书气自华，看人待物能多几分透彻；多识人，是以人为镜，能够多自省自知。</p></blockquote><p>任何一个好的作品，都只是作者在讲一个故事。任何一部被后来者冠上伟大的作品，都是一群好事者在挖掘作者自己都不懂的东西。</p><blockquote><p>如果你是一个好人，那你也要知道世上总有没你好的坏人，你得保护好自己。不能把所有人都想象得太美好。付出没有回报，好心被误解，都不要对生活失去信心。<br>如果你是一个坏人，那你也要相信世上总有一种东西叫良心，要相信报应。<br>如果你是一个男人，就要知道女人的善良，珍惜她们的青春。<br>如果你是一个女人，就要懂得男人的不易，理解他们的奔波。<br>如果你是一个孩子，期待着精彩人生，请不要急着长大。<br>如果你是一个老人，见多了风霜险恶，请不要把慈悲麻木。<br>如果你是一个功成名就的夫人，请尊重人生。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;片尾名言&quot;&gt;&lt;a href=&quot;#片尾名言&quot; class=&quot;headerlink&quot; title=&quot;片尾名言&quot;&gt;&lt;/a&gt;片尾名言&lt;/h1&gt;&lt;h4 id=&quot;第1集&quot;&gt;&lt;a href=&quot;#第1集&quot; class=&quot;headerlink&quot; title=&quot;第1集&quot;&gt;&lt;/a&gt;第1</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Poetry" scheme="http://shenguosai.github.io/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>日本鬼子名称的由来</title>
    <link href="http://shenguosai.github.io/2023/08/17/%E6%97%A5%E6%9C%AC%E9%AC%BC%E5%AD%90%E5%90%8D%E7%A7%B0%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <id>http://shenguosai.github.io/2023/08/17/%E6%97%A5%E6%9C%AC%E9%AC%BC%E5%AD%90%E5%90%8D%E7%A7%B0%E7%9A%84%E7%94%B1%E6%9D%A5/</id>
    <published>2023-08-17T13:39:53.000Z</published>
    <updated>2023-09-11T01:39:29.692Z</updated>
    
    <content type="html"><![CDATA[<p>　　中日甲午战争的记者会上，日本人想嘲讽和羞辱中国人，事先准备好了一副对联的上联让与会的中国代表当场对出下联。<br><font size=10 face="华文行楷">上联：骑奇马、张长弓，琴瑟琵琶、八大王并肩居头上，单戈独战。</font><br>　　“骑奇马，张长弓”这两句是将第一个字本身拆开两个字组成的，而琴瑟琵琶这四个字共共有八个王字对应了后半部分“八大王并肩居头上”，末句“单戈独战”的“单戈”合成一个繁体的“战”字。日本人出这个对联的大意是自己骑着快马张着长弓，兵强马壮的兵临中国，赢得胜利，并以此鄙视和嘲讽中国。<br>　　正当日本人洋洋得意认为没有中国人对出下联时，一位负责谈判的清朝大臣拿起笔写出了下联。<br><font size=10 face="华文行楷">下联：倭委人、袭龙衣，魑魅魍魉、四小鬼屈膝跪身旁，合手擒拿。</font><br>　　这个下联真是神来之笔，令日本人膛目结舌。下面每一句都工整的对应上联。倭委人袭龙衣对应骑齐马张长弓，魑魅魍魉对应琴瑟琵琶，且魑魅魍魉左偏旁都是鬼字而且有四个。从字形看鬼字末笔一横勾就像是在下跪故屈膝跪身旁，末句合手擒拿的合手就是拿字，正好对应上面的八大王并肩居头上、单戈独战，而且还反过来将了日本人一军。下联的意思是日本小人偷穿龙袍，只不过是魑魅魍魉四个小鬼而已，赶快下跪认错否则合手擒拿，这下联是句句工整字字珠玑。<br>　　从那以后中国人不在称日本人为倭寇而叫日本鬼子了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　中日甲午战争的记者会上，日本人想嘲讽和羞辱中国人，事先准备好了一副对联的上联让与会的中国代表当场对出下联。&lt;br&gt;&lt;font size=10 face=&quot;华文行楷&quot;&gt;上联：骑奇马、张长弓，琴瑟琵琶、八大王并肩居头上，单戈独战。&lt;/font&gt;&lt;br&gt;　　“骑奇马，张长弓”</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Poetry" scheme="http://shenguosai.github.io/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>几种功率管</title>
    <link href="http://shenguosai.github.io/2023/08/17/NLDMOS%E5%92%8CDEMOS/"/>
    <id>http://shenguosai.github.io/2023/08/17/NLDMOS%E5%92%8CDEMOS/</id>
    <published>2023-08-17T03:32:09.000Z</published>
    <updated>2023-08-17T14:57:05.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DMOS：Double-Diffused-MOS"><a href="#DMOS：Double-Diffused-MOS" class="headerlink" title="DMOS：Double-Diffused MOS"></a>DMOS：Double-Diffused MOS</h2><h2 id="VDMOS：Virtical-DMOS"><a href="#VDMOS：Virtical-DMOS" class="headerlink" title="VDMOS：Virtical DMOS"></a>VDMOS：Virtical DMOS</h2><p>垂直扩散DMOS，VDMOS的漏极在硅片背面，沟道在两个维度上包围源极，所以叫“垂直”，实际上栅极依然是水平的。VDMOS是PowerMOS（大功率MOS器件）的一种，通过垂直设计减小沟道场强，可以使短沟道承受很高的电压和电流。<br>缺点是漏极要从背面引出，很难用和主流集成电路工艺兼容。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230817223815.png" alt="20230817223815"><br>这种结构可以减小漏电流并提高开关速度，具有低导通电阻、高电压承受能力和低开关损耗的优点。它在功率电子器件中广泛应用，如逆变器、直流-直流转换器和交流电机驱动器等。主要缺点是存在体效应和漏电流，且制造过程较为复杂。</p><h2 id="LDMOS：Lateral-DMOS，常用于高电压大电流电路。"><a href="#LDMOS：Lateral-DMOS，常用于高电压大电流电路。" class="headerlink" title="LDMOS：Lateral DMOS，常用于高电压大电流电路。"></a>LDMOS：Lateral DMOS，常用于高电压大电流电路。</h2><p>水平扩散DMOS，也是PowerMOS的一种，和VDMOS的区别是去掉了背部的漏极引出，方便兼容其它工艺(CMOS工艺)，和其他集成电路整合在同一块芯片上。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230817224559.png" alt="20230817224559"><br>可以看到LDMOS把背部的Drain引出挪到了右边，代价是相对VDMOS面积变大了。<br>LDMOS具有高电压承受能力和低导通电阻的优点。LDMOS主要应用于高频功率放大器、天线开关和发射机等领域。LDMOS的主要缺点是存在漏电流和温度效应，且不适用于高速开关应用。<br>LDMOS由于更容易与CMOS工艺兼容而被广泛采用。LDMOS器件结构如上图所示，是一种双扩散结构的功率器件。这项技术是在相同的源&#x2F;漏区域注入两次，一次注入浓度较大（典型注入剂量 1015cm-2）的砷（As），另一次注入浓度较小（典型剂量1013cm-2）的硼（B）。注入之后再进行一个高温推进过程，由于硼扩散比砷快，所以在栅极边界下会沿着横向扩散更远（上图中P阱），形成一个有浓度梯度的沟道，它的沟道长度由这两次横向扩散的距离之差决定。为了增加击穿电压，在有源区和漏区之间有一个漂移区。LDMOS中的漂移区是该类器件设计的关键，漂移区的杂质浓度比较低，因此，当LDMOS 接高压时，漂移区由于是高阻，能够承受更高的电压。图1所示LDMOS的多晶扩展到漂移区的场氧上面，充当场极板，会弱化漂移区的表面电场，有利于提高击穿电压。场极板的作用大小与场极板的长度密切相关。要使场极板能充分发挥作用，一要设计好SiO2层的厚度，二要设计好场极板的长度。</p><h2 id="DEMOS：Drain-Extended-MOS，常用于高电压小电流电路。"><a href="#DEMOS：Drain-Extended-MOS，常用于高电压小电流电路。" class="headerlink" title="DEMOS：Drain-Extended MOS，常用于高电压小电流电路。"></a>DEMOS：Drain-Extended MOS，常用于高电压小电流电路。</h2><h2 id="SGT：Superjunction-MOSFET"><a href="#SGT：Superjunction-MOSFET" class="headerlink" title="SGT：Superjunction MOSFET"></a>SGT：Superjunction MOSFET</h2><p>采用多个交替的不同材料层构成，具有高电压承受能力和低导通电阻的优点。SGT主要应用于高压直流输电、电动汽车和太阳能发电等领域。SGT的主要缺点是制造成本较高。</p><h2 id="Cool-MOS"><a href="#Cool-MOS" class="headerlink" title="Cool MOS"></a>Cool MOS</h2><p>英飞凌发明制造的功率管，是一种快速开关MOSFET，具有低开关损耗和低导通电阻的优点。主要应用于高效率电源、LED驱动器和电动汽车充电器等领域。主要缺点是存在体效应和漏电流，且制造成本较高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DMOS：Double-Diffused-MOS&quot;&gt;&lt;a href=&quot;#DMOS：Double-Diffused-MOS&quot; class=&quot;headerlink&quot; title=&quot;DMOS：Double-Diffused MOS&quot;&gt;&lt;/a&gt;DMOS：Double-Di</summary>
      
    
    
    
    <category term="Knowledge Share" scheme="http://shenguosai.github.io/categories/Knowledge-Share/"/>
    
    
    <category term="Semiconductor" scheme="http://shenguosai.github.io/tags/Semiconductor/"/>
    
  </entry>
  
  <entry>
    <title>Hexo设置博客文章加密</title>
    <link href="http://shenguosai.github.io/2023/08/10/Hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
    <id>http://shenguosai.github.io/2023/08/10/Hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</id>
    <published>2023-08-10T05:53:55.000Z</published>
    <updated>2023-08-10T08:35:18.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>Hexo搭配使用<a href="https://www.npmjs.com/package/hexo-blog-encrypt">hexo-blog-encrypt</a>插件可以写一些比较私密的博客，通过密码验证的方式让其他人不能随意浏览。</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>在<code>blog\</code>目录运行以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h1 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h1><ol><li>在根目录的配置文件<code>_config.yml</code>中添加以下代码：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>设置加密之后，需要在新建博文时在文章头部添加加密的信息设置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">password: </span><br><span class="line">message: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>密码。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">```message```：输入密码界面的提示说明。</span><br><span class="line"></span><br><span class="line"># 针对Tag的加密</span><br><span class="line">将以下代码复制到根目录下的```_config.yml```:</span><br><span class="line">```yml</span><br><span class="line">encrypt: #hexo-blog-encrypt</span><br><span class="line">  enable: true</span><br><span class="line">  abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">  message: 您好, 这里需要密码.</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: TagName1, password: 密码A&#125;</span><br><span class="line">  - &#123;name: TagName2, password: 密码B&#125;</span><br><span class="line">  wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">  wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;Hexo搭配使用&lt;a href=&quot;https://www.npmjs.com/package/hexo-blog-encrypt&quot;&gt;hexo</summary>
      
    
    
    
    <category term="Tutorial" scheme="http://shenguosai.github.io/categories/Tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>Diary</title>
    <link href="http://shenguosai.github.io/2023/08/10/Diary/"/>
    <id>http://shenguosai.github.io/2023/08/10/Diary/</id>
    <published>2023-08-10T05:44:16.000Z</published>
    <updated>2023-08-14T13:42:34.935Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b3d81a3150f80007dace6b726570d1bf80785eaebef1e1b674c2ff9619d44c4d">da0a26c26fdc3adc6c296250a94e3b4e37c3b1006ca99a84384837ba60666222e63725afa8c7c2484146bec8770d930f27f7cbc1aab385730bb6de9b9ad40f43dc2cb4512ea66ecbaee77d3f110270396c07f5cd7bd50682f5f02dbdaf13ea6860ba18e5b1afe4437475cfc9a7886f683b96d82cf5f34d13d51e41f134c39c9ea107b82e03c415164a5e8c9ae6eccbaa51c1178359541f6830029add2fb6f40840c70cf58cbc4c1072765cef35d99caa54c46f6082ed4eafbc5c8a712c402da025b37459a55746c3e6a4655acd89ce5e67399fe459bf0c2209a13272a753ddf5d7f0edcfb2b4a276678b29181051780d6fffc40bb589b3b6e07371fc6f747133dc5b1aaca82c81747d924009a737dbe8d7e20d6578593acdfed76f2cc96759cadb6cfbb5a645343d65f5d123167707bf6304feaa884122b034aa43511972cee66bdf43407664d75cb05a9a77519bdfbe652e369c983f020291c63cd12da4a27ae1d705a9af859a5f3a72df076a434407221d0b328e6897f5b88b56dbdb70f2acf649e8b9ddfc6781a8dd84a39cae4c79b5027d90c573265b1d0d4946f27960d34dc519243c1146bdc6d78b0b5c8e40c7f59244bce1ccb6d0731a9d692077c1552430fd2248d67287f47278ca75f43f4429bcfe08ccf7a28a6f74b69007c892ee3ac3ef7ed1cf1811992166020e52eb3233ded82462edef42e403fb1f1244f6e826d8645e3b8cd81ba522390fe87acf696bc93f5630e0e5d30160915dfabd563a7c2db1925269db3bd58cb0f3fccc553b22f087a98afe780988954a508a15b8a77a2c5038ddbaa0a7028d78b2f7079dcb04101d14e9958ff7616c0c2197ba5121d248cf5c40582923105fdff4f48737d01166eb036005e4e187bd9c10fea918fe517d83d25d95fee0a2980a33723905b2e3ba25393feaf4f7b200395a79ec953f7d2d4d07461ce9d0aba0671344d13f3fae33123fabcb5936e86aae19fe8e0281dd09cb72e7db1db290aa4f33f009590c7622dd46e50dee040ac1f324995ca4acd5fe1870e3974694b96bb83fa4fa2bf6ac69d06010a824e6726a22782035bca256deb5cf20c5867626805151fec3c291312a8ee941afed3351682d93bcdc925efb517bd95cabb3478e9ffdd9bd028cdb206fc888a2c584e7f56d187bff9faf091d0b500ee77b3865b3af54ee8684888e7878e9418639fbc2c25e2e6653922590a3c2b5af1047b7c2a8a020e8c9fe2669c6ff7e2f56af1eb3a6ef1c3241835aa357b7cccbb1fdc193181dec3b28da8f2f007a41171ecd7656ed8895b7cfd5263da1d4d13f396b33bcea3ac367c56429b09e9740225271cd1348e74ccc724e92f7ceb3a0f42383ac49aba0c42a57c0ae0990b38a5f4f9689c45bdd56001dee9238f4d5e206f85b42693b06c5b46a5200ed72e92f7bf7badbb173cf8d9c8c27632dd20e73a62785570687b5f68d14135ad2e0bf9ca194db20558ffd04450f6004f6d8f53a816bad7179fcbda7a690632c430d2eb10434907b3c673a414f80bc5f080a834596e747861ca2f230c45ff395deb360c598fe2c33bbfb975a7ee41d5fea213e0b53d8b622e3cb2bae7119364d9b950116e499091680652d0ed6b8fa4181054baa4299a78eb4520bcde742dfd11e0ce3362d49e5bb73d75bb16bbd45ac9433e22bb9e90dd43c34d171ac84eda03e51e4ce12d06629fb9cdca604ab46ee649d4d60c19faea309d40391b1030c4fa7b3b1483af70eb718462898faaedf9b0140bc3f0f8547b9a304e6e06fb8cb8ef2b987d8c88ad7270081922080b415a9b7ddc23468427045bfdcd8c0c72f00a726429abc1c4bb3add6f72044ba1b0c96c03d1e155b28ae058e36c6fbc83228b4b9635eb9f12916936fca3032c20e8eb5f45b1c3664f37276ea2c0120b0031482688f4ca3e327dd9fc2966d542f5cdb7c6b4afb8560caf7d67987b548203c34f01778e974ccd05af607c2c5ae18838cad7f184af989699fd4133a5897a6c588b86cb918b0fdd47704675a4b7519293d9d70f49555a948e7b20a43a3213d6200a1ff95e48f220ba7b59f3bf97c1d7800828ec6eadf3ce0cf97b8cea0b1a18c4c1c22742fb6f5dbd71c4b3a07b84bc2590efe095475619769f0753ca377f330b7ed8c43a6f8f81b1f1e8c38b42f86b309d76c31fc50af4921df43adbadb542b35a0afa0a4caf8198b377e430335441ce958b9265897b8cfb9e1977313c480563806172843f6ad88f778f457c12ccea447e12e2309cf1e5363ab93289d518a5ffdc501a323edbe086cc5467a3d36c40a5a18a2da992a1500b98f62becec044663ac01e263511d132b91f54739c667abe360bad5fd05859271f6105b4fb5e62bc34bc1d3721e144656d50dfa85944610e8f5db42ccc3b1d8ffc57d14d8a54106d1677a70e1f3b7595ede530ad66d1f399e411deafff2082352755e10398418ae0dfda8f5c644e9cd1ab5e146b4f6a7f4c7c13b0a9e24caa5513db025f583db8efd0d8e3a4159976d63a8c10dbc87609cd595f503932ead13b399131d9845e057f76b70dedf7cb2ad699a0e14829f3bc283c64030ef8335864d7f8131dabc1b248941dc8ef912a5b49c12e5be395bf98cb79439a9149270833046c293fe1237300f32f915c5186f5400be088e36709e6e5b30c2ee8e057f4bed4c38cd79c1f3b2ba264fea481d57b301833913b1dc954f33d1b177d7ad593efdc9134fd0267a23ffe01167e668955b46416ee90fda13e1668c9bdb8369a79e8381ad17da814064593ca2b6bd08b9fbcc270fe799dcec8bbc2b48669c5f31d7308f2aa58f23200a337d54546559144c26d19018dbfe692fc72bec000cc6a6e2c7c822ab71750319944457ab6f59970ea41017cb9f1849d5c815bc98df02a9493ccfd027ba3be22bf2a0dbaf5c360ca0deb41984333b7d5bc34eea7d3192416718cae31f0efa0661c27bf85a8dc6d39290cbd24c227b83d3408dd9747f297a7fe341bcab3c3ff9f44cccda6ba142e529e8481d3fbc9df52b83a4c81cd6c6962a05c4e54cfd5a94605806df99bc6cf149402e07f84f47f606203cdf7d3dc8797289ed7cf0a6ef36a9c05520c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="Article" scheme="http://shenguosai.github.io/categories/Article/"/>
    
    
    <category term="Privacy" scheme="http://shenguosai.github.io/tags/Privacy/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统搭建FTP服务器</title>
    <link href="http://shenguosai.github.io/2023/08/07/Ubuntu%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://shenguosai.github.io/2023/08/07/Ubuntu%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-08-07T14:32:50.000Z</published>
    <updated>2023-08-08T16:42:01.731Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ubuntu发行版本：20.04.6 LTS</code></p><h2 id="安装-vsftpd-软件包"><a href="#安装-vsftpd-软件包" class="headerlink" title="安装 vsftpd 软件包"></a>安装 <a href="https://so.csdn.net/so/search?q=vsftpd&spm=1001.2101.3001.7020">vsftpd</a> 软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230807224413.png" alt="20230807224413"><br>查看版本确认是否安装成功：<code>vsftpd -v</code><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230807224623.png" alt="20230807224623"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在终端打开vsftpd配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO             #禁止匿名用户</span><br><span class="line">local_enable=YES                #允许本地用户访问</span><br><span class="line">chroot_local_user=YES           #防止FTP用户访问其主目录之外的任何文件</span><br><span class="line">write_enable=YES                #上传与删除文件及文件夹权限</span><br><span class="line"></span><br><span class="line">allow_writeable_chroot=YES      #允许用户在FTP根目录下创建和修改文件夹及文件</span><br><span class="line">port_enable=YES                 #开启主动模式</span><br><span class="line">pasv_enable=YES                 #开启被动模式</span><br><span class="line">#设置FTP端口范围，以便在打开了防火墙的情况下开放对应端口</span><br><span class="line">pasv_min_port=39000</span><br><span class="line">pasv_max_port=40000</span><br></pre></td></tr></table></figure><p>保存文件，并重启vsftpd服务，使更改生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>如果是VPS要在网页控制面板中开启相应端口。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230808003301.png" alt="20230808003301"><br>防火墙打开FTP服务所需端口号。</p><h2 id="添加FTP用户"><a href="#添加FTP用户" class="headerlink" title="添加FTP用户"></a>添加FTP用户</h2><p>创建名为guest的用户并设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -d /home/ftp -s /bin/bash guest      <span class="comment">#新建ftp用户,-d:指定目录，-s：指定shell</span></span><br><span class="line">sudo passwd guest       <span class="comment">#新建ftp用户密码</span></span><br></pre></td></tr></table></figure><p>记得要将用户登录所在的文件夹的权限赋予ftp用户，否则无法进行上传和删除。</p><h2 id="附录1：主动模式与被动模式的区别"><a href="#附录1：主动模式与被动模式的区别" class="headerlink" title="附录1：主动模式与被动模式的区别"></a>附录1：主动模式与被动模式的区别</h2><h4 id="1-FTP有控制连接和数据连接"><a href="#1-FTP有控制连接和数据连接" class="headerlink" title="1.FTP有控制连接和数据连接"></a>1.FTP有控制连接和数据连接</h4><p>控制连接标准端口为21，用于发送FTP命令信息。<br>数据连接标准端口为20，用于上传、下载数据。<br>FTP协议与其它协议不同之处就在于客户端访问FTP服务器需要建立两个TCP连接，一个用来传输FTP命令，一个用来传输数据。</p><h4 id="2-PORT-主动-模式"><a href="#2-PORT-主动-模式" class="headerlink" title="2.PORT(主动)模式"></a>2.PORT(主动)模式</h4><p>所谓主动模式，是指FTP服务器主动去连接客户端的数据端口来传输数据。<br>第一步：客户端提交PORT命令访问服务端的21端口，并分配一个数据端口监听(1027端口)；<br>第二步：服务器返回确认；<br>第三步：FTP服务器向客户端发送TCP连接请求，目标端口为1027，源端口为20。建立起传输数据的连接。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/Port_Mode.jpg" alt="Port_Mode"></p><h4 id="3-PASV-被动-模式"><a href="#3-PASV-被动-模式" class="headerlink" title="3.PASV(被动)模式"></a>3.PASV(被动)模式</h4><p>所谓被动模式，是指FTP服务器“被动”等待客户端来连接自己的数据端口。<br>第一步：客户端的命令端口与服务器的命令端口建立连接，并发送命令“PAVS”；<br>第二步：服务器返回命令“PORT 2024”告诉客户端服务器用来监听数据连接的端口；<br>第三步：客户端初始化一个从自己的数据端口到服务器指定的数据端口的数据连接；<br>第四步：服务器给客户端的数据端口返回一个“ACK”响应。<br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/PASV_Mode.jpg" alt="PASV_Mode"></p><h2 id="附录2：vsftpd配置文件翻译"><a href="#附录2：vsftpd配置文件翻译" class="headerlink" title="附录2：vsftpd配置文件翻译"></a>附录2：vsftpd配置文件翻译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"># 示例配置文件，地址： /etc/vsftpd.conf</span><br><span class="line">#</span><br><span class="line"># vsftpd的默认编译设置比较谨慎，这个示例文件会放宽一些限制，使ftp服务更加易用。</span><br><span class="line"># 同时建议查看vsftpd.conf.5文件以了解所有编译默认值。</span><br><span class="line">#</span><br><span class="line"># 特别提醒：这个示例文件并不包含vsftpd选项的所有内容，建议阅读vsftpd.conf.5手册页以充分了解vsftpd的功能。</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># </span><br><span class="line"># 用来设置vsftpd是否以独立守护进程运行。</span><br><span class="line"># 如果设置为&quot;listen=YES&quot;，则表示vsftpd将作为独立守护进程运行；</span><br><span class="line"># 如果设置为&quot;listen=NO&quot;，则表示vsftpd将不会以独立守护进程运行，而是通过inetd或者initscript启动。</span><br><span class="line">listen=NO</span><br><span class="line">#</span><br><span class="line"># 设置vsftpd是否启用IPv6监听。</span><br><span class="line"># 如果设置为&quot;listen_ipv6=YES&quot;，则表示vsftpd将启用IPv6监听；</span><br><span class="line"># 如果设置为&quot;listen_ipv6=NO&quot;，则表示vsftpd将不会启用IPv6监听。</span><br><span class="line"># 默认情况下，IPv6监听地址为&quot;::&quot;，同时可以接受IPv6和IPv4客户端的连接。</span><br><span class="line"># 如果你只需要监听IPv4或IPv6地址，则不需要同时启用两种监听，如果你需要同时监听特定的IPv4和IPv6地址，则需要运行两个vsftpd实例，并使用两个不同的配置文件来进行配置。</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">#</span><br><span class="line"># 设置是否允许匿名FTP登录。</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">#</span><br><span class="line"># 设置是否允许本地用户登录FTP服务器。</span><br><span class="line">local_enable=YES</span><br><span class="line">#</span><br><span class="line"># 设置是否允许FTP用户执行写入操作。</span><br><span class="line"># write_enable=YES</span><br><span class="line">#</span><br><span class="line"># 设置本地用户的默认umask值。</span><br><span class="line"># umask是一个三位八进制数，用来控制新建文件或目录的访问权限。</span><br><span class="line"># 在FTP服务器中，local_umask选项用来设置本地用户上传文件或创建目录时的默认权限。</span><br><span class="line"># 默认情况下，local_umask的值为077，表示新建的文件或目录权限为只有所有者可读、可写、可执行，其他用户无权访问。</span><br><span class="line"># 如果你的用户希望默认权限为所有者可读、可写、可执行，其他用户可读、可执行，则可以将local_umask的值设置为022。</span><br><span class="line">local_umask=022</span><br><span class="line">#</span><br><span class="line"># 设置是否允许匿名FTP用户上传文件。</span><br><span class="line"># 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户上传文件。</span><br><span class="line"># 但是，这个选项只有在全局写入权限被激活时才会生效。此外，你还需要创建一个由FTP用户可写的目录，以便匿名FTP用户可以上传文件。</span><br><span class="line"># 需要注意的是，开启匿名FTP用户上传文件功能可能存在一定的安全风险，因此需要谨慎使用。</span><br><span class="line"># anon_upload_enable=YES</span><br><span class="line">#</span><br><span class="line"># 设置是否允许匿名FTP用户创建新目录。</span><br><span class="line"># 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户创建新目录。</span><br><span class="line"># 需要注意的是，开启匿名FTP用户创建新目录功能可能存在一定的安全风险，因此需要谨慎使用。</span><br><span class="line"># anon_mkdir_write_enable=YES</span><br><span class="line">#</span><br><span class="line"># 这段配置文件是用来设置是否启用目录消息功能。</span><br><span class="line"># 如果设置为YES，则表示启用目录消息功能。当远程用户进入某个目录时，会显示该目录的消息。</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">#</span><br><span class="line"># 设置是否启用本地时间功能。</span><br><span class="line"># 启用本地时间功能后，vsftpd将会在目录列表中显示本地时间而非GMT时间。</span><br><span class="line">use_localtime=YES</span><br><span class="line">#</span><br><span class="line"># 启用上传和下载日志记录功能。</span><br><span class="line"># 启用该功能后，vsftpd会记录每个用户的上传和下载操作，并将其记录到指定的日志文件中。</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">#</span><br><span class="line"># 设置数据传输的端口号。</span><br><span class="line"># 将其值设置为YES，则表示数据传输使用的端口号为20。</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">#</span><br><span class="line"># 设置匿名用户上传的文件的所有者。</span><br><span class="line"># 设置为YES，则表示上传的文件将会被转换为指定用户的所有权。</span><br><span class="line"># chown_uploads=YES</span><br><span class="line"># 设置为指定的用户名。</span><br><span class="line"># chown_username=whoever</span><br><span class="line">#</span><br><span class="line"># 设置vsftpd日志文件的路径。该路径必须具有可写权限，并且对于vsftpd进程来说，必须具有可访问权限。</span><br><span class="line"># xferlog_file=/var/log/vsftpd.log</span><br><span class="line">#</span><br><span class="line"># 设置vsftpd日志文件的格式。设备为YES则存储为标准ftpd xferlog格式。</span><br><span class="line"># xferlog_std_format=YES</span><br><span class="line">#</span><br><span class="line"># 设置vsftpd空闲会话超时的时间（以秒为单位）。</span><br><span class="line"># idle_session_timeout=600</span><br><span class="line">#</span><br><span class="line"># 设置vsftpd数据连接超时的时间（以秒为单位）。</span><br><span class="line"># data_connection_timeout=120</span><br><span class="line">#</span><br><span class="line"># vsftpd建议在系统中定义一个唯一的用户，供FTP服务器使用，作为完全隔离和无特权的用户。</span><br><span class="line"># nopriv_user选项可以用来指定该用户的用户名。</span><br><span class="line"># nopriv_user=ftpsecure</span><br><span class="line">#</span><br><span class="line"># 用于启用异步ABOR请求的识别。</span><br><span class="line"># 异步ABOR请求是一种FTP客户端请求，用于取消当前正在进行的数据传输操作。</span><br><span class="line"># 启用该选项可以提高FTP服务器的性能，但也会增加安全风险。因为异步ABOR请求的代码比较复杂，可能会被黑客利用进行恶意攻击。</span><br><span class="line"># 所以，如果安全性是首要考虑因素，则不建议启用该选项。</span><br><span class="line"># async_abor_enable=YES</span><br><span class="line">#</span><br><span class="line"># 用于控制FTP服务器是否启用ASCII模式下的文件转换功能。</span><br><span class="line"># 默认情况下，FTP服务器会假装允许ASCII模式，但实际上会忽略该请求。</span><br><span class="line"># 如果需要启用ASCII模式下的文件转换功能，则可以将ascii_upload_enable和ascii_download_enable选项的注释去掉，并将它们的值设置为YES。</span><br><span class="line"># 在ASCII模式下，FTP服务器会将文本文件中的换行符和回车符进行转换，以便在不同操作系统之间进行传输。</span><br><span class="line"># 但是，需要注意的是，ASCII模式下可能存在一些安全风险。例如，攻击者可以利用SIZE命令在ASCII模式下发送一个超大文件名，导致FTP服务器崩溃。</span><br><span class="line"># 因此，建议谨慎使用ASCII模式，并确保FTP服务器已经做好了相应的安全措施。</span><br><span class="line"># ascii_upload_enable=YES</span><br><span class="line"># ascii_download_enable=YES</span><br><span class="line">#</span><br><span class="line"># vsftpd的登录横幅的设置，你可以理解为登录成功后的欢迎词。</span><br><span class="line"># ftpd_banner=Welcome to blah FTP service.</span><br><span class="line">#</span><br><span class="line"># 设备是否拒绝匿名电子邮件地址</span><br><span class="line"># 有助于减轻利用匿名访问FTP服务器进行的拒绝服务（DoS）攻击。如果检测到被禁止的电子邮件地址，服务器将拒绝该用户的访问。</span><br><span class="line"># deny_email_enable=YES</span><br><span class="line"># 如果启用了拒绝匿名电子邮件地址的选项，则通过从指定的文件“/etc/vsftpd.banned_emails”读取被禁止的电子邮件地址列表。</span><br><span class="line"># banned_email_file=/etc/vsftpd.banned_emails</span><br><span class="line">#</span><br><span class="line"># 设备限制本地用户仅访问其home目录。</span><br><span class="line"># 如果启用，则本地用户将仅访问其home目录和其子目录，无法访问其他目录。</span><br><span class="line"># chroot_local_user=YES</span><br><span class="line">#</span><br><span class="line"># 是否允许本地用户，是否将本地用户限制在其主目录中，如果设置为YES，则不会将列在chroot_list_file中的用户限制在其主目录中。</span><br><span class="line"># chroot_local_user=YES</span><br><span class="line"># 是否启用chroot_list_file列表，用于指定哪些用户不应该被限制在主目录中。</span><br><span class="line"># chroot_list_enable=YES</span><br><span class="line"># 指定了chroot_list_file列表的路径和名称。一行一个用户名。</span><br><span class="line"># chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line">#</span><br><span class="line"># 否启用ls命令的递归选项“-R”，该选项可以在列出目录内容时递归地列出子目录。</span><br><span class="line"># 默认情况下，该选项被禁用以避免远程用户在大型站点上引起过多的I/O。</span><br><span class="line"># ls_recurse_enable=YES</span><br><span class="line">#</span><br><span class="line"># 自定义配置：</span><br><span class="line">#</span><br><span class="line"># 指定了一个空目录作为安全chroot() jail。</span><br><span class="line"># 在某些情况下，vsftpd不需要访问文件系统，因此可以将FTP用户限制在这个空目录中，以增强安全性。该目录应该为空，并且不应该被FTP用户写入。</span><br><span class="line">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line">#</span><br><span class="line"># 指定vsftpd将使用的PAM服务的名称。</span><br><span class="line"># 默认情况下，pam_service_name的值为“vsftpd”，这意味着vsftpd将使用名为“vsftpd”的PAM服务来进行认证。</span><br><span class="line"># 如果需要使用其他的PAM服务，可以修改该选项的值。</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">#</span><br><span class="line"># 用于指定在SSL加密连接中使用的RSA证书的位置。</span><br><span class="line"># 通过设置rsa_cert_file和rsa_private_key_file选项来指定RSA证书和私钥的位置。</span><br><span class="line"># 其中，rsa_cert_file选项用于指定证书文件的位置，而rsa_private_key_file选项用于指定私钥文件的位置。</span><br><span class="line">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line"># 是否启用SSL加密连接。</span><br><span class="line">ssl_enable=NO</span><br><span class="line">#</span><br><span class="line"># 指定是否在vsftpd中使用UTF-8编码的文件系统。</span><br><span class="line"># utf8_filesystem=YES</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Ubuntu发行版本：20.04.6 LTS&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-vsftpd-软件包&quot;&gt;&lt;a href=&quot;#安装-vsftpd-软件包&quot; class=&quot;headerlink&quot; title=&quot;安装 vsftpd 软件包&quot;&gt;&lt;/a&gt;安装 &lt;</summary>
      
    
    
    
    <category term="Tutorial" scheme="http://shenguosai.github.io/categories/Tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>在自己搭建的hexo博客上发布文章</title>
    <link href="http://shenguosai.github.io/2023/08/03/Hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://shenguosai.github.io/2023/08/03/Hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</id>
    <published>2023-08-02T16:19:02.735Z</published>
    <updated>2023-08-08T16:57:41.217Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在<code>/source/_posts</code>目录下建立<code>.md</code>文件并撰写内容；<br>编辑文章时要在第一行中加上<code>title</code>，如果不按此格式来写的话在<code>hexo</code>博客中就会显示这篇文章没有名字。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章题目</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>命名完成后，将终端当前目录更改为<code>/source/_posts</code><br>输入<code>hexo g</code>(完整命令为<code>hexo generate</code>)，生成静态文件；<br>输入<code>hexo s</code>(完整命令为<code>hexo server</code>)，启动local服务器，主要用于本地预览。完成后打开浏览器输入<a href="">http://localhost:4000</a>，就会发现多了刚才写的那篇博客。<br>输入<code>hexo d</code>(完整命令为<code>hexo deploy</code>)，将本地文件发布到github仓库上。</li><li>每次对hexo博客上的<code>.md</code>文件进行更改后都要重复步骤2，这样更改的内容才能在hexo博客上显示。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;/source/_posts&lt;/code&gt;目录下建立&lt;code&gt;.md&lt;/code&gt;文件并撰写内容；&lt;br&gt;编辑文章时要在第一行中加上&lt;code&gt;title&lt;/code&gt;，如果不按此格式来写的话在&lt;code&gt;hexo&lt;/code&gt;博客中就会显示这篇</summary>
      
    
    
    
    <category term="Tutorial" scheme="http://shenguosai.github.io/categories/Tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客挂载Github(未完)</title>
    <link href="http://shenguosai.github.io/2023/08/03/Hexo%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BDgithub/"/>
    <id>http://shenguosai.github.io/2023/08/03/Hexo%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BDgithub/</id>
    <published>2023-08-02T16:03:40.079Z</published>
    <updated>2023-08-08T16:41:00.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h2><p><a href="https://git-scm.com/downloads">Git官网下载</a><br>下载完成后，双击安装包，选项全部默认，一路Next安装完成。<br>测试安装成功，输入<code>git --version</code>显示版本信息即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shenguosai@LAPTOP-FBGFH99L ~$ git --version</span><br><span class="line">git version 2.37.1</span><br></pre></td></tr></table></figure><h2 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h2><p><a href="https://nodejs.org/zh-cn/">Node官网下载</a><br>下载完成后，双击安装包，选项全部默认，一路Next安装完成。<br>测试安装成功，输入<code>node -v</code>显示版本信息即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shenguosai@LAPTOP-FBGFH99L ~$ node -v</span><br><span class="line">v18.15.0</span><br></pre></td></tr></table></figure><h2 id="3-Gitee或GitHub-目前只成功挂载GitHub-2023-8-3"><a href="#3-Gitee或GitHub-目前只成功挂载GitHub-2023-8-3" class="headerlink" title="3.Gitee或GitHub(目前只成功挂载GitHub@2023&#x2F;8&#x2F;3)"></a>3.Gitee或GitHub(目前只成功挂载GitHub@2023&#x2F;8&#x2F;3)</h2><p>准备Gitee或GitHub账号，这个是用来托管的，可以不需要自己的服务器和域名就可以拥有自己的博客。<br><a href="https://gitee.com/">Gitee官网</a><br><a href="https://github.com/">GitHub官网</a><br>注册完成后，创建一个仓库，然后就可以将hexo挂载到这个仓库中了。<br>创建仓库的时候用 <em>YourName.github.io</em> 或 <em>YourNama.gitee.io</em> ，这样后面托管的域名比较好记。</p><h1 id="二、博客搭建"><a href="#二、博客搭建" class="headerlink" title="二、博客搭建"></a>二、博客搭建</h1><h2 id="1-Hexo下载"><a href="#1-Hexo下载" class="headerlink" title="1.Hexo下载"></a>1.Hexo下载</h2><p>新建一个文件夹作为博客的顶级目录。<br>打开cmd，进入到新建的文件夹目录，输入<code>npm install hexo-cli -g</code>以安装hexo。</p><h2 id="2-Hexo初始化"><a href="#2-Hexo初始化" class="headerlink" title="2.Hexo初始化"></a>2.Hexo初始化</h2><p>安装完成后，输入<code>hexo init blog</code>进行初始化。<br>注：blog就是<b><font color="red">步骤1</font></b>中新建的目录。<br>初始化后，文件夹下就会有下方形式的目录结构。<br><em><font color="grey" size=1 >设置好图床后添加</font></em><br><img src="https://raw.githubusercontent.com/shenguosai/MyPic/img/img/image-20230807153014796.png" alt="image-20230807153014796"></p><h2 id="3-启动博客"><a href="#3-启动博客" class="headerlink" title="3.启动博客"></a>3.启动博客</h2><p>使用终端将目录进入到blog下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ la</span><br><span class="line">total 245</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 18:38 .</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 15:13 ..</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  3 00:39 .deploy_git</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 15:14 .github</span><br><span class="line">-rw-rw-r--    1 shenguos 197121          82 Aug  2 15:14 .gitignore</span><br><span class="line">-rw-rw-r--    1 shenguos 197121           0 Aug  2 15:14 _config.landscape.yml</span><br><span class="line">-rw-rw-r--    1 shenguos 197121        2582 Aug  3 00:01 _config.yml</span><br><span class="line">-rwxrwxr-x    1 shenguos 197121      352551 Aug  3 00:38 db.json</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 15:34 node_modules</span><br><span class="line">-rwxrwxr-x    1 shenguos 197121       92731 Aug  2 15:34 package-lock.json</span><br><span class="line">-rw-rw-r--    1 shenguos 197121         655 Aug  2 15:34 package.json</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  3 00:08 public</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 15:14 scaffolds</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 15:14 source</span><br><span class="line">drwxrwxr-x    1 shenguos 197121           0 Aug  2 23:53 themes</span><br><span class="line">shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地静态网页就启动了，在浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a>就能看到如下网页。<br><em><font color="grey" size=1 >设置好图床后添加</font></em></p><h1 id="三、挂载到GitHub上"><a href="#三、挂载到GitHub上" class="headerlink" title="三、挂载到GitHub上"></a>三、挂载到GitHub上</h1><h2 id="1-挂载须知"><a href="#1-挂载须知" class="headerlink" title="1.挂载须知"></a>1.挂载须知</h2><h3 id="a-git配置"><a href="#a-git配置" class="headerlink" title="a) git配置"></a>a) git配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;shenguosai&quot;</span>  //用户名</span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xx.com&quot;</span>  //邮箱</span><br></pre></td></tr></table></figure><p>用户名和邮箱根据注册github的信息自行修改。</p><h3 id="b-SSH密钥"><a href="#b-SSH密钥" class="headerlink" title="b) SSH密钥"></a>b) SSH密钥</h3><p>挂载到GitHub上时，为了方便，我们要创建<code>ssh</code>密钥，使用ssh连接更为方便的推送。<br>方法：<code>ssh-keygen -C &quot;xxxx@xxx.com&quot;</code>就会生成密钥，Linux用户在<code>~/.ssh/</code>中，Windows用户在<code>C:/Users/xxx/.ssh/</code>中。<br>在github上绑定公钥:<code>Settings-&gt;SSH and GPG keys-&gt;SSH keys-&gt;New SSH key</code><br>将生成的<code>id_rsa.pub</code>中的文本内容复制到<code>Key</code>框中，点击<code>Add SSH key</code>。<br><em><font color="grey" size=1 >此处说明需要添加图片，设置好图床后添加。</font></em><br>输入<code>ssh -T git@github.com</code>，如果如下所示，出现你的用户名即配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ ssh -T git@github.com</span><br><span class="line">X11 forwarding request failed on channel 0</span><br><span class="line">Hi shenguosai! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h3 id="c-Token"><a href="#c-Token" class="headerlink" title="c) Token"></a>c) Token</h3><h2 id="2-开始挂载"><a href="#2-开始挂载" class="headerlink" title="2.开始挂载"></a>2.开始挂载</h2><p>打开博客目录下的<code>.config.yml</code>(hexo的配置文件)，下拉到最下方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://ghp_xxxxxx@github.com/shenguosai/shenguosai.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><code>ghp_xxxxxx</code>即使上面申请的token。<br>然后输入<code>hexo cl</code>清除缓存，完成代码为<code>hexo clean</code>。<br>清除缓存后输入<code>hexo g</code>生成静态网页，然后输入<code>hexo d</code>推送到<strong>GitHub</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h1&gt;&lt;h2 id=&quot;1-Git&quot;&gt;&lt;a href=&quot;#1-Git&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Tutorial" scheme="http://shenguosai.github.io/categories/Tutorial/"/>
    
    
  </entry>
  
</feed>
