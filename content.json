{"meta":{"title":"乙未丁酉","subtitle":"模拟工程师","description":"","author":"sgs","url":"http://shenguosai.github.io","root":"/"},"pages":[{"title":"关于","date":"2023-08-08T17:07:20.711Z","updated":"2023-08-02T15:39:31.463Z","comments":false,"path":"about/index.html","permalink":"http://shenguosai.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"categories","date":"2024-01-05T01:16:13.000Z","updated":"2024-01-05T01:16:58.898Z","comments":true,"path":"categories/index.html","permalink":"http://shenguosai.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-08-02T15:39:31.465Z","updated":"2023-08-02T15:39:31.465Z","comments":true,"path":"links/index.html","permalink":"http://shenguosai.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-01-05T01:18:11.000Z","updated":"2024-01-05T01:18:30.706Z","comments":true,"path":"tags/index.html","permalink":"http://shenguosai.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"小米Note刷机过程记录","slug":"小米Note刷机过程记录","date":"2024-03-04T03:10:07.000Z","updated":"2024-03-04T03:28:47.028Z","comments":true,"path":"2024/03/04/小米Note刷机过程记录/","link":"","permalink":"http://shenguosai.github.io/2024/03/04/%E5%B0%8F%E7%B1%B3Note%E5%88%B7%E6%9C%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/","excerpt":"","text":"背景查了一下订单，2015年5月回国的时候给爸爸和我买了两台小米Note，应该用了没有多久就出问题了一直闲置在家。上网查了一下回收价只有2元，所以就像改造一下看能不能当个简单的服务器来使用。 准备小米手机助手近些年一直都没有关注小米，上网一查发现小米官网已经不开放手机助手的下载了，在网上找到这么一个网页:MiPhoneAssistant 小米手机助手下载合集。留个底:由于小米助手官方已经很久没更新了，最近一次更新是 2021-10-28，所以强烈不建议在这之后发布的手机和 MIUI 版本上使用，大概率会有适配兼容问题，备份恢复功能很可能不能按预期工作，它只适合在老机型和 MIUI 老版本上使用！ 下面是小米助手官方下载地址，版本由新到旧排列，可按个人喜好或需要选择。 12345678910111213https://miuirom.xiaomi.com/rom/u1106245679/4.2.1028.10/MiAssistant-4.2.1028.10.ziphttps://miuirom.xiaomi.com/rom/u1106245679/3.2.522.32/MiAssistant-3.2.522.32.ziphttps://miuirom.xiaomi.com/rom/u491047765/2.3.0.4071/mipctoolexe-2.3.0.4071.exehttps://miuirom.xiaomi.com/rom/u491047765/2.3.0.3101/mipctoolexe-2.3.0.3101.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.3.0.1031_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.7241_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.6261_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.4091_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.3171_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.2131_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.2.0.1301_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.1.0.12251_2717.exehttps://bigota.d.miui.com/MiFlash/MiSetup2.1.0.11211_2717.exe 文件 MD5 校验值如下。 12345678910111213b9aaa49dd92a828179b4994b1eb82136 MiAssistant-3.2.522.32.zip7bc76814006a340667dbe72669c66e1f MiAssistant-4.2.1028.10.zipb4ebf49b441a3f4997fc1ac4a82486a5 mipctoolexe-2.3.0.3101.exed274427550884f389c7e417a13bfd3c1 mipctoolexe-2.3.0.4071.exed4580a3adff0db692f7a0420b568499f MiSetup2.1.0.11211_2717.exe936fc4c41e247baf21528e13e26e577e MiSetup2.1.0.12251_2717.exe8251f9670237d91f22cc70fa8f910086 MiSetup2.2.0.1301_2717.exe80a68985a0d063d32d7884d008a0a71e MiSetup2.2.0.2131_2717.exe98c7c5185ee0cd2f1940fcc8a0f95f99 MiSetup2.2.0.3171_2717.exee1073d32737075b51709c9a2b1c0cc99 MiSetup2.2.0.4091_2717.exeaea5d32a8c4839fc35a2ed4fbb53e70f MiSetup2.2.0.6261_2717.exe62d3bd3427038a67ea8772972da1f82f MiSetup2.2.0.7241_2717.exe539cd92545f27978e2fe29aae527d4b2 MiSetup2.3.0.1031_2717.exe 尝试了一下上面下载地址的前4个还可以下载，但是后面的已经无法打开了，会提示403 Forbidden。","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Phone","slug":"Note/Phone","permalink":"http://shenguosai.github.io/categories/Note/Phone/"}],"tags":[{"name":"折腾","slug":"折腾","permalink":"http://shenguosai.github.io/tags/%E6%8A%98%E8%85%BE/"}]},{"title":"部署 Windows RDS 远程桌面服务器(一)","slug":"部署-Windows-RDS-远程桌面服务-一","date":"2024-03-02T13:22:01.000Z","updated":"2024-03-02T14:52:26.518Z","comments":true,"path":"2024/03/02/部署-Windows-RDS-远程桌面服务-一/","link":"","permalink":"http://shenguosai.github.io/2024/03/02/%E9%83%A8%E7%BD%B2-Windows-RDS-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1-%E4%B8%80/","excerpt":"转自RD网关部署说明，留待以后部署自己的远程桌面网关。 —–开始正文—–","text":"转自RD网关部署说明，留待以后部署自己的远程桌面网关。 —–开始正文—– 1. 背景实现通过RD网关服务器实现外网访问内网的远程桌面。 1.1 远程桌面网关远程桌面网关（RD 网关）是一项角色服务，使授权远程用户可以从任何连接到 Internet 并且可以运行远程桌面连接 (RDC) 客户端的设备连接到内部企业网络或专用网络上的资源。网络资源可以是远程桌面会话主机（RD 会话主机）服务器、运行 RemoteApp 程序的RD 会话主机服务器或启用了远程桌面的计算机。RD 网关使用 HTTPS 上的远程桌面协议 (RDP) 在 Internet 上的远程用户与运行其生产力应用程序的内部网络资源之间建立安全的加密连接。 1.2 为什么使用远程桌面网关？RD 网关有很多优点，其中包括:通过 RD 网关，远程用户可以使用加密连接，通过 Internet 连接到内部网络资源，而不必配置虚拟专用网络 (VPN) 连接。RD 网关提供全面的安全配置模型，使您可以控制对特定内部网络资源的访问。RD 网关提供点对点的 RDP 连接，而不是允许远程用户访问所有内部网络资源。通过 RD 网关，大多数远程用户可以连接到在专用网络中的防火墙后面或跨网络地址转换程序 (NAT) 托管的内部网络资源。在此方案中，通过 RD 网关，不必对 RD 网关服务器或客户端执行其他配置。在此版本的 Windows Server 之前，采用安全措施来阻止远程用户跨防火墙和 NAT 连接到内部网络资源。这是由于出于网络安全考虑，通常阻止端口 3389（用于 RDP 连接的端口）。RD 网关使用 HTTP 安全套接字层&#x2F;传输层安全 (SSL&#x2F;TLS) 隧道将 RDP 通信传输到端口 443。由于大多数公司打开端口 443 来支持 Internet 连接，所以，RD 网关利用此网络设计提供跨多个防火墙的远程访问连接。通过远程桌面网关管理器可以配置授权策略，以定义远程用户要连接到内部网络资源必须满足的条件。例如，可以指定：可以连接到内部网络资源的用户（即，可以连接的用户组）。用户可以连接到的网络资源（计算机组）。客户端计算机是否必须是 Active Directory 安全组的成员。是否允许设备的重定向。客户端需要使用智能卡身份验证还是密码身份验证，还是可以使用任一方法。可以将 RD 网关服务器和远程桌面服务客户端配置为使用网络访问保护 (NAP) 来进一步增强安全性。NAP 是 Windows Server® 2008 R2、Windows Server® 2008、Windows® 7、Windows Vista® 和 Windows(R) XP Service Pack 3 中包含的运行状况策略创建、强制和补救技术。通过 NAP，系统管理员可以强制运行状况要求，可以包括软件要求、安全更新要求、所需的计算机配置以及其他设置。 note备注如果 RD 网关强制 NAP，则运行 Windows Server 2008 R2 或 Windows Server 2008 的计算机不能作为 NAP 客户端使用。如果 RD 网关强制 NAP，则仅运行 Windows 7、Windows Vista 或 Windows XP SP3 的计算机可以作为 NAP 客户端使用。有关如何将 RD 网关配置为使用 NAP 对连接到 RD 网关服务器的远程桌面服务客户端强制运行状况策略的信息，请参阅 Windows Server 2008 R2 技术中心上的”远程桌面服务”页。 http://go.microsoft.com/fwlink/?linkid=140433（可能为英文网页）。可以将 RD 网关服务器与 Microsoft Internet Security and Acceleration (ISA) 服务器一起使用来提高安全性。在此方案中，可以在专用网络中（而不是在外围网络中）托管 RD 网关服务器，且可以在外围网络中托管 ISA 服务器。远程桌面服务客户端与 ISA 服务器之间的安全套接字层 (SSL) 连接可以在连接到 Internet 的 ISA 服务器上终止。有关如何将 ISA 服务器配置为 RD 网关服务器方案的 SSL 终结设备的信息，请参阅 Windows Server 2008 R2 技术中心上的”远程桌面服务”页。 http://go.microsoft.com/fwlink/?linkid=140433（可能为英文网页）。远程桌面网关管理器提供的工具帮助您监视 RD 网关服务器状态和事件。通过使用远程桌面网关管理器，可以指定为了进行审核要监视的事件（例如尝试连接到 RD 网关服务器不成功）。 1.3 配置远程桌面网关此清单列出了要成功地为 RD 网关核心方案配置 RD 网关需要完成的任务。通过此方案，可以配置 RD 网关服务器，使远程用户可以通过 RD 网关服务器，从 Internet 访问内部公司网络资源或专用网络资源。在此方案中，内部网络资源可以是远程桌面会话主机（RD 会话主机）服务器、运行 RemoteApp 程序的RD 会话主机服务器或启用了远程桌面的计算机。 配置步骤 ……………………………… 安装远程桌面网关角色服务。 获取 RD 网关服务器的证书。 创建远程桌面连接授权策略(RD CAP)。 创建远程桌面资源授权策略(RD RAP)。 配置 RD 网关的远程桌面服务客户端。 有关 RD 网关的详细信息，请参见 Windows Server 2008 R2 TechCenter 上的远程桌面服务页。 http://go.microsoft.com/fwlink/?LinkId=140433。 1.4 安装远程桌面网关的先决条件若要正常使用 RD 网关，必须满足下列先决条件：必须拥有安装了 Windows Server 2008 R2 的服务器。在您要配置的 RD 网关服务器上具有本地”管理员”组成员身份（或同等身份），是完成此过程的最低要求。 查看有关使用适当帐户和组成员关系的详细信息，请访问本地默认组和域默认组。 http://go.microsoft.com/fwlink/?LinkId=83477（可能为英文链接）。必须为 RD 网关服务器获取安全套接字层 (SSL) 证书（如果还没有该证书）。默认情况下，在 RD 网关 服务器上，Internet 信息服务 (IIS) 服务使用传输层安全 (TLS) 1.0 对通过 Internet 在客户端与 RD 网关服务器之间进行的通信加密。若要正常使用 TLS，必须在 RD 网关服务器上安装 SSL 证书。note备注如果可以使用其他方法获取符合 RD 网关的要求的外部信任证书，则不需要在组织中部署证书颁发机构 (CA) 基础结构。如果您的公司没有独立 CA 或企业 CA，并且您没有受信任公用 CA 颁发的兼容证书，则可以为 RD 网关服务器创建并导入自签名证书，以便进行技术评估和测试。有关详细信息，请参阅为远程桌面网关服务器创建自签名证书。有关 RD 网关 的证书要求以及如何获取并安装证书的信息，请参阅获取远程桌面网关服务器的证书。如果配置的 RD 网关授权策略要求客户端计算机上的用户是 Active Directory 安全组的成员，才能连接到 RD 网关服务器，则 RD 网关服务器必须也是 Active Directory 域的成员。角色、角色服务和功能的依存关系若要正常使用 RD 网关，要求安装并运行多个角色服务和功能。使用服务器管理器安装 RD 网关角色服务时，将自动安装并启动下列附加的角色、角色服务和功能（如果尚未安装）：HTTP 代理上的远程过程调用 (RPC)Web 服务器 (IIS) [Internet 信息服务]若要正常使用 HTTP 代理上的 RPC 功能，必须安装并运行 IIS。网络策略和访问服务还可以将 RD 网关配置为使用另一台运行网络策略服务器 (NPS) 服务的服务器上存储的远程桌面连接授权策略 (RD CAP)。这样，您将使用运行 NPS 的服务器（以前称为远程身份验证拨入用户服务 (RADIUS) 服务器）来集中存储、管理和验证RD CAP。如果已为远程访问方案（例如 VPN 和拨号网络）部署了运行 NPS 的服务器，则对 RD 网关方案同样使用这个现有的运行 NPS 的服务器，可以增强您的部署。 2. 实验环境2.1 实验环境 服务器名称 系统 功能 备注 AD192.168.10.1 Windows Server 2012 AD域服务，AD证书服务 VMHost上虚机 RD192.168.10.1410.0.1.1 Windows Server 2012 RD网关服务器 VMHost上虚机 RD01192.168.0.1510.0.1.3 Windows Server 2012 RD网关服务器 VMHost上虚机 Win-TTLSA6FVTKG192.168.10.22 Windows 7 32 sp1 远程桌面 VMHost上虚机 Win-J3SKRGLCDLT10.0.1.2 Windows 7 32 sp1 客户端 VMHost3上虚机 2.2 拓扑图 3. 实验步骤3.1 AD 证书服务安装与配置3.1.1 添加 ADCS 角色和功能 3.1.2 ADCS 配置此处要选【企业 CA】 3.1.3 创建针对计算机的证书模板在 AD 中，创建证书模板。【服务器管理器】-【工具】-【证书颁发机构】。右键【证书模板】-【新建】-【要颁发的证书模板】。 (1) 右击【证书模板】-【管理】- 右击【计算机】-【复制模板】，在【常规】tab 定义模板名称，在【使用者名称】选择【在请求中提供】，点击【应用】-【确定】 (2) 右键【证书模板】-【新建】-【要颁发的证书模板】，选择模板名称为步骤 (1) 中创建的模板，点击确定。 3.2 安装远程桌面网关服务 3.3 配置远程桌面网关服务器以下所有配置均在 RD 网关服务器上进行。 3.3.1 证书在【控制台】完成申请证书的相关操作。证书已由前面的ADCS证书服务配置完成。申请完证书后。首先，要对RD网关服务器进行导入证书。其次，要把证书保存到本地硬盘，再拷贝到客户端进行安装，可进行静默安装。 3.3.1.1 申请证书【开始】-【运行】 mmc【文件】-【添加&#x2F;删除管理单元】，选择【证书】，点击【添加】。右键【个人】-【证书】-【所有任务】-【申请新证书】点击下一步选择新创建的模板下的【注册此证书需要详细信息。单击这里以配置设置】，弹出如下窗口在类型处选择【公用名】，在值处填写路由器的外网地址，点击【添加】按钮，点击【应用】-【确定】证书申请完成。 3.3.1.2 导出证书将导出的证书拷贝到客户端进行安装。 3.3.1.3 导入证书【开始】-【运行】输入【tsgateway.msc】调用 RD 网关管理器。 3.3.2 策略3.3.2.1 创建策略 3.4 客户端配置3.4.1 导入证书从 RD 网关上拷贝导出的证书文件到客户端，双击进行安装。 3.4.2 Host 文件修改 3.4.3 mstsc 设置 3.5 测试远程桌面登录3.6 RD 网关服务器场4. 参考资料http://wangchunhai.blog.51cto.com/225186/1139388 证书服务安装http://lixun.blog.51cto.com/4198640/942447 证书http://technet.microsoft.com/zh-cn/library/cc725949(v=ws.10).aspx http://technet.microsoft.com/zh-cn/library/cc725706(v=ws.10).aspx 配置远程桌面网关服务器http://technet.microsoft.com/zh-cn/library/cc754191(v=ws.10).aspx TMG发布远程桌面网关服务器http://hi.baidu.com/comet82/item/e62dc17664760f480c0a0701 安装ADCShttp://yuelei.blog.51cto.com/202879/309092/ 配置CA证书http://235898457.blog.51cto.com/512763/307612 RD网关负载均衡http://blog.sina.com.cn/s/blog_643754960101b79n.html","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://shenguosai.github.io/tags/Windows/"}]},{"title":"部署 Windows RDS 远程桌面服务(二)","slug":"部署-Windows-RDS-远程桌面服务-二","date":"2024-03-02T12:35:58.000Z","updated":"2024-03-02T14:52:37.505Z","comments":true,"path":"2024/03/02/部署-Windows-RDS-远程桌面服务-二/","link":"","permalink":"http://shenguosai.github.io/2024/03/02/%E9%83%A8%E7%BD%B2-Windows-RDS-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1-%E4%BA%8C/","excerpt":"转自超详细的 部署Windows RDS 远程桌面服务来啦！！！确定不来看一下嘛~，留待以后部署自己的远程桌面网关。 —–开始正文—–","text":"转自超详细的 部署Windows RDS 远程桌面服务来啦！！！确定不来看一下嘛~，留待以后部署自己的远程桌面网关。 —–开始正文—– 用 Windows Server 2016 操作系统来完成 RDS 的部署，包括添加远程桌面服务角色，创建会话集合，发布 Remote App 程序，以及测试访问 Remote App 程序。首先准备两台部署好域环境的虚拟机: Windows Server 2016 和 Windows 7 添加远程桌面服务角色打开 Windows Server 2016: (1) 点进服务器管理器，点击“添加角色和功能” (2) 在安装类型选择“远程桌面服务安装” (3) 在“选择部署类型”窗口中选择“标准部署”按键，后“下一步” (4) 在“选择部署方案”窗口中，选择“基于会话的桌面部署”按键，后“下一步” (5) 系统会自动安装和配置必需的角色服务，直接“下一步” (6) 依次指定下面三个服务所在的服务器，在“指定 RD 连接代理服务器”窗口中，将服务器池中的当前服务器添加到右侧窗格中，后“下一步” (7) 选择服务器池中的当前的服务器后，双击添加到右侧窗格中，后“下一步” (8) 选择服务器池中的当前的服务器后，双击添加到右侧窗格中，后“下一步” (9) 选择“需要时自动启动目标服务器”后，单击“部署”按键 (10) 安装过程中系统自动重启，重新后会自动完成剩下的安装任务 登录自己的域账号 创建会话集合(1) 打开“服务器管理器”窗口，在左侧窗格单击刚安装好的“远程桌面服务”，在中间窗格选择“概述”选项，在右侧窗格单击“创建会话合集” ![20240302205757](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302205757.png) (2) 在“开始之前”窗口中，直接“下一步” (3) 自己取一个便于识别的名称后，单击“下一步” ![20240302205902](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302205902.png) (4) 将服务器池中的目标服务双击添加至右侧窗格中后，单击“下一步” ![20240302205959](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302205959.png) (5) 此页面可以点击“添加”按键可以添加需要授权的用户组，我们此处直接“下一步” ![20240302210101](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210101.png) (6) 在“指定用户配置文件磁盘”窗口中，输入用户配置文件所在的位置后，单击“下一步” ![20240302210201](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210201.png) (7) 确认信息无误后，单击“创建” ![20240302210228](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210228.png) (8) 创建成功后单击“关闭”按键 ![20240302210300](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210300.png) 发布 Remote App 程序(1) 打开“服务器管理器”窗口，单击左侧窗格“远程桌面服务”，在中间窗格单击刚创建的集合名称，单击“发布 Remote App 程序” ![20240302210553](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210553.png) (2) 选择要发布集合的应用程序，咱选择发布自带的“画图” ![20240302210640](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210640.png) (3) 确认要发布的 Remote App 程序列表是否正确，正确就单击“发布”按键 ![20240302210731](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210731.png) (4) 发布“画图”完成 ![20240302210802](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210802.png) AD 服务端新建用户(1) 打开“AD 用户和计算机”窗口 ![20240302210852](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210852.png) (2) 设置用户登录名称 ![20240302210913](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210913.png) (3) 设置用户登录密码 ![20240302210937](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20240302210937.png) 访问 Remote App 程序(测试)进入 Windows 7 (客户端): (1) 在 Web 浏览器地址栏输入 URL: “http://FQDN/rdweb”，在打开的页面中单击“继续浏览此网站” (2) 输入”服务端域名\\刚刚新建的用户的名字”，和登录密码后，点击“登录” 登录成功后出现“画图”程序图表即代表发布成功 (3) 单击程序图标，在浏览器底部弹出的对话框单击“打开”按键 (4) 点击“连接” (5) 输入账号和登录密码 以上便是所有内容，欢迎大家前来借鉴！","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://shenguosai.github.io/tags/Windows/"}]},{"title":"使用PS在5寸相纸上排版1寸证件照","slug":"使用PS在5寸相纸上排版1寸证件照","date":"2024-02-28T12:31:05.000Z","updated":"2024-02-28T12:31:05.715Z","comments":true,"path":"2024/02/28/使用PS在5寸相纸上排版1寸证件照/","link":"","permalink":"http://shenguosai.github.io/2024/02/28/%E4%BD%BF%E7%94%A8PS%E5%9C%A85%E5%AF%B8%E7%9B%B8%E7%BA%B8%E4%B8%8A%E6%8E%92%E7%89%881%E5%AF%B8%E8%AF%81%E4%BB%B6%E7%85%A7/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Windows11 激活方法","slug":"Windows11-激活方法","date":"2024-02-26T02:47:23.000Z","updated":"2024-02-26T03:02:59.738Z","comments":true,"path":"2024/02/26/Windows11-激活方法/","link":"","permalink":"http://shenguosai.github.io/2024/02/26/Windows11-%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/","excerpt":"今天将笔记本自带的 win11 家庭版升级到专业版时无意中在知乎中找到了一个方法，一试还真的有效，因为远程运行了一个网站的程序，不知道自己的电脑是不是成为别人的肉鸡了，但是激活方式确实是有效的。风险性后面再研究吧。","text":"今天将笔记本自带的 win11 家庭版升级到专业版时无意中在知乎中找到了一个方法，一试还真的有效，因为远程运行了一个网站的程序，不知道自己的电脑是不是成为别人的肉鸡了，但是激活方式确实是有效的。风险性后面再研究吧。 两个激活秘钥J8WVF-9X3GM-4WVYC-VDHQG-42CXT7Y64F-88DCY-Y6WTC-H33D2-64QHF我使用的是第一个，第二个是否有效没有验证。 方法 右键“此电脑”，依次点击“属性” &#x3D;&gt; “产品秘钥和激活” &#x3D;&gt; “更改产品秘钥”，输入上述秘钥； win + R，输入powershell，回车。在弹窗中输入命令:irm massgrave.dev/get.ps1 | iex 会弹出下面的窗口简单解释一下: 按1，Windows永久激活；按2，office永久激活；按3，Windows激活到2038年；按4，180天的kms激活工具；…… 然后重复1就会看到“已激活”字样。","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Windows","slug":"Note/Windows","permalink":"http://shenguosai.github.io/categories/Note/Windows/"}],"tags":[]},{"title":"使用curl命令行工具查询本地公网IP地址","slug":"使用curl命令行工具查询本地公网IP地址","date":"2024-02-04T01:46:39.000Z","updated":"2024-03-02T14:54:57.450Z","comments":true,"path":"2024/02/04/使用curl命令行工具查询本地公网IP地址/","link":"","permalink":"http://shenguosai.github.io/2024/02/04/%E4%BD%BF%E7%94%A8curl%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%9F%A5%E8%AF%A2%E6%9C%AC%E5%9C%B0%E5%85%AC%E7%BD%91IP%E5%9C%B0%E5%9D%80/","excerpt":"在 Linux 中 curl 是一个利用 URL 规则在命令行下工作的文件传输工具，同时也可以查询本机公网 IP 地址，具体使用方法如下:","text":"在 Linux 中 curl 是一个利用 URL 规则在命令行下工作的文件传输工具，同时也可以查询本机公网 IP 地址，具体使用方法如下: 使用curl ipinfo.io查询:curl ipinfo.io 返回值1234567891011 [root@MiWiFi-R3D-srv ~]# curl ipinfo.io&#123; &quot;ip&quot;: &quot;1.203.179.218&quot;,// 此处是本机公网ip地址 &quot;city&quot;: &quot;Beijing&quot;,// 城市名 &quot;region&quot;: &quot;Beijing&quot;,// 区域名 &quot;country&quot;: &quot;CN&quot;,// 国家代号 &quot;loc&quot;: &quot;39.9075,116.3972&quot;,// 经纬度坐标 &quot;org&quot;: &quot;AS4847 China Networks Inter-Exchange&quot;,// 运营商信息 &quot;timezone&quot;: &quot;Asia/Shanghai&quot;,// 时区 &quot;readme&quot;: &quot;https://ipinfo.io/missingauth&quot;//提示ipinfo.io官网地址&#125; 使用curl ifconfig.me查询curl ifconfig.me 返回值123[root@MiWiFi-R3D-srv ~]# curl ifconfig.me1.203.179.218 //只显示本机公网IP地址[root@MiWiFi-R3D-srv ~]# 使用ipinfo.io加ip地址，可查血这个 ip 的信息curl ipinfo.io/192.168.32.84 返回值1234567891011 [root@MiWiFi-R3D-srv ~]# curl ipinfo.io/103.208.15.138&#123; &quot;ip&quot;: &quot;103.208.15.138&quot;,//被查询的IP地址 &quot;city&quot;: &quot;Beijing&quot;,//所属城市 &quot;region&quot;: &quot;Beijing&quot;,//所属区域 &quot;country&quot;: &quot;CN&quot;,//国家代码 &quot;loc&quot;: &quot;39.9075,116.3972&quot;,//经纬度坐标 &quot;org&quot;: &quot;AS9808 China Mobile Communications Group Co., Ltd.&quot;,//运营商信息 &quot;timezone&quot;: &quot;Asia/Shanghai&quot;,//时区 &quot;readme&quot;: &quot;https://ipinfo.io/missingauth&quot;//ipinfo.io官网地址&#125; 此命令在 Windows 的命令提示符中也可以使用使用方法如下:1234567891011 C:\\Users\\User&gt;curl ipinfo.io&#123; &quot;ip&quot;: &quot;1.203.179.218&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;region&quot;: &quot;Beijing&quot;, &quot;country&quot;: &quot;CN&quot;, &quot;loc&quot;: &quot;39.9075,116.3972&quot;, &quot;org&quot;: &quot;AS4847 China Networks Inter-Exchange&quot;, &quot;timezone&quot;: &quot;Asia/Shanghai&quot;, &quot;readme&quot;: &quot;https://ipinfo.io/missingauth&quot;&#125; 最简单的是使用 https://ip138.com/ 网址进行本机公网IP地址查询","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Linux","slug":"Note/Linux","permalink":"http://shenguosai.github.io/categories/Note/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://shenguosai.github.io/tags/Linux/"}]},{"title":"关于半导体工艺中电容器件","slug":"关于半导体工艺中电容器件","date":"2024-02-01T09:15:36.000Z","updated":"2024-03-02T14:55:50.742Z","comments":true,"path":"2024/02/01/关于半导体工艺中电容器件/","link":"","permalink":"http://shenguosai.github.io/2024/02/01/%E5%85%B3%E4%BA%8E%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%B7%A5%E8%89%BA%E4%B8%AD%E7%94%B5%E5%AE%B9%E5%99%A8%E4%BB%B6/","excerpt":"半导体设计中常用的电容有: MIM, MOM, Varactor, NCAP, N&#x2F;P MOS","text":"半导体设计中常用的电容有: MIM, MOM, Varactor, NCAP, N&#x2F;P MOS MIMMIM 电容是利用异层金属制备: 是使用特殊H -K 材料制作的高密度电容，比较薄，耐击穿性不好，比较贵，增加了新的工艺，需要额外的 mask(MIM 层间金属介质层)。 逻辑电路中本身存在较多的金属层，可以将奇数层金属连接在一起，偶数层金属连接在一起，形成层间 MIM 电容，但是层间距离比较大，一次电容密度比较小。 寄生电容大。 MOM同层金属插指形成: 比较占面积； 容值高； 工艺兼容，单独划分区域即可； 寄生电容小； 28nm 以下工艺固定使用 MOM 。 VaractorPoly-oxide-NWell，S&#x2F;D NP+ 作为bulk，是一种电压控制的电容，电容是反偏积累工作状态，其电容与电压的关系完全取决于 NWell 掺杂浓度梯度，工艺难度较大。Varactor 一般操作在 accumulation (积累)区，C-V 曲线较线性，常用在需要电压调整电容的控制回路中。 在 Psub 的工艺中，Varactor 和 NCAP 是坐在 NWell 中，S&#x2F;D 是 N+ 重掺杂作为BULK，当 GATE 和 BULK 压差越大时，沟道积累负电荷越多，相当于 GATE 和 BULK 这两个极板离得越近，电容越大。 NCAPN&#x2F;P MOS(Poly cap)MOS 电容，对比 Varactor NWell 情况，Poly Cap 使用 PMOS。所以 S&#x2F;D 使用 PP+ 而不是 NP+。MOS Cap 一般操作在 inversion (反型)区， C-V 曲线不线性且陡峭，通常用在固定 Gate Voltage 做稳压电容。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Semicondcutor","slug":"Semicondcutor","permalink":"http://shenguosai.github.io/tags/Semicondcutor/"},{"name":"Device","slug":"Device","permalink":"http://shenguosai.github.io/tags/Device/"}]},{"title":"EDA工具使用备忘","slug":"EDA工具使用备忘","date":"2024-02-01T00:49:38.000Z","updated":"2024-03-04T03:12:15.320Z","comments":true,"path":"2024/02/01/EDA工具使用备忘/","link":"","permalink":"http://shenguosai.github.io/2024/02/01/EDA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/","excerpt":"CadenceVirtuoso .cdsinit: 负责Cadence软件的初始化配置，包括加载快捷方式、嵌入Calibre软件接口等。","text":"CadenceVirtuoso .cdsinit: 负责Cadence软件的初始化配置，包括加载快捷方式、嵌入Calibre软件接口等。 示例存放目录:Candence安装目录/tools/dfII/samples/local/cdsinit 读取顺序: Cadence安装目录&#x2F;tools&#x2F;dfII&#x2F;samples&#x2F;local&#x2F;cdsinit &#x3D;&gt; 用户home目录&#x2F;.cdsinit &#x3D;&gt; virtuoso启动目录&#x2F;.cdsinit 设置默认读取的display.drf文件: drLoadDrf(filePath) 设置默认快捷键文件: 添加单个快捷键文件 load(\"/home/IC/Desktop/workspace/analog_ic/set_env/bindKeys_ICSkillSharing.il\") 添加多个快捷键文件 1234567891011121314151617181920212223let((bindKeyFileList file path saveSkillPath) bindKeyFileList = &#x27;( &quot;leBindKeys.il&quot; &quot;schBindKey.il&quot; &quot;bindKeys_ICSkillSharing.il&quot; )); This is the path that is searched for the files path = strcat(; If you want to add another path add it here as a string &quot;. ~/home/IC/Desktop/workspace/analog_ic/set_env &quot; prependInstallPath(&quot;local&quot;) prependInstallPath(&quot;samples/local&quot;) )saveSkillPath = getSkillPath()saveSkillPath(path)foreach(file bindKeyFileList if(isFile(file) then loadi(file) ))setSkillPath(saveSkillPath) 快捷键设置: 设置快捷键“0”消除高亮net|按“0”后鼠标点击欲消除的net: hiSetBindKey(\"Schematics\" \"0\" \"geEnterDeleteNetProbe()\") 设置快捷键“-”消除所有高亮net: hiSetBindkey(\"Schematics\" \"-\" \"geDeleteAllProbe(getCurrentWindow() t)\") 设置快捷键“F6”打开Library Manager(启动Virtuoso后): hiSetBindKey(\"Command Interpreter\" \"F6\" \"ddsOpenLibManager()\") 设置快捷键“Shift+S”在上层schematic界面下编辑Symbol: hiSetBindKey(\"Schematics\" \"ShiftS\" \"schHiEditInPlace()\") 设置仿真结果默认存放目录为“&#x2F;DATA&#x2F;shenguosai&#x2F;simulasion”: envSetVal(\"asimenv.startup\" \"projectDir\" 'string \"/DATA/shenguosai/simulasion\") 调用其它软件接口: Calibreload(\"Calibre_install_dir/lib/calibre.skl\") HSPICEload(\"HSPICE_install_dir/interface/HSPICE.ile\") .cdsenv: 包含了Cadence软件的变量设置，用户通过对变量赋值，改变软件设置。 示例存放目录: Candence安装目录/tools/dfII/samples/.cdsenv 读取顺序: Cadence安装目录&#x2F;tools&#x2F;dfII&#x2F;samples&#x2F;.cdsenv &#x3D;&gt; 用户home目录&#x2F;.cdsenv &#x3D;&gt; virtuoso启动目录&#x2F;.cdsenv 设置仿真结果显示有效位数:(示例文件中有，通过搜索改变赋值即可,以下同) auCore.misc labelDigits int 6 改变仿真结果保存路径: asimenv.startup projectDir string\" ./simulation\" 按Library名称设置仿真结果保存路径: asimenv.startup appendLibNameToProjectDir boolean t 设置原理图和版图中的 label 默认字体改为 roman: 12schematic createLabelFontStyle cyclic &quot;roman&quot;layout labelFontStyle cyclic &quot;roman&quot; 设置版图网格点默认值:视工艺而定 12layout xSnapSpacing float 0.005layout ySnapSpacing float 0.005 设置仿真波形与坐标显示: 1234567891011viva.graph titleFont string &quot;Default,14,-1,5,75,0,0,0,0,0&quot;viva.rectGraph background string &quot;white&quot;viva.axis font string &quot;Default,14,-1,5,75,0,0,0,0,0&quot;viva.horizMarker font string &quot;Default,14,-1,5,75,0,0,0,0,0&quot;viva.vertMarker font string &quot;Default,14,-1,5,75,0,0,0,0,0&quot;viva.referenceLineMarker font string &quot;Default,14,-1,5,75,0,0,0,0,0&quot;...viva.trace lineThickness string &quot;Thick&quot;viva.trace lineStyle string &quot;solid&quot;wavescan.trace lineThickness string &quot;Thick&quot;wavescan.trace lineStyle string &quot;solid&quot; 其中viva.axis font string &quot;Defaut,14,-1,5,75,0,0,0,0,0&quot;中的 14 为字号；75 为颜色深度，可以理解为是否加粗，取值在0-99之间。 注意:仿真波形显示方法会与 PDK 中环境变量设置和 display.drf 文件中的设置有关，如果按照上面的方法设置完后不能达到实际效果，首先考虑是否是 PDK 自带脚本加载了其它软件变量或者使用的 display.drf 文件中做了相应修改，如果发现有问题可以修改 PDK 中环境变量或者 display.drf 文件的相应设置。 实现在 Library Manager 界面双击 view 以只读方式打开: cdsLibManager.main dblClickEditCellView boolean nil 特别注意: 可能按照上面的方法设置完.cdsenv文件之后，发现设置并未生效，这时候需要注意一个问题，Cadence每次启动时都会加载 .cdsinit 文件，然而对于 .cdsenv 文件并非如此，而且 .cdsenv文件中的变量值会被覆盖，具体软件加载 .cdsenv 文件的顺序需要再用户的环境变量设置文件中定义。一般叫做 .bashrc (使用 export 定义环境变量)或者 .cshrc (使用 setenv 定义环境变量)。 12345# 加载软件启动目录下的 .cdsenv 文件export CDS_LOAD_ENV = CWD(setenv CDS_LOAD_ENV CWD)# 首先加载用户主目录下的 .cdsenv 文件，然后加载软件启动目录下的 .cdsenv 文件。export CDS_LOAD_ENV = addCWD(setenv CDS_LOAD_ENV addCWD) display.drf: 一般在工艺库中会有初始化的显示文件。这里面会有电路的连线粗细及颜色，器件的一些显示，版图layout里面的layer颜色等等，还有ADE波形图里面的线的属性。总之就是显示相关的一些设置。 文件的修改保存: 当修改过显示后，每次退出 virtuoso 会显示一个保存显示信息，这里输入名称，比如display_1.drf，这个文件默认保存在打开 virtuoso 的文件夹下面。 默认文件的设置: 在.cdsinit 文件里添加载入命令 drLoadDrf(filepath) 。","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"EDA","slug":"Semiconductor/EDA","permalink":"http://shenguosai.github.io/categories/Semiconductor/EDA/"}],"tags":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"},{"name":"EDA","slug":"EDA","permalink":"http://shenguosai.github.io/tags/EDA/"},{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/tags/Note/"}]},{"title":"Work Logs--20240130","slug":"Work-Logs-20240130","date":"2024-01-30T10:00:00.000Z","updated":"2024-03-04T03:11:53.077Z","comments":true,"path":"2024/01/30/Work-Logs-20240130/","link":"","permalink":"http://shenguosai.github.io/2024/01/30/Work-Logs-20240130/","excerpt":"有东西被加密了, 请输入密码查看.","text":"ae118af9461036e20f25663a30e189738734b433ecdcc685de42ade449b792d34bc8972806baa92858fa8c8179cc4f0cdad51b0f6d2e4688d806e1d895f634ddc3219fc23abbb5e49b2a3b0254457461a9e56f5091442fae415b599f95777f53349b5ac9c312d9f9d1912e24590acb55e898248e5f1fb86dc1d9976c1c1e6c8ecd7887d313f4407fbe3c890889a2d2809bb4758b29849793363c11583b4ca9bd52f72d00646e0765e1deeb8257354e35b1486ec2c81c151f323ad47e25a5e4315e22752ae0d2bfa35030b1a4e4583373bb896c9c8e403d683847dfb63251a37ec83a411798f3e5da471901e0e75c29d8526668ce930203040fb45b7a3abcfd0f3a3dec5dc16e7ee3ab45903cb868d7327add83a440d3b1660763271a7aab8ac70343844527c88ff59b5258ad8eb40496151c1e20d21267041fd4536a9ad3730095312382d9e2281afdc99c37d0ca3b44e329865d1ab6adc600b7e549e9837a6bc544531c3f9fe6b5bd33a6afa9d96a7f2a7bd0f0834d1f6f8b8fce30406b113877aa44806a250fcdf93d4d8a079ec9d4a0274aaaa95b2f03f09d85815c7aac1756558d9c3bfee577aae8640f09022b39a5e98d4ac8bc3e5dd56c13ba3caa06fd7a69f9f167c4524f8f34380a0febbfbf5d18e90f9d60aca880095d2725c456ba7426f9fc862ecbb3186a336121f4721441be44e4ce6b6f78c992da28dba56256f4ad4652895a736187c1f143ec1c0ccc9ef6e267ecace024063638c6119927c2c3a84896ddf99865ce8273947f1154e0dedda49eca1cc75c020eb1a9c081092a068fb317c0d307c9dcedf0c16dd871be612edf08e9caad415c46483ee97dafe34865ebedb8054bd621333bf6fd48014c34d165024971a301204fbd4475c622192f82e8fce352800a9f14fe87f6cb5a53b521615f70a28d6763ce6991ad7e5b5be0db481a8aa907d156bcde2fef66ff580b28a296b5d7cb9024b18c68b738cb86667dd6cdfb5e2ba81cc39325e7f4e399af93910e819b3df61c9dc7f28c35f3698014cf3c18888b9a4cd391a49e4e999e27fa66ece754f81cd66e8c013295f5ba13efaa3f6cbef275fb834b8eb8ec32f99c9efcfa9b9788daadf47dcef3192b89cf044c80de4fe86910ac925e606e377949dda4c187c422eca1ef1b1681d5bc74a6d2d1e8854ebcf0ffa80bdd6862480309d391afb82ecdbc05d81014f978af49cb5a399e5bdc1d8173f271b56a9f14e410c961ff6668fba456fe23e3c34b8471472c8c82a6c9a2a9880b43a91a6380b84bdf9a876c48ffc35d6f4421eea2c08633d6d4b0f009e7398cdd8cfb9f9354477a7704d271fac8893f04a1082988aa06ade7c4dbf8a53ff50e2a99789459506e070238a0af01d5570d87400daf457a93efd151cfb72de663f942ea36fbfdaf4e48c9ee4d21ed9ff20f0cd0a6139c667edff6c6dc5d1ac5cb7d104dc956b0158beb4a6317517fb50ee209fe934ce959abdca40d606faa7994ffc75c708ddfda002e9cbd4f3fbdd1a542a71cd094129a2b98c766892f2f2c53c405bf15bbf35fc815d3770803066b0460fa51cef863a557c67ef8435eccc9e7bfebd5abb9b81e671d8e92df7050109c11f05e3bd5ef048d3ea2b83985f68dc3cb2eb4c5db4972a2618a16d3d1fc3bda29ac49ba877187b1bf7d582901bf18f364529e28b6b321f88fd944fbc76fe4dafc9f3e515f329b9f1ba5c674b2bc97980df2b8bc5aefa2d6eb611e26a7767c61126d62e3256100016861766f65355cce2fa0e7fc51ba76cfd38dc52daada452c4bd48675086039d0ebc0d402533ff23f4aaaa59504f581ce8ab18dfd52d3847adb22ebc4962358b905e8718861e41acc24309981112f954ba7b9a6520b58631fe9714f91f3ce9925689ecc7cf10343bd45167895fb645cda5df1228c94b7e97d43ea1c6947105aae8586afb5d4f6f5850ce460c720c8d58c5d7ae6ac35a88f93342dc6529ac26880b67a7bfae16328065dfe33817f78d0e503856368ec397b13c1aa5228823ec2a8695dd47b1c2bfebda36da3d1a896d8952804886b5cb01d1d16d7fa9b3290f2226d3a1305cf019e66e88413d41a89368061d8b28d89b81531e096689ef2de74aa91417184c2757e7b43d7f4c9dae6bfec2c58d352f932628893a3489287344c073199d1ca2530ee8722525ceb2740364d948763ae352a26f15fce4f4cb87ff98fdd7c5defa6cc631ac33b03280e40e9c4ac7bff9b8bf228bc5641f45c272f189716e88787b88115acd7e1c9468522f70553f7bef38601a0ab7949ef6faa22a87e 您好, 这里需要密码.","categories":[{"name":"Projects","slug":"Projects","permalink":"http://shenguosai.github.io/categories/Projects/"},{"name":"CXT2503S","slug":"Projects/CXT2503S","permalink":"http://shenguosai.github.io/categories/Projects/CXT2503S/"}],"tags":[{"name":"WorkLogs","slug":"WorkLogs","permalink":"http://shenguosai.github.io/tags/WorkLogs/"},{"name":"Swiching Regulator","slug":"Swiching-Regulator","permalink":"http://shenguosai.github.io/tags/Swiching-Regulator/"},{"name":"Buck-Boost","slug":"Buck-Boost","permalink":"http://shenguosai.github.io/tags/Buck-Boost/"}]},{"title":"浅谈几种带宽与增益","slug":"浅谈几种带宽与增益","date":"2024-01-10T07:02:38.000Z","updated":"2024-01-10T08:49:57.248Z","comments":true,"path":"2024/01/10/浅谈几种带宽与增益/","link":"","permalink":"http://shenguosai.github.io/2024/01/10/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8D%E5%B8%A6%E5%AE%BD%E4%B8%8E%E5%A2%9E%E7%9B%8A/","excerpt":"今天记录一下闭环增益、开环增益、环路增益，以及3dB带宽、单位增益带宽(UGB)、增益带宽积(GBW)。","text":"今天记录一下闭环增益、开环增益、环路增益，以及3dB带宽、单位增益带宽(UGB)、增益带宽积(GBW)。 关于增益闭环增益对于一个闭环反馈系统，如下图:闭环增益即传输函数为: $\\frac{Y(s)}{X(s)}&#x3D;\\frac{H(s)}{1+\\beta H(s)}$, 是 $\\frac{开环增益}{1+环路增益}$。 开环增益从上面图中可知，开环增益就是去除反馈对系统的作用，看运放的增益。 环路增益如图所示，输入置0，断开环路。环路增益$\\frac{V_F}{V_t}&#x3D;\\beta A$根据巴克豪森判据判断系统是否稳定，所以仿真都是用stb仿环路稳定性，看环路增益波特图而不是看开环增益或者闭环增益。 那为什么到运放看稳定性就说开环增益了呢？对于单个运放来说，由于运放一般工作在负反馈系统中，开环增益就相当于反馈系数为1的环路增益，所以到运放会说开环增益，其实还是在说环路增益。 那为什么说运放仿开环增益相位裕度够了就代表其接成反馈系统是稳定的呢？拉扎维的10.2节完美解释了这个问题:运放开环增益相当于反馈系数为1的环路增益:在反馈系统里，反馈系数最大为1，就是接成单位增益负反馈形势。这种情况下，系统的环路增益波特图与运放的完全重合，即相位裕度一样，所以可以稳定。对于其它反馈系数小于1的系统来说，环路增益为$\\beta A$，不管$\\beta$如何变，环路增益的波特图中，极点的位置与运放极点位置一样，不会变，所以相频曲线没有任何改变。但是由于$\\beta &lt;1$，幅频曲线下移，增益交点提前，相位裕度只会越来越大。综上，运放单独仿真与它接在负反馈系统里相比，相位裕度是最差的情况了，即当反馈变弱时，结果是系统更稳定。 关于带宽3dB带宽3dB带宽就是运放的主极点处所对应的频率，幅度上对应比低频增益下降3个dB处。推导:运放传递函数:$A_v(s)&#x3D;\\frac{A_v(0)}{(1+s&#x2F;\\omega _0)(1+s&#x2F;\\omega _1)(1+s&#x2F;\\omega _2)···}$ 假设次极点离主极点很远很远，那么在主极点$s&#x3D;\\omega _0$处，有:$A_v(\\omega _0)&#x3D;20log(\\frac{A_v(0)}{1+\\omega _0&#x2F;\\omega _0})&#x3D;20log(\\frac{A_v(0))}{2}&#x3D;20logA_v(0)-20log(2)\\approx 20logA_v(0)-3dB$ 所以叫做3dB带宽。 单位增益带宽顾名思义，就是运放$\\frac{开环增益}{闭环负反馈系统环路增益}&#x3D;1$时对应的频率。为了推导方便，假设只有一个极点的运放，那么在它的单位增益带宽处，有:$A_v(\\omega _{UGB})&#x3D;\\frac{A_v(0)}{1+\\frac{\\omega _{UGB}}{\\omega _0}}&#x3D;1$可得，$\\omega _{UGB}&#x3D;A_v(0)*\\omega _0$ 这里有一个结论: 闭环系统的3dB带宽等于环路增益的党委增益带宽。单位增益负反馈系统的3dB带宽等于该系统中所使用的运放的单位增益带宽。推导:负反馈想要稳定，即相位裕度达到60°，单位增益带宽内一定只有一个极点。只看单位增益带宽内的情况，那么有:环路增益: $\\beta A(s)&#x3D;\\frac{\\beta A_0}{1+\\frac{s}{\\omega _0}}$闭环系统传输函数: $\\frac{Y(s)}{X(s)}&#x3D;\\frac{A(s)}{1+\\beta A(s)}&#x3D;\\frac{\\frac{A_0}{1+\\beta A_0}}{1+\\frac{s}{(1+\\beta A_0)\\omega _0}}$所以就闭环系统传输函数3dB带宽(不是环路增益，是传输函数)是$\\omega _0\\beta A_0$，环路增益的单位增益带宽也是$\\omega _0\\beta A_0$。当系统为单位增益负反馈系统时，即反馈因子是1，系统3dB带宽是$\\omega _0A_0$,运放单位增益带宽也是$\\omega _0A_0$。 增益带宽积(GBW)增益与带宽的乘积。重要结论:在单极点系统中，GBW是不变的，等于单位增益带宽，等于低频增益3dB带宽。因为只有一个极点的时候，极点之后，带宽每增大10倍，增益下降20dB，20dB就是10倍，一个增大十倍，一个减小十倍，自然不变。结合单位增益带宽中的结论推导部分，可见，闭环系统传输函数的增益带宽积与开环的增益带宽积相等。(再次强调:是传输函数的增益带宽积，不是环路增益中的增益带宽积)$A_0\\omega _0&#x3D;\\frac{A_0}{1+\\beta A_0}(1+\\beta A_0)*\\omega _0$","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"Analog","slug":"Semiconductor/Analog","permalink":"http://shenguosai.github.io/categories/Semiconductor/Analog/"}],"tags":[{"name":"反馈","slug":"反馈","permalink":"http://shenguosai.github.io/tags/%E5%8F%8D%E9%A6%88/"}]},{"title":"TVBox的安装与使用","slug":"TVBox的安装与使用","date":"2024-01-05T00:48:22.000Z","updated":"2024-01-31T08:41:55.813Z","comments":true,"path":"2024/01/05/TVBox的安装与使用/","link":"","permalink":"http://shenguosai.github.io/2024/01/05/TVBox%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","excerpt":"","text":"apk下载","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"},{"name":"TV-Software","slug":"Tutorial/TV-Software","permalink":"http://shenguosai.github.io/categories/Tutorial/TV-Software/"},{"name":"TVBox","slug":"Tutorial/TV-Software/TVBox","permalink":"http://shenguosai.github.io/categories/Tutorial/TV-Software/TVBox/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://shenguosai.github.io/tags/Life/"}]},{"title":"Cadence使用Calibre进行后仿","slug":"Cadence使用Calibre进行后仿","date":"2023-12-18T05:50:59.000Z","updated":"2024-01-31T03:02:31.009Z","comments":true,"path":"2023/12/18/Cadence使用Calibre进行后仿/","link":"","permalink":"http://shenguosai.github.io/2023/12/18/Cadence%E4%BD%BF%E7%94%A8Calibre%E8%BF%9B%E8%A1%8C%E5%90%8E%E4%BB%BF/","excerpt":"通过 Virtuoso 的 Layout XL &#x3D;&gt; Calibre &#x3D;&gt; Run PEX 进入 Calibre PEX，并将工艺厂提供的 xRC(Rule) 文件设置好 Calibre PEX。","text":"通过 Virtuoso 的 Layout XL &#x3D;&gt; Calibre &#x3D;&gt; Run PEX 进入 Calibre PEX，并将工艺厂提供的 xRC(Rule) 文件设置好 Calibre PEX。 为了减少寄生参数，以及提高后仿效率，建议在 Calibre PEX &#x3D;&gt; PEX Options &#x3D;&gt; Netlist &#x3D;&gt; Reduction and CC 中将 Enable MinRes reduction 和 Enable MinCap Reduction 选中，并在 COMBINE 和 REMOVE 后的框中填写所需数值，一般 Cap 的 Combine 为 0.5fF，Remove 为 0.1fF。Res 的 Combine 为 1Ω，Remove 为 0.1Ω。 在 Outputs 选项中，Outputs &#x3D;&gt; Netlist 框中，Format 选 CALIBREVIEW(可增加 Geometry 可在 PEX 运行完后弹出寄生参数的总结)，Use Names From : SCHEMATIC 。 点击 Run PEX 开始寄生参数提取，之后进入 Calibre View Setup 界面。 Calibre View Setup 设置中，Output 选项填被提取寄生参数的 library，Calibre View Type 选择 masklayout 意味着直接以 layout 的摆放位置提取寄生参数，选择 Schematic 意味着以 schematic 的位置生成寄生参数，建议选择 schematic，这可以在后仿中如前仿一样直接查看 schematic 的电路仿真信息，Create Terminal &#x3D;&gt; if matching terminal exists on symbol，Device Placement &#x3D;&gt; Layout Location，设置完毕，点击 OK 。 提取寄生参数完毕后，如果有错误可能是 calibre 中部分线短路了，手动改正即可，可通过 calibre view type 更改类型为 masklayout 可以避免这种错误，但是后仿不能通过直接点击。 在 testbench 中新建 config view，将 config 中的 view to use 更改为提取的寄生参数 calibre，加入 calibre 提取出来的参数，同时 ADE L &#x3D;&gt; Setup &#x3D;&gt; Design 更改类型为 config，即可开始后仿。 仿真结束后，可以直接在 schematic 中查看信号线。 生成 calibre 耗费时间过长，可以直接更改 calibre view type 为 masklayout，但是此种方法对于查看结果没那么方便。或者直接在 pex 设置中，Output &#x3D;&gt; Netlist &#x3D;&gt; Format 更改为 SPECTRE 生成网表。 该方法生成的网表不一定能直接用于 spectre 仿真，需要先将该网表的 pin 顺序更正。更改方法为，首先需要先用前仿电路跑一次仿真生成网表，然后在 simulation 这个文件夹中找到 input.scs 的网表，将该网表中的 pin 复制到后仿的网表中。 后仿生成的网表更改完毕，在 testbench 中新建 config view，将 config 中的 view to use 更改为 Specify SPICE Source File，同时选择后仿的网表即可，这就是用网表仿真，速度快，但是不方便查看信号，但是利于排除寄生电容，需要排除哪项将其注释即可。","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"post-sim","slug":"Semiconductor/post-sim","permalink":"http://shenguosai.github.io/categories/Semiconductor/post-sim/"},{"name":"EDA","slug":"Semiconductor/EDA","permalink":"http://shenguosai.github.io/categories/Semiconductor/EDA/"}],"tags":[{"name":"Calibre","slug":"Calibre","permalink":"http://shenguosai.github.io/tags/Calibre/"}]},{"title":"在Windows11中找回照片查看器打开图片","slug":"在Windows11中找回照片查看器打开图片","date":"2023-12-12T15:41:05.000Z","updated":"2023-12-12T16:06:21.443Z","comments":true,"path":"2023/12/12/在Windows11中找回照片查看器打开图片/","link":"","permalink":"http://shenguosai.github.io/2023/12/12/%E5%9C%A8Windows11%E4%B8%AD%E6%89%BE%E5%9B%9E%E7%85%A7%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8%E6%89%93%E5%BC%80%E5%9B%BE%E7%89%87/","excerpt":"使用快捷键Win + R打开运行窗口， 输入regedit命令回车打开注册表","text":"使用快捷键Win + R打开运行窗口， 输入regedit命令回车打开注册表 找到HKEY_LOCAL_MACHINE -&gt; SOFTWARE-&gt;Microsoft -&gt; Windows Photo Viewer -&gt; Capabilities -&gt; FileAssociations，右键&#x3D;&gt;新建&#x3D;&gt;字符串值，名称填写.jpg，数值填写PhotoViewer.FileAssoc.Tiff，同理添加 .png .jpeg，数值相同。 添加之后就可以使用Windows照片查看器看图。","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Windows","slug":"Note/Windows","permalink":"http://shenguosai.github.io/categories/Note/Windows/"}],"tags":[]},{"title":"smic工艺中带有ckt后缀的器件","slug":"smic工艺中带有ckt后缀的器件","date":"2023-12-08T06:16:14.000Z","updated":"2024-01-10T07:20:43.247Z","comments":true,"path":"2023/12/08/smic工艺中带有ckt后缀的器件/","link":"","permalink":"http://shenguosai.github.io/2023/12/08/smic%E5%B7%A5%E8%89%BA%E4%B8%AD%E5%B8%A6%E6%9C%89ckt%E5%90%8E%E7%BC%80%E7%9A%84%E5%99%A8%E4%BB%B6/","excerpt":"","text":"在SMIC的PDK中存在后面带ckt和不带ckt的PDK，其中不带ckt的器件模型是bsim4，而带ckt的器件模型是subckt。网上查询，subckt就是sub circuit，即子电路的意思。查询并猜想如下:不带ckt: 类理想器件，即只针对此种器件建模；带ckt: 考虑其内部构造所产生的各种寄生成分，并且包含寄生器件参数随电路参数的变化","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"Process","slug":"Semiconductor/Process","permalink":"http://shenguosai.github.io/categories/Semiconductor/Process/"}],"tags":[{"name":"工艺","slug":"工艺","permalink":"http://shenguosai.github.io/tags/%E5%B7%A5%E8%89%BA/"}]},{"title":"VIM学习笔记--状态行","slug":"VIM学习笔记-状态行","date":"2023-12-06T15:33:25.000Z","updated":"2023-12-12T15:54:28.260Z","comments":true,"path":"2023/12/06/VIM学习笔记-状态行/","link":"","permalink":"http://shenguosai.github.io/2023/12/06/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%8A%B6%E6%80%81%E8%A1%8C/","excerpt":"状态行参数列表 参数 说明 %(…%) 定义一个项目 %{n}* %对其余的行使用高亮显示组User n，知道另一个%n*。数字n 必须从1到9。用%*或%0*可以恢复正常的高亮显示。 %&lt; 如果状态行过长，在何处换行。缺省是在开头。 %&#x3D; 左对齐和右对齐之间的分割点。 % 字符% %B 光标下字符的十六进制形式。 %F 缓冲区的文件完整路径。 %H 如果为帮助缓冲区则显示为HLP。 %L 缓冲区中的行数。 %M 如果缓冲区修改过则显示未+。 %N 打印机页号。 %O 以十六进制方式显示文件中的字符偏移。 %P 文件中光标前的%。 %R 如果缓冲区只读则为RO。 %V 列数。如果与%c相同则为空字符。 %W 如果窗口为预览窗口则为PRV。 %Y 缓冲区的文件类型，如 vim。 %a 如果编辑多行文本，这个字行串就是(&#123;current&#125; of &#123;arguments&#125;)，例如: (5 of 18)。如果在命令行中只有一行，这个字符串为空。 %b 光标下的字符的十进制表示形式。 %c 列号。 %f 缓冲区的文件路径。 %h 如果为帮助缓冲区显示为[Help]。 %l 行号。 %m 如果缓冲区已修改则表示为[+]。 %n 缓冲区号。 %o 在光标前的字符数(包括光标下的字符)。 %p 文件中所在行的百分比。 %r 如果缓冲区为只读则表示为[RO]。 %t 文件名(无路径)。 %v 虚列号。 %w 如果为预览窗口则显示为[Preview]。 %y 缓冲区的文件类型，如[vim]。 %{expr} 表达式的结果。","text":"状态行参数列表 参数 说明 %(…%) 定义一个项目 %{n}* %对其余的行使用高亮显示组User n，知道另一个%n*。数字n 必须从1到9。用%*或%0*可以恢复正常的高亮显示。 %&lt; 如果状态行过长，在何处换行。缺省是在开头。 %&#x3D; 左对齐和右对齐之间的分割点。 % 字符% %B 光标下字符的十六进制形式。 %F 缓冲区的文件完整路径。 %H 如果为帮助缓冲区则显示为HLP。 %L 缓冲区中的行数。 %M 如果缓冲区修改过则显示未+。 %N 打印机页号。 %O 以十六进制方式显示文件中的字符偏移。 %P 文件中光标前的%。 %R 如果缓冲区只读则为RO。 %V 列数。如果与%c相同则为空字符。 %W 如果窗口为预览窗口则为PRV。 %Y 缓冲区的文件类型，如 vim。 %a 如果编辑多行文本，这个字行串就是(&#123;current&#125; of &#123;arguments&#125;)，例如: (5 of 18)。如果在命令行中只有一行，这个字符串为空。 %b 光标下的字符的十进制表示形式。 %c 列号。 %f 缓冲区的文件路径。 %h 如果为帮助缓冲区显示为[Help]。 %l 行号。 %m 如果缓冲区已修改则表示为[+]。 %n 缓冲区号。 %o 在光标前的字符数(包括光标下的字符)。 %p 文件中所在行的百分比。 %r 如果缓冲区为只读则表示为[RO]。 %t 文件名(无路径)。 %v 虚列号。 %w 如果为预览窗口则显示为[Preview]。 %y 缓冲区的文件类型，如[vim]。 %{expr} 表达式的结果。 例: 1:set statusline=%F%m%r%h%w\\ [FORMAT=%&#123;&amp;ff&#125;]\\ [TYPE=%Y]\\ [POS=%04l,%04v][%p%%]\\ [LEN=%L] 定义显示颜色 1:set statusline=%2*%n%m%r%h%w%*\\ %F\\ %1*[FORMAT=%2*%&#123;&amp;ff&#125;:%&#123;&amp;fenc!=&#x27;&#x27;?&amp;fenc:&amp;enc&#125;%1*]\\ [TYPE=%2*%Y%1*]\\ [COL=%2*%03v%1*]\\ [ROW=%2*%03l%1*/%3*%L(%p%%)%1*]\\ 自定义高亮显示颜色 123hi User1 guifg=grayhi User2 guifg=redhi User3 guifg=white 还可以通过在.vimrc文件中包括以下命令，使状态行根据状态的不同，显示不同的颜色。 123456789101112function! InsertStatuslineColor(mode)if a:mode == &#x27;i&#x27; hi statusline guibg=peruelseif a:mode == &#x27;r&#x27; hi statusline guibg=blueelse hi statusline guibg=blackendifendfunctionau InsertEnter * call InsertStatuslineColor(v:insertmode)au InsertLeave * hi statusline guibg=orange guifg=whitehi statusline guibg=black","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"vim","slug":"Note/vim","permalink":"http://shenguosai.github.io/categories/Note/vim/"}],"tags":[]},{"title":"Adobe Acrobat XI Pro 11.0.23下载及激活","slug":"Adobe-Acrobat-XI-Pro-11-0-23下载及激活","date":"2023-12-05T05:33:35.000Z","updated":"2024-01-05T02:01:11.329Z","comments":true,"path":"2023/12/05/Adobe-Acrobat-XI-Pro-11-0-23下载及激活/","link":"","permalink":"http://shenguosai.github.io/2023/12/05/Adobe-Acrobat-XI-Pro-11-0-23%E4%B8%8B%E8%BD%BD%E5%8F%8A%E6%BF%80%E6%B4%BB/","excerpt":"简介Adobe Acrobat XI Pro 是一个著名的功能性程序，用于舒适地处理各种 PDF 文件，它将为您提供以专业水平创建和编辑高质量 PDF 文件的机会。 Acrobat XI Pro 包含高级功能，可以轻松打开许多其他管理功能，具有用户友好的界面。在创建 PDF 文件并在以后进行处理时，Adobe Acrobat 变得绝对不可替代。 Adobe Acrobat XI Pro 包含提供额外互操作性的智能功能。简单，快速，专业。将包括文档，电子表格，电子邮件，图像，视频，3D图形和地图在内的多种内容组合到一个压缩的结构化PDF包中。在查看共享的文档时进行协作。创建交互式表格并快速收集数据。保护和控制有价值的信息。 体验 Adobe®Acrobat®Dynamic PDF 技术创建和共享下一代 PDF 的强大功能。通过电子文档审阅，可填写的 PDF 表单和 Acrobat 服务与同行，客户和合作伙伴进行协作。将多种文件类型组合成一个无缝组织的专业质量 PDF 包。设置密码和权限以保护文档。内容丰富，使您的文档更具吸引力。 Adobe Acrobat XI Pro 是理想的工具，可轻松，快速，专业地处理各种 PDF 文件。","text":"简介Adobe Acrobat XI Pro 是一个著名的功能性程序，用于舒适地处理各种 PDF 文件，它将为您提供以专业水平创建和编辑高质量 PDF 文件的机会。 Acrobat XI Pro 包含高级功能，可以轻松打开许多其他管理功能，具有用户友好的界面。在创建 PDF 文件并在以后进行处理时，Adobe Acrobat 变得绝对不可替代。 Adobe Acrobat XI Pro 包含提供额外互操作性的智能功能。简单，快速，专业。将包括文档，电子表格，电子邮件，图像，视频，3D图形和地图在内的多种内容组合到一个压缩的结构化PDF包中。在查看共享的文档时进行协作。创建交互式表格并快速收集数据。保护和控制有价值的信息。 体验 Adobe®Acrobat®Dynamic PDF 技术创建和共享下一代 PDF 的强大功能。通过电子文档审阅，可填写的 PDF 表单和 Acrobat 服务与同行，客户和合作伙伴进行协作。将多种文件类型组合成一个无缝组织的专业质量 PDF 包。设置密码和权限以保护文档。内容丰富，使您的文档更具吸引力。 Adobe Acrobat XI Pro 是理想的工具，可轻松，快速，专业地处理各种 PDF 文件。 系统要求 1.3GHz或更快的处理器 Microsoft Windows XP，Service Pack 3 (32位) 或 Service Pack 2 (64位)；Windows Server 2003 R2 (32位和64位)；Windows Server 2008 或 2008 R2 (32位和64位)；Windows 7 (32位何64位)；Windows 8 (32位和64位)。 512 MB RAM (推荐1GB) 1.85 GB 可用硬盘空间 1024 x 768 屏幕分辨率 视频硬件加速(可选) 注意 : 对于64位版本的Windows Server 2003 R2 和 Windows XP (带Service Pack 2)，需要 Microsoft Update KB930627 下载Adobe Acrobat XI Pro v11.0.23 Final MI |–adobe.snr.patch.v2.0-painter |–amtemu.v0.9.2.win-painter |–Serial_Keygen X-FORCE |–2A0D5EE6129F2C24A2AC94A4C0ADC880CE99A1A0.torrent |–About the program.txt |–AcrobatPro_11_Web_WWMUI.exe |–AcrobatUpd11023.msp |–Лечение.txt 安装及激活 断开互联网连接。 双击运行安装程序AcrobatPro_11_Web_WWMUI.exe，在安装程序窗口选择使用试用版或订阅。 安装程序(此时安装好的 Adobe Acrobat XI 为 11.0.0版本，可直接转向 5 )。 双击运行安装文件AcrobatUpd11023.msp，重新启动计算机(如有需要)。此程序安装好后版本升至 11.0.23。 激活: 方式一:使用adobe.snr.patch.v2.0-painter 将修补程序adobe.snr.patch.v2.0-painter.exe复制到包含已安装程序的文件夹中(一般情况为:C:\\Program Files (x86)\\Adobe\\Acrobat 11.0\\Acrobat)，然后以管理员身份运行。 从下拉菜单中选择Adobe Acrobat XI Pro(32-bit)，然后点击Patch。 方式二:使用amtemu.v0.9.2.win-painter 将修补程序amtemu.v0.9.2-painter.exe复制到包含已安装程序的文件夹中(一般情况为:C:\\Program Files (x86)\\Adobe\\Acrobat 11.0\\Acrobat)，然后以管理员身份运行。 从下拉菜单中选择Adobe Acrobat XI，然后单击Install。 如果需要，在打开的窗口中转到软件安装位置，然后选择amtlib.dll文件，等待软件被激活。 激活完成，打开网络连接。 关于闪退原因及解决办法在上述安装及激活完成后，Adobe Acrobat XI Pro会出现闪退问题，原因是联机版权校验问题，更多深层次的原理这里不做过多讨论，本文主要讲解如何避免闪退。既然原因找到了，就可以从以下方面着手进行处理：阻拦该软件进行联网校验即可。办法很多，这里提供两种稍微容易操作的方法进行说明。 域名欺骗，添加伪造的host解析条目Acrobat 校验的域名为: acroipm.adobe.com，因此只要将该域名定位到一个假的 IP 地址即可。最简单的办法就是在C:\\Windows\\System32\\drivers\\etc\\host文件中添加条目:1127.0.0.1 acroipm.adobe.com 注意&gt;: 编辑host需要管理员权限 阻断Acrobat主程序联网这里使用windows自带防火墙进行阻断。具体操作步骤如下:开始 -&gt; 设置 -&gt; 更新与安全，打开更新与安全设置，点击 Windows 安全中心，点击打开防火墙和网络保护界面，点击高级设置，在高级设置界面中选择出站规则然后点击新建规则创建出站规则，在弹出的新建规则向导界面中，选择要创建的规则类型为程序，然后点击下一步选择指定的程序路径C:\\Program Files (x86)\\Adobe\\Acrobat 11.0\\Acrobat\\Acrobat.exe，然后点击下一步，在操作类型界面选择阻止连接，点击下一步，在选择何时应用规则的界面选择所有的场景并点击下一步，在命名界面中填写名称及描述，然后点击完成即可。注意: 本方法的前提是要保障 Windows Defender 防火墙对三个应用区域(域网络、专用网络、公用网络)都已经启用。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"},{"name":"Win-Software","slug":"Tutorial/Win-Software","permalink":"http://shenguosai.github.io/categories/Tutorial/Win-Software/"},{"name":"Adobe","slug":"Tutorial/Win-Software/Adobe","permalink":"http://shenguosai.github.io/categories/Tutorial/Win-Software/Adobe/"}],"tags":[]},{"title":"使用命令行抽取寄生(Calibre)","slug":"使用命令行抽取寄生-Calibre","date":"2023-12-03T15:12:02.000Z","updated":"2023-12-03T15:16:48.215Z","comments":true,"path":"2023/12/03/使用命令行抽取寄生-Calibre/","link":"","permalink":"http://shenguosai.github.io/2023/12/03/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%BD%E5%8F%96%E5%AF%84%E7%94%9F-Calibre/","excerpt":"","text":"123% calibre -lvs -hier -auto rule.file% calibre -xrc -pdb -rcc -xcell cell.file rule.file% calibre -xrc -fmt -all -xcell cell.file rule.file rule.file 中应指定layout(gds)的路径及文件名Instructions for Extracting Parasitics for your Layout using xCalibre Tool","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"post-sim","slug":"Semiconductor/post-sim","permalink":"http://shenguosai.github.io/categories/Semiconductor/post-sim/"},{"name":"EDA","slug":"Semiconductor/EDA","permalink":"http://shenguosai.github.io/categories/Semiconductor/EDA/"}],"tags":[]},{"title":"抽取寄生时屏蔽掉在spice model中已经存在的寄生电容","slug":"抽取寄生时屏蔽掉在spice-model中已经存在的寄生电容","date":"2023-12-03T14:14:43.000Z","updated":"2023-12-18T05:49:28.082Z","comments":true,"path":"2023/12/03/抽取寄生时屏蔽掉在spice-model中已经存在的寄生电容/","link":"","permalink":"http://shenguosai.github.io/2023/12/03/%E6%8A%BD%E5%8F%96%E5%AF%84%E7%94%9F%E6%97%B6%E5%B1%8F%E8%94%BD%E6%8E%89%E5%9C%A8spice-model%E4%B8%AD%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AF%84%E7%94%9F%E7%94%B5%E5%AE%B9/","excerpt":"在提取寄生参数时，除了需要关注金属导体的寄生电容外，还需要分析mos器件的节点寄生参数提取是否准确。下面是一个典型的 nmos 4端器件: 该mos管的4个节点 D, G, S, B 的寄生电容是否准确呢？首先用calibre xrc提取一下其寄生参数，结果如下: 123456cc_1 S G 3.32511fcc_2 S D 6.73464e-19cc_3 S B 12.7622fcc_4 G D 3.32511fcc_5 G B 1.16212fcc_6 D B 12.7506f","text":"在提取寄生参数时，除了需要关注金属导体的寄生电容外，还需要分析mos器件的节点寄生参数提取是否准确。下面是一个典型的 nmos 4端器件: 该mos管的4个节点 D, G, S, B 的寄生电容是否准确呢？首先用calibre xrc提取一下其寄生参数，结果如下: 123456cc_1 S G 3.32511fcc_2 S D 6.73464e-19cc_3 S B 12.7622fcc_4 G D 3.32511fcc_5 G B 1.16212fcc_6 D B 12.7506f 上述寄生电容分为4类: Gate 到 Source&#x2F;Drain 电容 Source&#x2F;Drain 到 Bulk 电容 Gate 到 Bulk 电容 Source 到 Drain 电容 由于在spice model中一般会自动把上述4类电容考虑，如果寄生参数提取中再提取一遍，就会发生重复提取。因此，需要把这4类电容屏蔽，屏蔽方法如下: 屏蔽 Gate 到 Source&#x2F;Drain 电容12PEX IGNORE CAPACITANCE ALL poly nsdPEX IGNORE CAPACITANCE ALL poly psd 屏蔽 Gate 到 Bulk 电容，其中 ALLGATE 是 mark layer1PEX IGNORE CAPATANCE DEVICE INTRINSIC poly ALLGATE 设置上述3个参数后，提取结果如下: 1234cc_1 S D 0.00129446fcc_2 S B 12.7622fcc_3 G B 0.211916fcc_4 D B 12.7506f 可以看到，Gate 到 Source&#x2F;Drain 的电容没有了，被屏蔽掉了。Gate 到 Bulk 的电容比刚才的值小了，说明在mos管区域的电容被屏蔽了，只剩下 Gate 露头的电容了，这个符合预期。但是，Source&#x2F;Drain 到 Bulk 的电容没有屏蔽掉，该如何设置呢？首先看一下再原始的工艺文件定义中，有如下语句: 1234567diffusion = diff &#123; thickness = 0.004 min_width = 0.15 min_spacing = 0.18 resistivity = 10 src_drn_layers = &#123;nsd_psd_&#125;&#125; 注意 diffusion, src_drn_layers是关键字，nsd_psd_ 是两个 process layer。calibre命令文件中原来有如下语句: 1PEX MAP diff NTAP PTAP nsd psd 它把 nsd, psd 映射到了diff层，但是没有告诉工具映射到 nsd_psd_层。如果修改该语句如下: 123PEX MAP diff NTAP PTAPPEX MAP nsd_nsd_PEX MAP psd_psd_ 当calibre xrc识别到该语句后，自动会把nsd之间的相互电容屏蔽掉，也自动会把 nsd&#x2F;psd 到衬底的电容屏蔽掉。屏蔽后提取结果如下: 123cc_1 S B 0.0777512fcc_2 G B 0.211916fcc_3 D B 0.0540989f 以上3个电容都是连接到mos管的金属之间的耦合电容了，电容值很小，不是器件本身的电容，符合预期。 如果用户在原始的工艺定义中没有用 diffusion 的关键字，而是用 conductor 的关键字，如下: 123456conductor = diff &#123; thickness = 0.004 min_width = 0.15 min_spacing = 0.18 resistivity = 10&#125; 则用户需要增加额外的语句来屏蔽 source 到 drain，source 到衬底的寄生电容。 屏蔽 Gate 到 Source&#x2F;Drain 的电容12PEX IGNORE CAPATANCE ALL poly nsdPEX IGNORE CAPATANCE ALL poly psd 屏蔽 Gate 到 Bulk1PEX IGNORE CAPACITANCE DEVICE INTRINSIC poly ALLGATE 屏蔽 Source&#x2F;Drain 到 Bulk1PEX IGNORE CAPACITANCE DEVICE INTRINSIC nsd ALLGATE 屏蔽 Source 到 Drain1PEX IGNORE CAPACITANCE DEVICE nsd nsd ALLGATE 可以看到，这种写法比较繁琐，不如前面的方法简洁。 总结，屏蔽掉 spice model 中的寄生参数最简单的方法是:在工艺文件定义中用 diffusion 的关键字，用 src_drn_layers 指定具体的layer名称。然后在提取命令文件中，把 gate 的电容通过 PEX IGNORE 语句来屏蔽掉，不需要写 source, drain 的屏蔽语句。","categories":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"post-sim","slug":"Semiconductor/post-sim","permalink":"http://shenguosai.github.io/categories/Semiconductor/post-sim/"},{"name":"EDA","slug":"Semiconductor/EDA","permalink":"http://shenguosai.github.io/categories/Semiconductor/EDA/"}],"tags":[{"name":"Calibre","slug":"Calibre","permalink":"http://shenguosai.github.io/tags/Calibre/"}]},{"title":"Sublime Text (Build 4169) 注册方法","slug":"Sublime-Text-Build-4169-注册方法","date":"2023-12-02T16:37:03.000Z","updated":"2023-12-02T17:03:47.810Z","comments":true,"path":"2023/12/03/Sublime-Text-Build-4169-注册方法/","link":"","permalink":"http://shenguosai.github.io/2023/12/03/Sublime-Text-Build-4169-%E6%B3%A8%E5%86%8C%E6%96%B9%E6%B3%95/","excerpt":"截止2023年12月2日，最新版本是Sublime Text 4 (Build 4169)。注册方法如下: 安装软件: 去官方网站下载并安装，Sublime Text - Text Editing, Done Right 修改sublime的执行文件: 使用16进制编辑器或打开https://hexed.it 点击“打开文件”打开 Sublime Text 安装目录下的 sublime_text.exe 在右边的“搜索”中输入807805000f94c1并按回车键 将搜索方案中的“启用替换”选中，在“替换为”中输入c64005014885c9即可 点击“另存为”，保存修改后的文件到本地，将文件名设定为 sublime_text.exe 进入安装目录，备份原 sublime_text.exe 文件(如修改为 sublime_text_bak20231202.exe ) 将修改后刚刚保存到本地的 sublime_text.exe 复制到原 Sublime Text 4 的安装目录中","text":"截止2023年12月2日，最新版本是Sublime Text 4 (Build 4169)。注册方法如下: 安装软件: 去官方网站下载并安装，Sublime Text - Text Editing, Done Right 修改sublime的执行文件: 使用16进制编辑器或打开https://hexed.it 点击“打开文件”打开 Sublime Text 安装目录下的 sublime_text.exe 在右边的“搜索”中输入807805000f94c1并按回车键 将搜索方案中的“启用替换”选中，在“替换为”中输入c64005014885c9即可 点击“另存为”，保存修改后的文件到本地，将文件名设定为 sublime_text.exe 进入安装目录，备份原 sublime_text.exe 文件(如修改为 sublime_text_bak20231202.exe ) 将修改后刚刚保存到本地的 sublime_text.exe 复制到原 Sublime Text 4 的安装目录中 如此便成功激活了，可以发现原来标题栏中的 “Unregistered” 变为了 “ADMIN”","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[{"name":"software","slug":"software","permalink":"http://shenguosai.github.io/tags/software/"}]},{"title":"英语--肯定句变否定句","slug":"英语-肯定句变否定句","date":"2023-12-01T00:50:58.000Z","updated":"2023-12-03T12:25:30.096Z","comments":true,"path":"2023/12/01/英语-肯定句变否定句/","link":"","permalink":"http://shenguosai.github.io/2023/12/01/%E8%8B%B1%E8%AF%AD-%E8%82%AF%E5%AE%9A%E5%8F%A5%E5%8F%98%E5%90%A6%E5%AE%9A%E5%8F%A5/","excerpt":"肯定句变否定句规则:一、有be动词（am、is、are）和情态动词（can、could、may、must、should、will、would等）的，直接在be动词和情态动词后面加not，some变any，and变or，too变either，其他的照抄。例如: 肯定句 否定句 I am a student. I am not a student. Amy is a good girl. Amy is not(isn&#39;t) a good girl. These flowers are very beautiful. These flowers are not(aren&#39;t) very beautiful. I can swim. I can not(can&#39;t) swim. There are some books on the table. There are not(aren&#39;t) any books on the table. Jack is a doctor. Jack is not(isn&#39;t) a doctor. I was a student ten years ago. I was not(wasn&#39;t) a student ten years ago. 注:&ensp;(1) some、and用于肯定句中，any、or用于否定句中； &ensp;(2) was是is的过去式，were是are的过去式。","text":"肯定句变否定句规则:一、有be动词（am、is、are）和情态动词（can、could、may、must、should、will、would等）的，直接在be动词和情态动词后面加not，some变any，and变or，too变either，其他的照抄。例如: 肯定句 否定句 I am a student. I am not a student. Amy is a good girl. Amy is not(isn&#39;t) a good girl. These flowers are very beautiful. These flowers are not(aren&#39;t) very beautiful. I can swim. I can not(can&#39;t) swim. There are some books on the table. There are not(aren&#39;t) any books on the table. Jack is a doctor. Jack is not(isn&#39;t) a doctor. I was a student ten years ago. I was not(wasn&#39;t) a student ten years ago. 注:&ensp;(1) some、and用于肯定句中，any、or用于否定句中； &ensp;(2) was是is的过去式，were是are的过去式。 二、没有be动词(am、is、are)和情态动词（can、could、may、must、should、will、would等）的，在动词前面加don&#39;t，doesn&#39;t(一般现在时第三人称单数)，didn&#39;t(一般过去时)，动词恢复成原形，some变any，and变or，too变either，其他的照抄。例如: 肯定句 否定句 I like math. I do not(don&#39;t) like math. Jack like math, too. Jack does not(doesn&#39;t) like math, either. They like bananas and apples. They do not(don&#39;t) like bananas or apples. Lily gets up at six every morning. Lily does not(doesn&#39;t) get up at six every morning. His father likes playing football. His father does not(doesn&#39;t) like playing football. I went fishing yesterday. I did not(didn&#39;t) go fishing yesterday. 注:&ensp;(1) 当句子是一般过去时态时，在动词前面加didn&#39;t,动词恢复成原形； &ensp;(2) 当句子是一般现在时态，且主语是第三人称单数时，在动词前加doesn&#39;t，动词恢复成原形； &ensp;(3) 当句子是一般现在时态，且主语不是第三人称单数时，在动词前加don&#39;t。 三、肯定句变否定句专项练习。 table th:first-of-type { width: 50% } table th:nth-of-type(2) { width: 50% } 肯定句 否定句 He is my father. This is a cat. These are his books. David can swim. Stand up. There are some books and two pencils on the desk. We come from Shandong. Milli has breakfast at 7:30 in the morning. My parents like watching TV at night. I often play basketball with my friends. His brother likes swinmming and running. My mother and I visited my grandparents last week. I have many friends here. Tom went to Beijing last summer vacation. Jack likes playing football after school, too. Answers 肯定句 否定句 He is my father. He is not(isn&#96;t) my father. This is a cat. This is not(isn&#39;t) a cat. These are his books. These are not(aren&#39;t) his books David can swim. David can not(can&#39;t) swim. Stand up. Do not(Don&#39;t) stand up. There are some books and two pencils on the desk. There are not(aren&#39;t) some books or two pencils on the desk. We come from Shandong. We do not(don&#39;t) come from Shandong. Milli has breakfast at 7:30 in the morning. Milli does not(doesn&#39;t) have breakfast at 7:30 in the morning. My parents like watching TV at night. My parents do not(don&#39;t) like watching TV at night. I often play basketball with my friends. I do not(don&#39;t) often play basketball with my friends. His brother likes swinmming and running. His brother does not(doesn&#39;t) like swimming and running. My mother and I visited my grandparents last week. My mother and I did not(didn&#39;t) visit my grandparents last week. I have many friends here. I do not(don&#39;t) have many friends here. Tom went to Beijing last summer vacation. Tom did not(didn&#39;t) go to Beijing last summer vacation. Jack likes playing football after school, too. Jack does not(doesn&#39;t) like playing football after school, either.","categories":[{"name":"Education","slug":"Education","permalink":"http://shenguosai.github.io/categories/Education/"}],"tags":[{"name":"Children","slug":"Children","permalink":"http://shenguosai.github.io/tags/Children/"}]},{"title":"古诗词欣赏—20231127","slug":"古诗词欣赏—20231127","date":"2023-11-27T06:43:08.000Z","updated":"2023-12-01T03:47:07.576Z","comments":true,"path":"2023/11/27/古诗词欣赏—20231127/","link":"","permalink":"http://shenguosai.github.io/2023/11/27/%E5%8F%A4%E8%AF%97%E8%AF%8D%E6%AC%A3%E8%B5%8F%E2%80%9420231127/","excerpt":"表达随遇而安：时光清浅处，一步一安然。 表达岁月静好：山野万万里，余生路漫。日暮酒杯淡饭，一半一半 夸心上人美好：山有扶苏，隰（xí）有荷华。 想说坚韧不拔：冬青树上挂凌霄，岁晏花凋树不凋。 对于好朋友：半师半友半知己，半慕半尊半倾心。 乐观面对上火：时间煮雨，岁月缝花。以欢喜心，慢度日常。 琐碎诗意交织：手执烟火以谋生，心怀诗意以谋爱。 表达对另一半的爱意：日出有盼，日落有念。心有所期，忙而不茫。","text":"表达随遇而安：时光清浅处，一步一安然。 表达岁月静好：山野万万里，余生路漫。日暮酒杯淡饭，一半一半 夸心上人美好：山有扶苏，隰（xí）有荷华。 想说坚韧不拔：冬青树上挂凌霄，岁晏花凋树不凋。 对于好朋友：半师半友半知己，半慕半尊半倾心。 乐观面对上火：时间煮雨，岁月缝花。以欢喜心，慢度日常。 琐碎诗意交织：手执烟火以谋生，心怀诗意以谋爱。 表达对另一半的爱意：日出有盼，日落有念。心有所期，忙而不茫。 古人对万物的雅称： 太阳：扶光 月亮：望舒 梅花：疏影 风筝：纸鸢 圆月：冰轮 茄子：落苏 小草：柔甲 天河：星汉 天空：碧落 大地：坤灵 雪花：寒酥 风 ：扶摇 云 ：纤凝 雨 ：灵泽 茶 ：不夜侯 酒 ：忘忧君 你更喜欢谁的相思 纳兰性德：人生若只如初见，何事秋风悲画扇。 李清照：花自飘零水自流，一种相思，两处闲愁。 白居易：群埋泉下泥销骨，我寄人间雪满头。 辛弃疾：若教眼底无离恨，不信人间有白头。 温庭筠：玲珑骰子安红豆，入骨相思知不知。 李商隐：直道相思了无益，未妨惆怅是清狂。 王国维：最是人间留不住，朱颜辞镜花辞树。 欧阳修：泪眼问花花不语，乱红飞过秋千去。 卓文君：愿得一心人，自首不相离。 唐 寅：晓看天色暮看云，行也思君，坐也思君。 元 稹：曾经沧海难为水，除却巫山不是云。 李 白：相思相见知何日，此时此夜难为情。 李 煜：春花秋月何时了？往事知多少。 柳 永：衣带渐宽终不悔，为伊消得人憔悴。 苏 轼：十年生死两茫茫，不思量，自难忘。 古诗词中的表白： 三生清风三里路，步步春风再无你。（我终于失去你了） 我与春风皆过客，你携秋水揽星河。（我不喜欢你了） 既许一人以偏爱，愿尽余生之慷慨。（我这一生都会对你好，爱你） 半身风雨半身伤，半句别恨半句凉。（真的很难过） 无人与我立黄昏，无人问我粥可温。（孤单一人） 从此音尘各悄然，春山如黛草如烟。（以后各奔东西，不必联系） 苍天不解人情暖，冷眼看花尽是悲。（没人能够读懂我） 从此烟雨落金城，一人撑伞两人行。（我们在一起了） 古人拒绝表白： 一身清贫怎敢入繁华，两袖清风怎敢误佳人。（我配不上你） 枝上柳绵吹又少，天涯何处无芳草。（你追谁都行，别追我） 感郎千金意，惭无倾城色。（你很好，是我配不上你） 子非我良人，亦非我最新。（你不是我喜欢的类型） 心似流水不倦花，我如明月君勿恋。（你不要爱上我） 万水千山都是情，冥冥之中靠天定。（我们之间不合适） 落花有意随流水，流水无心恋落花。（你喜欢我，但我不喜欢你） 都兰之猗猎扬扬其香，不采而佩于兰何伤。（你是个好人，我不想伤害你） 用古文表达失恋： 【青铜】一别两宽，各自欢喜。 【白银】你有你的清欢渡，我有我的不归路。 【黄金】从此山水不相逢，莫道彼此长和短。 【钻石】柳絮随风各西东，物是人非事事休。 【王者】山河岁月空惆怅，今生今世已惘然。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"}]},{"title":"Hexo字数统计与阅读统计","slug":"Hexo字数统计与阅读统计","date":"2023-11-20T12:54:12.000Z","updated":"2023-11-20T13:25:13.794Z","comments":true,"path":"2023/11/20/Hexo字数统计与阅读统计/","link":"","permalink":"http://shenguosai.github.io/2023/11/20/Hexo%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E4%B8%8E%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1/","excerpt":"安装hexo-wordcount插件npm install hexo-wordcount --save 安装hexo-symbols-count-time插件npm install hexo-symbols-count-time --save 安装eslintnpm install eslint --save","text":"安装hexo-wordcount插件npm install hexo-wordcount --save 安装hexo-symbols-count-time插件npm install hexo-symbols-count-time --save 安装eslintnpm install eslint --save 在hexo配置文件中添加symbols_count_time配置语句123456symbols_count_time: symbols: true # 文字字数统计 time: true # 文章阅读时长 total_symbols: true # 站点总字数统计 total_time: true # 站点总阅读时长 exclude_codeblock: false # 排除代码字数统计 在主题配置文件中添加symbols_count_time配置语句1234567symbols_count_time: separated_meta: true # 是否另起一行(true的话不和发表时间等同一行) item_text_post: true # 首页文章统计数量前是否显示文字描述(本文字数、阅读时长) item_text_total: false # 页面底部统计数量前是否显示文字描述(站点总字数、站点阅读时长) awl: 4 # Average Word Lenth wpm: 275 # Words Per Minute（每分钟阅读词数 suffix: mins. 在主题配置文件中配置wordcount123456post_wordcount: # 字数统计 item_text: true # 是否显示文字 wordcount: true # 显示字数 min2read: true # 显示阅读时间 totalcount: true # 显示总数 seperated_meta: true # 是否分开 设置完成！","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"更换新电脑后，hexo无损重新部署","slug":"更换新电脑后，hexo无损重新部署","date":"2023-11-14T13:44:02.000Z","updated":"2024-01-05T01:22:47.358Z","comments":true,"path":"2023/11/14/更换新电脑后，hexo无损重新部署/","link":"","permalink":"http://shenguosai.github.io/2023/11/14/%E6%9B%B4%E6%8D%A2%E6%96%B0%E7%94%B5%E8%84%91%E5%90%8E%EF%BC%8Chexo%E6%97%A0%E6%8D%9F%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/","excerpt":"趁着双十一在京东￥499入手了樊想S500PRO的2T SSD固态硬盘。到货后就迫不及待的换下了原来笔记本里500G的老硬盘。然后发现换硬盘新装系统后各种软件的安装和配置都要重新来一遍。 下面记录下hexo的迁移过程。","text":"趁着双十一在京东￥499入手了樊想S500PRO的2T SSD固态硬盘。到货后就迫不及待的换下了原来笔记本里500G的老硬盘。然后发现换硬盘新装系统后各种软件的安装和配置都要重新来一遍。 下面记录下hexo的迁移过程。 首先将原硬盘的hexo目录拷贝到新硬盘。我自己的目录是D:\\99_Git\\blog。 配置hexo环境： 安装nodejs和git，nodejs安装好才可以使用npm安装hexo，git就是用来上传博客用的；（如果不希望多装软件可只安装git而不需要git bash） 如果可以将原来电脑中的C:\\User\\username\\.gitconfig文件和C:\\User\\username（斜体）\\.ssh\\目录拷贝到同目录下就不需要重新配置了。(其中username是自己电脑的用户名)如果没有就只能重新设置并生成ssh key文件了，命令如下： 123git config --global user.name &quot;username&quot;git config --global user.mail &quot;user mail address&quot;ssh-keygen -t rsa -C &quot;user mail address&quot; 进入到hexo部署文件夹，执行命令安装hexo和hexo-depolyer-git插件 12npm install hexo-cli -gnpm install hexo-deployer-git --save 然后这里会出现一个问题:我是使用vs code中的终端来操作的，怎么样也识别不了hexo命令，提示如下：（由于忘记截图了，网上找了张类似的） 解决方法可以通过访问“请参阅……”后面的链接查看，核心问题是power shell的安全策略，将hexo命令视为了不安全脚本，不允许执行。只需要放开权限就行。通过管理员权限运行power shell，然后输入命令：set-ExecutionPolicy RemoteSigned选择“Y”即可。然后就可以正常在VS Code的终端里使用hexo了。 碰到的第二个问题：上传时提示有换行符的问题，在执行hexo d后会出现整屏的提示信息，是我这个强迫症患者所无法忍受的。 解决方法：通过执行命令git config --global core.autocrlf false将默认的换行符转换功能去掉。 12345#提交时转换为LF，检出时转换为CRLF（默认）git config --global core.autocrlf true#提交和检出时均不做换行符转换（修改）git config --global core.autocrlf false 图床设置下载插件vs code的插件PicGo，配置方法网上有很多，但是需要注意一点在Picgo &gt; Pic Bed &gt; Github: Custom Url中需要填入图传链接格式为https://raw.githubusercontent.com/用户名/仓库名/分支名，一开始这个地方没有设置对对上传没有影响但是在博客中看不到图片。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"在自己搭建的hexo博客上发布文章","slug":"Hexo发布文章","date":"2023-11-13T01:19:15.440Z","updated":"2023-11-20T13:27:35.585Z","comments":true,"path":"2023/11/13/Hexo发布文章/","link":"","permalink":"http://shenguosai.github.io/2023/11/13/Hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/","excerpt":"在/source/_posts目录下建立.md文件并撰写内容；编辑文章时要在第一行中加上title，如果不按此格式来写的话在hexo博客中就会显示这篇文章没有名字。","text":"在/source/_posts目录下建立.md文件并撰写内容；编辑文章时要在第一行中加上title，如果不按此格式来写的话在hexo博客中就会显示这篇文章没有名字。 123---title: 文章题目--- 命名完成后，将终端当前目录更改为/source/_posts输入hexo g(完整命令为hexo generate)，生成静态文件；输入hexo s(完整命令为hexo server)，启动local服务器，主要用于本地预览。完成后打开浏览器输入http://localhost:4000，就会发现多了刚才写的那篇博客。输入hexo d(完整命令为hexo deploy)，将本地文件发布到github仓库上。 每次对hexo博客上的.md文件进行更改后都要重复步骤2，这样更改的内容才能在hexo博客上显示。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"Hexo搭建个人博客挂载Github(未完)","slug":"Hexo搭建私人博客挂载github","date":"2023-11-13T01:19:15.440Z","updated":"2023-11-20T13:27:22.919Z","comments":true,"path":"2023/11/13/Hexo搭建私人博客挂载github/","link":"","permalink":"http://shenguosai.github.io/2023/11/13/Hexo%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BDgithub/","excerpt":"一、准备工作1.GitGit官网下载下载完成后，双击安装包，选项全部默认，一路Next安装完成。测试安装成功，输入git --version显示版本信息即可。 12shenguosai@LAPTOP-FBGFH99L ~$ git --versiongit version 2.37.1","text":"一、准备工作1.GitGit官网下载下载完成后，双击安装包，选项全部默认，一路Next安装完成。测试安装成功，输入git --version显示版本信息即可。 12shenguosai@LAPTOP-FBGFH99L ~$ git --versiongit version 2.37.1 2.Node.jsNode官网下载下载完成后，双击安装包，选项全部默认，一路Next安装完成。测试安装成功，输入node -v显示版本信息即可。 12shenguosai@LAPTOP-FBGFH99L ~$ node -vv18.15.0 3.Gitee或GitHub(目前只成功挂载GitHub@2023&#x2F;8&#x2F;3)准备Gitee或GitHub账号，这个是用来托管的，可以不需要自己的服务器和域名就可以拥有自己的博客。Gitee官网GitHub官网注册完成后，创建一个仓库，然后就可以将hexo挂载到这个仓库中了。创建仓库的时候用 YourName.github.io 或 YourNama.gitee.io ，这样后面托管的域名比较好记。 二、博客搭建1.Hexo下载新建一个文件夹作为博客的顶级目录。打开cmd，进入到新建的文件夹目录，输入npm install hexo-cli -g以安装hexo。 2.Hexo初始化安装完成后，输入hexo init blog进行初始化。注：blog就是步骤1中新建的目录。初始化后，文件夹下就会有下方形式的目录结构。设置好图床后添加 3.启动博客使用终端将目录进入到blog下 12345678910111213141516171819202122shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ latotal 245drwxrwxr-x 1 shenguos 197121 0 Aug 2 18:38 .drwxrwxr-x 1 shenguos 197121 0 Aug 2 15:13 ..drwxrwxr-x 1 shenguos 197121 0 Aug 3 00:39 .deploy_gitdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 .github-rw-rw-r-- 1 shenguos 197121 82 Aug 2 15:14 .gitignore-rw-rw-r-- 1 shenguos 197121 0 Aug 2 15:14 _config.landscape.yml-rw-rw-r-- 1 shenguos 197121 2582 Aug 3 00:01 _config.yml-rwxrwxr-x 1 shenguos 197121 352551 Aug 3 00:38 db.jsondrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:34 node_modules-rwxrwxr-x 1 shenguos 197121 92731 Aug 2 15:34 package-lock.json-rw-rw-r-- 1 shenguos 197121 655 Aug 2 15:34 package.jsondrwxrwxr-x 1 shenguos 197121 0 Aug 3 00:08 publicdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 scaffoldsdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 sourcedrwxrwxr-x 1 shenguos 197121 0 Aug 2 23:53 themesshenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ hexo sINFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. 本地静态网页就启动了，在浏览器输入http://localhost:4000/就能看到如下网页。设置好图床后添加 三、挂载到GitHub上1.挂载须知a) git配置12git config --global user.name &quot;shenguosai&quot; //用户名git config --global user.email &quot;xxx@xx.com&quot; //邮箱 用户名和邮箱根据注册github的信息自行修改。 b) SSH密钥挂载到GitHub上时，为了方便，我们要创建ssh密钥，使用ssh连接更为方便的推送。方法：ssh-keygen -C &quot;xxxx@xxx.com&quot;就会生成密钥，Linux用户在~/.ssh/中，Windows用户在C:/Users/xxx/.ssh/中。在github上绑定公钥:Settings-&gt;SSH and GPG keys-&gt;SSH keys-&gt;New SSH key将生成的id_rsa.pub中的文本内容复制到Key框中，点击Add SSH key。此处说明需要添加图片，设置好图床后添加。输入ssh -T git@github.com，如果如下所示，出现你的用户名即配置成功。 123shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ ssh -T git@github.comX11 forwarding request failed on channel 0Hi shenguosai! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. c) Token2.开始挂载打开博客目录下的.config.yml(hexo的配置文件)，下拉到最下方。 1234deploy: type: git repo: https://ghp_xxxxxx@github.com/shenguosai/shenguosai.github.io.git branch: master ghp_xxxxxx即使上面申请的token。然后输入hexo cl清除缓存，完成代码为hexo clean。清除缓存后输入hexo g生成静态网页，然后输入hexo d推送到GitHub。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"Elecom MR-C18BK 读卡器","slug":"Elecom-MR-C18BK-读卡器","date":"2023-09-13T11:40:45.000Z","updated":"2023-11-20T13:27:00.777Z","comments":true,"path":"2023/09/13/Elecom-MR-C18BK-读卡器/","link":"","permalink":"http://shenguosai.github.io/2023/09/13/Elecom-MR-C18BK-%E8%AF%BB%E5%8D%A1%E5%99%A8/","excerpt":"这两天帮父亲新接手的球馆弄监控，花了一番功夫终于把已经停产的十几年前的监控摄像头搞定，发现里面的TF卡却坏掉了。于是在京东上买了BanQ的Joy联名TF卡，买来之后插上读卡器发现无法识别，申请换新之后还是无法识别，这才开始怀疑自己的读卡器是不是有问题。但是前两天刚试过家里的4G的TF卡读取是没有问题的。于是从同事那里借来较新的读卡器发现成功读出来了，就怀疑自己应该也是十几年前买的读卡器是不是不支持大容量TF卡，于是到主页上查找了一番，发现Micro SD卡容量最大支持到16GB。","text":"这两天帮父亲新接手的球馆弄监控，花了一番功夫终于把已经停产的十几年前的监控摄像头搞定，发现里面的TF卡却坏掉了。于是在京东上买了BanQ的Joy联名TF卡，买来之后插上读卡器发现无法识别，申请换新之后还是无法识别，这才开始怀疑自己的读卡器是不是有问题。但是前两天刚试过家里的4G的TF卡读取是没有问题的。于是从同事那里借来较新的读卡器发现成功读出来了，就怀疑自己应该也是十几年前买的读卡器是不是不支持大容量TF卡，于是到主页上查找了一番，发现Micro SD卡容量最大支持到16GB。 ![20230913194643](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194643.png) ![20230913194802](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194802.png) ![20230913194820](https://raw.githubusercontent.com/shenguosai/MyPic/img/img/20230913194820.png) 商品说明链接","categories":[{"name":"Electronic Equipments","slug":"Electronic-Equipments","permalink":"http://shenguosai.github.io/categories/Electronic-Equipments/"}],"tags":[]},{"title":"无门关·平常是道","slug":"无门关·平常是道","date":"2023-09-13T01:11:08.000Z","updated":"2023-11-20T13:26:45.590Z","comments":true,"path":"2023/09/13/无门关·平常是道/","link":"","permalink":"http://shenguosai.github.io/2023/09/13/%E6%97%A0%E9%97%A8%E5%85%B3%C2%B7%E5%B9%B3%E5%B8%B8%E6%98%AF%E9%81%93/","excerpt":"无门关·平常是道 南宋 慧开 春有百花秋有月，夏有凉风冬有雪。 若无闲事挂心头，便是人间好时节。 善是青松恶是花，看看眼前不如它。 有朝一日遭霜打，只见青松不见花。 面上无嗔是供养，口里无嗔出妙香。 心中无嗔无价宝，不断不灭是真常。 佛在灵山莫远求，灵山只在汝心头。 人人有个灵山塔，好向灵山塔下修。","text":"无门关·平常是道 南宋 慧开 春有百花秋有月，夏有凉风冬有雪。 若无闲事挂心头，便是人间好时节。 善是青松恶是花，看看眼前不如它。 有朝一日遭霜打，只见青松不见花。 面上无嗔是供养，口里无嗔出妙香。 心中无嗔无价宝，不断不灭是真常。 佛在灵山莫远求，灵山只在汝心头。 人人有个灵山塔，好向灵山塔下修。 这是一首禅诗，诗名为《无关门·平常是道》，出自无门关(又称《禅宗无门关》)第十九则，南宋无门慧开禅师撰。 释义：春天有百花，夏天有凉风，秋天有明月，冬天有瑞雪，但最重要的还是一个人心上没有那些人世间的俗事(功名利禄等等)，可以开开心心地欣赏这美景，这才是好季节。 原文如下： 《无门关》十九 平常是道 南泉因赵州问，如何是道。泉云，平常心是道。州云，还可趣向否。泉云，拟向即乖。州云，不拟争知是道。泉云，道不属知，不属不知。知是妄觉，不知是无记。若真达不拟之道，犹如太虚阔然洞豁，岂可强是非也。州于言下顿悟。 【无门曰】 南泉被赵州发问，直得瓦解冰消分疏不下。赵州纵饶悟去，更参三十年始得。 【颂曰】 春有百花秋有月，夏有凉风冬有雪，若无闲事挂心头，便是人间好时节。 译文：赵州问南泉：“什么是道？”南泉回答：“平常心是道。”赵州说：“可还有什么趣向吗？”南泉说：“只要一拟定方向，就背离这个道了。”赵州说：“如果不预知方向，又怎么知道这就是道呢？”南泉说：“道不属于知，也不属于不知，知是妄觉，不知是无记，如果真的到达不预知的道，才会像太虚一样，阔然洞豁。这道又怎能预先拟定，强加以它是或非呢？”赵州听完这番话后，当下顿悟。 【评唱】 无门说：“南泉被赵州发问，直到赵州的疑团瓦解冰消。话虽这么说，赵州纵然当下已顿悟，可是非得再参上三十年不可。” 【颂曰】 春天百花盛开，秋夜月色皎洁。夏天凉风徐徐，冬天白雪皑皑。一个人只要没有闲杂的事情挂在心头，那便是人间最好的时节。 在此基础上衍生出谒子： 无门关·平常是道 南宋 慧开 春有百花秋有月，夏有凉风冬有雪。 若无闲事挂心头，便是人间好时节。 善是青松恶是花，看看眼前不如它。 有朝一日遭霜打，只见青松不见花。 面上无嗔是供养，口里无嗔出妙香。 心中无嗔无价宝，不断不灭是真常。 佛在灵山莫远求，灵山只在汝心头。 人人有个灵山塔，好向灵山塔下修。 南宋高僧慧开禅师，杭州钱塘人，俗姓梁，生於宋孝宗淳熙十年。因苦参“无”字话头而开悟，慧开又特别着重“无”字法门，每天对着“无”字苦苦参究，故成为无门和尚。 慧开在法堂内经行，边走边参详“无”字话头。在夕阳西下、夜幕沉沉的寂寥中，从遥遥的斋堂那一头，传来一阵接一阵绵绵密密的鼓声，豁然如排山倒海般，慧开胸中久远以来的疑团突然被鼓声撞散，顿时消失，豁然而悟。慧开禅师心中一片大光明，高唱谒颂： 青天白日一声雷，大地群生眼豁开。 万家森罗齐稽首，须弥勃跳舞三台。 一派天淡云闲列长空，丽日高照大地春的气象。慧开就此开悟。他的很多诗歌都以富含禅理禅机，成为佛诗佳作，在禅门中代代相传。他的《饭熟已多时》便是其中的代表，诗云： 只为分明极，翻令所得迟。 早知灯是火，饭熟已多时。 有一年，京城大旱，理宗请慧开禅师登坛祈雨，慧开禅师持咒祝祷之后，默然返回寺中，理宗急忙遣派内侍前来询问，祈雨的结果如何？禅师淡然回答说：“寂然不动，感而后通。”语音方毕，天空俄然乌云密布，大雨倾盆注下，解除了已久的大旱，立下大功德。理宗因此颁赐慧开禅师金澜法衣，敕封为佛眼禅师，以示褒扬。就佛家而言，佛眼即是佛，而佛就是佛眼，可见对慧开禅师的评价之高。 无门和尚将历代禅宗之公案甄选汇编，选择其中四十八则，纂集为脍炙人口之《无门关》一书，并自作序文道： “大道无门，千差有路； 透得此关，乾坤独步。” 并且把赵州禅师“狗子无佛性”的公案列为第一则，深得六祖慧能大师“无念，无相，无性”的思想要旨。其第十九则诗，谒朗朗上口，最为佛弟子所爱颂： “春有百花秋有月，夏有凉风冬有雪， 若无闲事挂心头，便是人间好时节。” 慧开禅师晚年，倦于槌拂，于西湖边卓庵隐居。虽然如是，前来参学者犹众。 “三十三天天外天，九霄云外有神仙。 神仙本是凡人做，只怕凡人心不坚。” 慧海禅师开示说：“世人很难做到一心一用，他们在利害得失中穿梭，囿于浮华的宠辱，产生了‘种种思量’和‘千般妄想’。”这是他们生命中最大的障碍，因此在生命的表层停留不前。 南宋理宗定元年四月命工匠砌塔，八日塔龛砌成，禅师自撰龛语道： “地水火风，梦幻泡影。 七八十年，一弹指顷。” 书谒毕，跏跌而逝。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"}]},{"title":"如果你是一个普通的父母","slug":"如果你是一个普通的父母","date":"2023-09-11T01:14:04.000Z","updated":"2023-11-20T13:26:33.717Z","comments":true,"path":"2023/09/11/如果你是一个普通的父母/","link":"","permalink":"http://shenguosai.github.io/2023/09/11/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E7%88%B6%E6%AF%8D/","excerpt":"网上看到了一段话，非常治愈，非常鸡汤。大家都说是从人民日报看到的，但是我搜索了一圈也没看到哪一期的人民日报上刊登了这样的文字。文字是好文字就好，何必非要冠以噱头，互联网时代让信息变得巨量却碎片，周末在家辅导孩子功课时孩子非要在网络上搜索知识，经过好一通解释才说服孩子试着使用工具书来查阅资料。互联网给我们带来无穷便利的同时也在剥夺人类的自主能力，让人类的依赖性变得更强。正如“奶头乐”阴谋，资本利用了人类的劣根性让普通人为其辛劳一生却不自知。所以说无论什么主义社会，只要有统治阶级，就一定会想方设法的愚化群众。是不是又到了开启民智的时期？","text":"网上看到了一段话，非常治愈，非常鸡汤。大家都说是从人民日报看到的，但是我搜索了一圈也没看到哪一期的人民日报上刊登了这样的文字。文字是好文字就好，何必非要冠以噱头，互联网时代让信息变得巨量却碎片，周末在家辅导孩子功课时孩子非要在网络上搜索知识，经过好一通解释才说服孩子试着使用工具书来查阅资料。互联网给我们带来无穷便利的同时也在剥夺人类的自主能力，让人类的依赖性变得更强。正如“奶头乐”阴谋，资本利用了人类的劣根性让普通人为其辛劳一生却不自知。所以说无论什么主义社会，只要有统治阶级，就一定会想方设法的愚化群众。是不是又到了开启民智的时期？ 话题扯了有点远，这篇分享的主要目的还是来分享这段治愈的文字： &emsp;&emsp;如果你是一个普通的父母，没有什么优秀的资源和太多的文化，不知道该怎么教育孩子，那我们就不如多鼓励他，多认可孩子，多表扬孩子，多理解和支持孩子，不要把自己的认知、焦虑、恐惧、愤怒和委屈转移给孩子，这就是对孩子最好的教育。&emsp;&emsp;孩子若是平凡之辈，那就承欢膝下，若是出类拔萃，那就让他展翅高飞，接受孩子的平庸，就像孩子从来没要求父母一定要多么得好一样……记住了:穷不怪父，孝不比兄，苦不责妻，气不凶子，送给自己一起共勉。","categories":[{"name":"分享","slug":"分享","permalink":"http://shenguosai.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"育儿","slug":"育儿","permalink":"http://shenguosai.github.io/tags/%E8%82%B2%E5%84%BF/"}]},{"title":"SPICE简史","slug":"SPICE简史","date":"2023-09-04T07:10:04.000Z","updated":"2023-12-20T03:32:11.574Z","comments":true,"path":"2023/09/04/SPICE简史/","link":"","permalink":"http://shenguosai.github.io/2023/09/04/SPICE%E7%AE%80%E5%8F%B2/","excerpt":"如今，SPICE广泛应用在仿真模拟电路(运放、基准、电源、AD&#x2F;DA等)，混合信号电路(PLL、SRAM&#x2F;DRAM，高速接口)，精确数字电路(延时、时序、功耗、漏电流等)，建立SoC的时序及功耗单元库，分析系统级的信号完整性，等等。作为最早的电子设计自动化软件，它今天仍然是最重要的软件之一。可以说，没有SPICE，就没有电子设计自动化这个产业，也就没有今天的半导体工业。它的市场超过上亿美元。所有这一切，都是从1970年加州大学伯克利分校电机工程系的一堂课开始的。","text":"如今，SPICE广泛应用在仿真模拟电路(运放、基准、电源、AD&#x2F;DA等)，混合信号电路(PLL、SRAM&#x2F;DRAM，高速接口)，精确数字电路(延时、时序、功耗、漏电流等)，建立SoC的时序及功耗单元库，分析系统级的信号完整性，等等。作为最早的电子设计自动化软件，它今天仍然是最重要的软件之一。可以说，没有SPICE，就没有电子设计自动化这个产业，也就没有今天的半导体工业。它的市场超过上亿美元。所有这一切，都是从1970年加州大学伯克利分校电机工程系的一堂课开始的。 SPICE的诞生 时间回到1970年，在加州大学伯克利分校电机工程与计算机科学系(UC Berkeley, Dept. EECS)，Ron Rohrer教授给7个研究生上“电路综合”课。Rohrer教授那时刚刚从仙童半导体公司(Fairchild Semiconductor)返回伯克利，没有时间准备教材。所以，在第一堂课，他就宣布：学生们一起写一个电路仿真程序。他跟系里管教学的助人Don Peterson教授达成一个协议：只要Peterson教授认可学生们写的仿真程序，他们就全部通过。否则的话，他们就全部不及格。这七个学生中有一个还是从机械系来的。他感到十分委屈：教授啊，俺啥电路都不会，俺就是来学电路的。这倒好，电路没学到，反而要去写电路仿真程序。这可咋办啊？Rohrer教授想了想，说没关系。虽然电路你不懂，但你的数值分析不是很厉害吗？OK，你就负责解方程这块吧。最后的结果证明了恰恰是学生们自己开发的解稀疏矩阵的模块是一个亮点，它使得可处理的电路规模成倍的增大。为什么这么说呢？如果你学过数值方法，你就知道一般解方程组用的是高斯消元法。它的时间复杂度是$O^{(n*3)}$。也就是说，电路规模增大一倍，你的运算时间就要增大到8倍。当时的电路仿真程序最多可以仿真10个晶体管。超过这个数，不是你的预算被烧没了，就是你的耐心被耗没了。但是，学生们注意到从电路搭出来的矩阵有个特点，就是它的稀疏性。一个电路矩阵里很多元素都是0(意味着两个电路节点之间没有连接关系)。既然是0，那就没有必要去存储和计算它了。这样一来，存储量和计算量大大减少了。 很多SPICE里面的基本要素都来自于Rohrer教授指导的这一堂电路分析课的项目，包括上面讲到的解稀疏矩阵的模块，还有隐式积分算法的使用使得瞬态分析更加稳定。并且，程序里加入了自带的半导体器件模型，用户只要给出一组模型参数，用不着自己提供器件模型的FORTRAN模块了。这7个学生推举Laurence Nagel为代表，由他负责向Peterson教授汇报结果。这个结果就是CANCER。没错，它的意思就是“癌症”。它是“不包括辐射的非线性电路计算机分析”(“Computer Analysis of Nonlinear Circuits, Excluding Radiation”)的缩写。不要忘了，这是在一个叛逆的时代。当时绝大部分的电路分析软件来自于大公司与政府&#x2F;军方的合同开发。在冷战和核威胁的环境下，政府&#x2F;军方要求这些软件都具有分析电路抗辐射的能力。伯克利是反战的大本营，学生们自己开发的程序当然要跟政府&#x2F;军方的要求对着干了。有同学可能会问：为什么要开发一个电路仿真程序？呵呵，要知道在这之前，人们分析电路，要么是用笔和纸，要么就要搭电路板(Bread Board)。Peterson教授就被学生们称之为“信封教授”，因为他认为电路分析用个信封的背面来做就足够了。但随着电路规模的增大，用笔纸变得越来越不可能，搭电路板又不能精确反应芯片上的电路特性，而且费用也越来越高。因此，用软件来做仿真就变得日益迫切了。 当课程结束，Nagel向Peterson教授汇报CANCER之后，Peterson教授给予了认可。学生们都通过了！CANCER成了Nagel的硕士论文课题。它在伯克利被很多本科生及研究生使用，并且给了大量的建议去改进它。呵呵，都说学生是最好的“小白鼠”，这话果然不假(再插一段话：基于这堂课的巨大成功，Rohrer教授后来又用同样的办法试了几堂课，但都失败了。他自己总结说，是因为有Nagel，伯克利的那堂课才成功了。所以，如果没有Rohrer教授那样的功力和Nagel那样天分的学生，SPICE也不可能从一堂课里诞生出来。) 到了1971年的秋天，Nagel在伯克利又开始了他的博士生生活，这一回是在Peterson教授的指导下了。(在这之前，Rohrer教授离开了伯克利到工业界去发展。原因嘛，据说Rohrer教授与Peterson教授在是否要公开CANCER的源代码上有不同意见。Rohrer教授后来又回到了学术界，在卡内基-梅隆大学(CMU)做教授，并指导开发了AWE，这是后话。) Peterson教授给Nagel的第一个任务是给程序起个新名字。确实，CANCER太难听了，谁都不喜欢。Nagel花了天知道多长时间才想出来这样好听的，也就是我们现在还在用的名字：SPICE(Simulation Program with Integrated Circuit Emphasis)。(所以，如果你要写一个新程序，创建一个新公司，生一个小孩，一定要给他&#x2F;她起个好听的名字。) 1971年被正式认定为SPICE诞生的年份。 Laurence Nagel当年在伯克利的照片 Ron Rohere教授 Don Peterson教授 SPICE还是开源代码的先驱。当时也有开源代码，但都没有太大的商业价值。SPICE就不同了。有人已经看到它的商业价值，但Peterson教授坚持要把代码开源(我们都得真心的感谢Peterson教授)。任何人只要花20美元的手续费，就可以得到SPICE的源代码(当然，在冷战时期，SPICE被禁止出口到政府认为的“共产国家)。有人会问，那这样一来，伯克利是不是损失了一大笔钱呢？事实并非如此。伯克利的SPICE帮助数字设备公司(DEC)卖出了很多台VAX机。反过来，DEC给伯克利电子系捐赠了1800万美元(这可是二十年年的数目，考虑到通货膨胀，你可以想象现在值多少钱)。这么多钱可不是一个学校卖代码能获得的。所以，做好事终究还是会得到好报的。 SPICE2和SPICE3 在70年代初期，伯克利电子系用的计算机是CDC6400大型机，它的运算能力相当于286(时钟频率是10MHz，可它的成本是六百万美元。再看看今天你手中的iphone，它的时钟频率超过1GHz，成本不到600美元——这是100万倍性价比的差别！)分给每个学生的主内存白天为256KB。到了晚上人少，你就可得到384KB。运行一个不算太大的电路仿真，用Nagel的话说，就像把你11码大的脚穿进婴儿的鞋里——你得想尽一切办法节省内存。能仿真的最大的电路规模也就是25个双极型晶体管(相当于50个电路节点)。而且，那时候SPICE还只有双极型晶体管模型。71年的秋季，从贝尔实验室来到伯克利的David Hodges教授带来了第一个MOSFET模型：Shichman-Hodges模型。如果你用过SPICE(并且年头足够多的话)，你应该知道这就是Level1 MOSFET模型。它是所有MOSFET模型的鼻祖。 1975年Nagel从伯克利博士毕业。他的论文 “SPICE2:A COMPUTER PROGRAM TO SIMULATE SEMICONDUCTOR CIRCUITS”，成为了EDA行业被引用最多的文章。 SPICE2这个版本基本上奠定了今天电路仿真程序的基石，其中包括：改进的节点分析法(Modified Nodal Analysis)，稀疏矩阵解法(Sparse Matrix Solver)，牛顿-拉夫逊迭代(Newton-Raphson Iteration)，隐形数值积分(Implicit Numerical Integration)，动态步长的瞬态分析(Dynamic Time Step Control)，局部截断误差(Local Truncation Error)，等等——说太多技术细节了，还是接着讲故事吧。 Nagel博士论文的封面 下载这篇论文：SPICE2:A COMPUTER PROGRAM TO SIMULATE SEMICONDUCTOR CIRCUITS 如果你想了解SPICE的核心秘密，就下载一份好好读读吧！ 最早的SPICE2没有用户界面。它的运行是批处理方式。也就是说，你准备好了你的电路描述和仿真命令，就把它们提交给主机系统里。然后呢？然后你就可以回家了。因为你的几十(百)个同事也在做着同样的事情。所以，等第二天早上上了班再看结果吧！ SPICE2的输入是用打卡。你可能会问：什么是打卡啊？呵呵，祝贺你年纪够小。对那些年过半百的人，最初接触到的计算机输入界面就是像下面这样的卡： IBM Punch Card 你把你的电路描述及仿真命令打在一叠这样的卡上，然后放到读卡机里。你可能听说过SPICE的输入叫“SPICE DECK”，这个名字就是从这叠卡来的。 SPICE2的输出是行打印机。是的，就是用下面这样的打印机打出仿真结果在纸上(想象一下那时消耗了多少纸张)。 Fujitsu FACOM 655B Line Printer 你也可以打印输入输出的信号波形。每个波形是用不同的字符画的。像下面这样(看着是不是很粗糙呀)： 有同学读SPICE手册时会看到一个奇怪的选项叫“NOPAGE”。这是因为SPICE的输出在页与页之间的折线处会加入一个分页符，流出空白。这个选项就是要求不要停止打印的。这样一来，波形就不会因为换页而在页与页之间断掉了。随着行打印机的消失，这个选择项也进入了历史。后来SPICE2的输入&#x2F;输出也进化成了文件输入&#x2F;出。像下面这样： Nagel毕业后去了贝尔实验室。从此以后，SPICE2的改进就由Nagel的室友，Ellis Cohen，继续进行下去。Ellis是个计算机编程能手。用当时周围学生的话说，他就是一个长成人形的计算机。是他(以及后来的Andrei Vladimirescu和Sally Liu)把学校里开发的程序SPICE改造成了实用的SPICE2G6。在SPICE的早期开发中，他是个无名英雄。今天工业界里的很多商业SPICE就是基于SPICE2G6开发出来的。 到了八十年代，SPICE2已经遍及了各个大学。但它的问题也显现了出来：FORTRAN代码太难维护，加新的器件模型需要改动的地方太多，等等。在此同时，C作为一种新的程序语言正方兴未艾。于是，用C语言重新写SPICE就被提到了议事日程上来。这个任务被伯克利的Thomas Quarles在89年完成了。比起SPICE2来，SPICE3增加了用户界面，你可以使用命令，甚至命令串来控制程序。另外，还增加了图形界面看波形。更重要的是，SPICE3的程序构架更加清晰，更加模块化。维护及修改起来更加容易。八十年代也是计算机硬件突飞猛进的时代：大型机(mainframe)被工作站(workstation)取代。UNIX及架构在它上面的C-shell和X-window成为软件开发及应用的基本框架。另外，个人电脑(PC)也越来越普及。这些都为SPICE的广泛应用打下了坚实的基础。 Quarles论文封面 同样，你可以用这里的链接下载 Quarles的论文。 下面是SPICE3(版本3f5)的执行语句，注意它是交互式的。每一个“Spice-&gt;”后面是一个spice3的命令。不如“source”就是把电路读入，“run”就是运行，“display”就是显示，“quit”就是退出。 SPICE3自带了一个图形模块nutmeg。下面是nutmeg显示的波形，是不是比SPICE2的行打印的字符波形好看多了？ 自从上世纪90年代后，学术界SPICE的发展基本就停止在SPICE3f5这个版本了。这是不是意味着SPICE停滞不前了呢？非也。至少在两个方向上SPICE还在一直发展：一个是器件模型(特别是MOSFET模型)，另一个是商业SPICE程序。(这里值得提一下，有一批SPICE的爱好者及高校把SPICE3f5接过来，并整合了其它几个开源软件(xspice, cider, gss, adms 等)，建成了ngspice。Ngspice也在缓慢的进化着，但比起商业SPICE进化的速度慢多了。你可以在 sourceforce 上找到 ngspice，也可以去 ngspice 的主页上去查看。 SPICE中器件模型的演变 SPICE里面自带了很多模型。像无源元件电阻、电容、电感等等，以及有源器件二极管、双极管等。但花样最多的、变化最频繁的、复杂度最高的，当属MOSFET的模型了。这主要是因为从七八十年代以后，MOSFET的工艺因为它的低功耗，高集成度而变成了主流。那时候还是个半导体工业百花争鸣的年代。很多半导体公司如雨后春笋般的冒出来(就像现在的社交媒体公司一样)。几乎每一家公司都在工艺及器件上有点自己的绝活，所以集成电路公司大多是个独立器件制造商(IDM)。这就造成了MOSFET的模型也层出不穷。谁家的SPICE支持的MOSFET模型越多，谁的SPICE用户群就越大。 前面我们说过SPICE2中加上了MOSFET Level1的模型。等到SPICE3出来的时候，里面已经加入了Level2及Level3模型。到了九十年代，又加入了著名的BSIM(Berkeley Short-channel IGFET Model)模型。可以这样说，现在所有的Foundry用的模型都来自于BSIM家族。为什么在众多MOSFET模型中BSIM胜出了呢？ 我们知道，SPICE是用来解含有非线性器件的电路方程的。解非线性方程的一个有效方法就是牛顿迭代–把非线性方程在某个点给它线性化，然后逐次逼近最终解。这个过程有点像两个宇航飞船对接–如果对方的接口在你的左边，你就往左偏一下。如果你偏多了，对方的接口在你的右边了，你就再稍往右偏点，知道最后两个接口对准锁定。但这里面又个要求：就是非线性曲线的一阶导数要连续。如果不连续的话，就好像喝醉酒的人来控制飞船对接，忽左忽右，或者根本就掉过头来，布置东南西北，上下左右了，如何能对接上呢？不幸的是，很多早期的MOSFET模型(包括Level1、2、3)都有这个问题–模型的电流曲线的一阶导数在工作区域内不连续。这是因为人为的把器件分成了不同的工作区域。不同区之间能保证电流连续已经不错了，哪还去管它的导数呢！这样做的后果就像管对接的人喝醉了酒，没法瞄准目标，最后导致SPICE不收敛 (Non-convergence)，或时间步长太小(Time Step Too Small–这有很大可能也是不收敛造成的)。 早期的BSIM模型还保留了工作区的概念。但在不同的区域之间加入了平滑过渡曲线，以保证电流曲线及其一阶导数的连续性。在它后来的版本中，就彻底抛弃了工作区域的观念–干脆只用一个(连续且可导)曲线来代表整个工作区域里的特性。这就从根本上解决了不连续的问题。BSIM家族中最成功的代表是BSIM3v3(HSPICE中的Level49)和BSIM4v5(HSPICE中的Level54)。从此以后，再也没有其他的模型能出其右。它们俩也是工业界的MOSFET器件模型标准。BSIM3v3跨越了亚微米的工艺(0.3微米至0.13微米，大致从1993年到2000年)，BSIM4跨越了深亚微米到纳米的工艺(90纳米至20纳米，大致从2002年到2012年)。 你可能会问：这么好的器件模型是谁做的？猜一下–对了，还是伯克利。是伯克利电子系器件模型小组。它的掌门人就是胡正明教授(Pref. Chenmin Hu)。 今天的SPICE开发者要感谢胡教授。如果BSIM不是工业标准，那你就得像HSPICE一样加几十上百个MOSFET模型。不光工作量大，容易出错，还有很多内部的模型人家还不愿意给你呢(参见下面Smart-Spice的故事)。而现在，你只要加一、二个开源的BSIM标准模型就可以覆盖绝大部分用户了。 有同学要问：现在的最新工艺不是已经到了16纳米、14纳米，以致10纳米，那这些工艺的器件结构与模型又是什么呢？答案已经有了：还是胡教授的小组开发的FinFET(也叫3维FET)模型。实际上，早在99年胡教授就发表了FinFET的文章。因此他也被称作FinFET之父。他同时是美国和中国的科学院士。同学，如果你的一生中能达到以上其中的任何一项，是不是就可以笑傲江湖了呢? 就像半导体工艺由简到繁的过程一样，MOS器件模型也从Level1的几个公式/几十行代码，发展到BSIM的几百个公式/上万行代码。这里值得提出的一点，与BSIM3/BSIM4模型不同的是，FinFET模型不是用C语言，而是用Verilog-A语言写的。这直接导致了把它加到SPICE3中的困难。虽然很多商业SPICE已经支持Verilog-A，但现在开源的SPICE3却还没有做到(这里插一句：基于SPICE3的ngspice当中包含了支持Verilog-A的开源编译器ADMS。但要做到完全自动编译FinFET模型这样重量级的模块还有一段路要走)。也就是说，虽然FinFET模型是开源的，但现在它的仿真载体并不开源。这种现象与早期的SPICE研发反了过来。现在学术界落到了工业界的后面。看到这儿，学术界的同学是不是要深思一下呢? 商业SPICE的演变 前面我们提到当CANCER出来的时候就有人意识到了它的商业价值。毫无疑问，SPICE的出世必定会有人把它商业化。事实却是如此。八九十年代是商业SPICE出现的高峰期。至少有几十个SPICE的变种冒出来。有的获得了巨大成功，有的毫无声息的消失了，有的还在惨淡经营着。同学，如果你想创业，这里面有太多的经验和教训了。 HSIPCE 先来说说HSPICE，记得我们前面讲过的批处理运行吧。在当时的大公司里，这是电路仿真标准的运行方式，但这么做的效率太低了。设计者需要尽量短的时间看到仿真结果，然后修改电路参数再做仿真。如此多次以达到最佳结果。有两个孪生兄弟Shawn Hailey及Kim Hailey，当时都在AMD做设计，看到了这里面的问题。与其让几百个客户排队等一个银行柜员，为什么不让每一个客户都有一个柜员呢？问题就是商机。他们决定跳出来开自己的公司。于是78年，Meta-Software成立了，他们把改进的SPICE变种取名为HSPICE(你现在明白了吧，为什么要以H开头？这可是兄弟俩姓的第一个字母)。他们把SPICE2从大型机移植到了VAX小型机上，后来又移植到Sun工作站上。就这样，借着计算机硬件改朝换代的东风，越来越多的公司开始使用HSPICE了。直到如今，这个HSPICE成了工业界的“金标准”。只要你做个仿真器，人们一定会跟HSPICE比结果的。而且，在SPICE前面加一个字母成了时尚。到今天，有人开玩笑说A-SPICE到Z-SPICE都已经被人用过了(当然，HSPICE仍然是最出名的)。 有人可能会问：要是我当时也把SPICE移植到小型机上，我是不是也可以成功？呵呵，成功的要素有很多，光用一条是远远不够的。比如说用户的反馈就是相当重要的一条。举个例子，HSPICE是第一个把器件模型库卡(.LIB)和结果测量卡(.MEASURE)做进去的。像这样的例子还有很多。这些虽然不是什么革命性的技术创新，但它们很实用，能大大提高用户的使用效率。甚至某些时候，对用户来说，这样的小改进比创新的算法更重要。 前面我们提到了七八十年代有很多的MOSFET器件模型。HSPICE把能拿到的器件模型都收进去了。所以，HSPICE的MOSFET器件模型是最全的(不信的话，你就去拿本HSPICE的MOSFET模型手册读一下–注意，它是一本独立的手册。也就是说，光是它里面的七八十个MOSFET模型就是一本书了)。但这样还不够，Meta还开发了自己的MOSFET模型：Level28.他们跟用户的工艺线紧密联系。在工艺线流片之前，相应的器件模型参数已由芯片加工厂(Foundry)提供给芯片设计者了。如果你是设计者，你还能不用它吗？这样做的结果直接导致了HSPICE用户群急速的扩大。就像滚雪球一样，一旦超过了临界质量(critical mass),它自己就会越滚越大。据Meta-Software的人说，在公司巅峰的时候，它们的销售员就是一台传真机。你只要把传真机号码告诉客户，他们就把订单发来啦(那时候的钱真好赚啊，当然公司里肯定不止一台传真机)。从78年成立到96年这18年期间，公司一共卖出了一万一千多套HSPICE，它的年成长率达到了25%~30%。 1996年Meta-Software被Avant收购，到2001年，Avant又被Synopsys收购。关于Avant的故事有很多。这个公司(包括它的头儿 Jerry Hsu)就像EDA业界的一匹黑马。它的故事足可以写另一个长篇了。 Meta-Software兄弟中的老大，Shawn Hailey，已于2011年去世。在此之前，他把自己的名字改成了Ashawna Hailey。 PSICE PSPICE像HSPICE一样，PSPICE的故事也跟它的名字有关。首先，这第一个字母“P”并不是其创始人的名字。事实上，创始人的名字Wolfram Blume里面根本没有字母“P”。那这字母“P”到底是什么依稀呢？对了，它就是PC。PSPICE的发展跟PC的发展是密不可分的。但这并不是PSPICE的初衷。 时间回到1984年，那时Wolfram Blume从加州理工(CalTech)毕业加入南加州一家半导体公司。工作中，他听到很多抱怨，说公司内部的SPICE速度太慢了。这位老兄也不含糊，立马对其SPICE来了一个详尽的分析。结果发现，大部分时间花在了算MOSFET模型的方程上(记得前面我们讲的MOSFET的复杂性吧)。他一想，如果能用硬件来并行处理这些方程，岂不就可以加快仿真速度了吗？(呵呵，又是一个看到商机的主)？恰恰那个时候英特尔推出了支持硬件并行的8085&#x2F;8086&#x2F;8087.说干就干，这位老哥创立了MicroSim公司。又是在这时，IBM推出了基于Intel芯片的IBM-PC。另一个机会又来了：只要把SPICE从大型机上移植到PC上就行了。这事儿比起第一个事儿简单太多了。可是，人们当时认为PC就是个游戏机而已，没人拿它来做什么正经事儿(呵呵，看看现在不还是这样吗？)。所以，这个老哥并没有把这第二件事看得太重，而是集中绝大部分精力和资源去做硬件并行。 当时的IBM-PC有640KB内存。最大的数组只允许64KB内存。而SPICE是用一个巨长的数组来存储所有的数据。把SPICE的数据放到IBM-PC的结构，用这位老哥的话说，就像把一只鲸鱼塞进一个金鱼缸里。但他们做到了(中间略去他们N个睡不着的工作之夜)。并行硬件的确加快了方程的处理，可他们也快没钱了。这位老兄忽然想到，咱不是把SPICE移植到PC上了吗？咱就先卖着这个软件，用卖它的钱继续开发咱得并行硬件。就这样，PSPICE就开始在PC上出现了。 最初这位老兄是想卖硬件加速器的PSPICE版本，可结果恰恰相反，两年后，纯软件的PSPICE卖出去一千多套，而硬件加速器只卖了两套。到这时候，这位老兄也明白了，做硬件吃力不讨好，市场并不需要。他把卖出去的两套硬件加速器又自己买了回来(当然又半卖半送给人家N套纯软件的版本)。 同学你看，一个高新复杂的技术并不一定会做出一个卖座的产品。反过来，一个貌似简单的技术可能很受市场的欢迎。另外，PSPICE虽然不是赚钱最多的，但它的用户数绝对是最大的(遍及全世界五大洲)。你可以下载一个免费的PSPICE用。当然，只限于十个晶体管。但这对一般学生的学习来讲，大部分情况下已经够用了(想一想当年的大型机也就只能算这么多)。你如果在网上搜一搜，就会发现阿拉伯语(以及其它语言)的PSPICE的教材。你如果是在校生的话，很可能也在用PSPICE。 PSPICE第二版封面 MicroSim在1998年被OrCAD收购，OrCAD在2000年又被Cadence收购。 Spectre 话说89年，伯克利毕业了最后一批做SPICE研究的学生。其中一个叫Ken Kundent。Ken非常有才气，他在伯克利的研究成果后来成为了安捷伦的微波仿真软件。同时他的傲气也不小。在加入Cadence后，他看到HSPICE卖的很火，就决定做个新的仿真工具去取代它。这就是Spectre。据说他用了两个星期就写出了第一个版本(呵呵，不愧是伯克利SPICE大本营出来的)。SPECTRE比HSPICE要快两三倍，还具有更高的精度及更好的收敛性。但它并没能取代HSPICE。为什么呢？一个原因是兼容性。SPECTRE的输入格式跟HSPICE有很大不同。Ken计算机编程的功底很深，他设计的Spectre的输入格式像C语言一样。虽然从计算机语言角度看，Spectre的输入比HSPICE的输入更规范，但SPICE的用户是电路设计者，他们才不管你的语言多么优美，只要好用就行。另外，如果你是个电路设计者，花了几年功夫好不容易才学会了一种语言格式，用它已经写了成百上千个电路网表，而且它们都工作的好好的，为什么要去换成另外一个呢？另外，还有一个重要的原因，就是用户对HSPICE的信赖。这种信赖不是一时半会儿就能建立起来的。它是经过几十年，成千上万遍仿真，几百次tape-out(流片)才能形成的。怎么能说换就换呢。 Ken琢磨着，既然更快更好还没办法取代SPICE，那我们就得做点SPICE没有的东西。做什么呢？恰好在九十年代中期，一种标准的设计语言VHDL开始向模拟电路扩展，这就是VHDL-AMS(VHDL的模拟电路及数模混合电路描述语言)。(这里再插一句，最早的数模混合电路描述语言是MAST，它是Analog公司的仿真器Saber里面使用的。VHDL-AMS是基于欧洲Anacad公司开发的HDL-A语言发展而来的。后来Anacad的仿真器成为Mentor的Eldo)。但当时还没有Verilog的AMS扩展(原因是VHDL主要在欧洲使用。而Verilog主要在美国使用)。Ken就想，好吧，我们也来做个标准的设计语言到Spectre里。这就是Verilog-AMS(Verilog的模拟电路及数模混合电路描述语言)。不过这事儿说起来容易做起来难。首先，既然你是标准，那就要大伙儿都同意。让大伙儿都同意的事是要花时间的，没那么快。其次更重要的，是你要让模拟电路设计者来学习并使用这个语言。这可是比登天还难的事儿。如果你是一个模拟电路设计者，你想想你在学校的课本上看到的是运放的电路还是它的描述语言？当然是电路了。至少到今天为止，还没有一本模拟电路的教科书是只用描述语言的。你再看看数字电路的教材，几乎全部都是VHDL或Verilog描述语言(呵呵，如果你还用晶体管来设计数字电路，那你的年龄够大了)。另外，当你做模拟设计的时候，你是在搭晶体管电路呢，还是在写描述语言？对模拟电路设计者来说，用语言而不用电路来做设计是不可想象的。反过来，对数字电路设计者来说，用电路而不用语言来做设计也是不可想象的。 Spectre-AMS做出来后，Ken发现当时的感兴趣者寥寥无几(呵呵，这哥们专找硬骨头啃)。那怎么办？在公司做产品是要卖钱的。Ken有点儿绝望了。这时，他想到了回去做他在学校的老本行：射频电路仿真。至少这个功能别的SPICE还没有。他把这个想法告诉了当时Cadence的市场经理Jim Hogan。Jim做了个市场调查。那时射频电路设计市场几乎不存在，只有几家做镓砷电路的算搭点边。当Jim把这调查结果告诉Ken，Ken也无可奈何的耸耸肩。Jim对Ken看了好一会儿，说，管它呢，你就做去吧。谁知道这一次却是歪打正着了。九十年代中后期正是无线通信市场腾飞的时候。很多在学校用Spectre-RF的毕业生加入了新的做射频电路芯片的设计公司。这些公司必须要用Spectre-RF做射频仿真。而Spectre-RF是Spectre的一个选项。因此，Spectre也就借着Spectre-RF的东风开始流行起来了。后来，HSPICE和Smart-Spice也跟风在自己的SPICE中加进了RF的选项。这也算是Spectre对SPICE的功能扩展做的贡献吧。 Ken Kundent Smart Spice Smart-Spice是Silvaco公司的产品。说道Silvaco，就不得不说它的创始人Ivan Pesic。Ivan来自黑山共和国(Montenegro，欧洲巴尔干半岛的一个小国家)。像所有第三世界国家的穷学生一样，通过自己的勤奋努力来到美国。来美国之后，他先开了一家修车店。知道攒够了钱，才在1984年成立了Silvaco。他有一个儿子，可能是年幼时受了老爸的修车店的熏陶，决定长大了当个汽车修理工。因此学习也不上进。怎么让这小子好好学习呢？简单。有一天，老Ivan把儿子带到了圣荷塞（SanJose，硅谷一大城市）一个最破的修车厂的马路对面，对儿子说：你就坐在这儿，看看汽车修理工一天的工作是什么样的。自从那一天结束以后，儿子的学习成绩就全变成A了。 说到Ivan Pesic，我们还不得不说他打官司的故事。Silvaco的历史上与N家公司打过官司(而且大部分都赢了)。在此我们只讲讲与Meta-Software(后被Avant并购)的官司。话说八十年代末到九十年代初，Meta-Software和它的HSPICE如日中天，这其中它自己的Level28模型起了重要作用。Silvaco最初的产品是TCAD(Technology CAD)，并不是SPICE。这时它也准备开发自己的Smart-Spice，但它拿不到HSPICE的Level28模型。怎么办？Silvaco采用了一个瞒天过海的迂回战术。Silvaco有个不错的模型参数提取软件叫Utmost。它就找到Meta-Software说，你看，如果把你们的Level28模型公式放到我们的Utmost中，就会有更多的用户用你们的HSPICE。Meta一想也对，就把Level28模型给了Silvaco。没成想，过了两年，Silvaco自己的Smart-Spice出来了，而且里面还带着Level28模型。这下Meta-Software气坏了。就把Silvaco告上了法庭。也就在这个前后，Avant并购了Meta-Software。但Avant只看到了HSPICE这只下金蛋的鸡，却忽略了Meta-Software跟Silvaco的官司。也许是因为Avant恰恰正在和Cadence打着一场更大的官司，从而忽略了这个小案子。不管是什么原因，当法庭开庭要宣判的那一天，Avant居然没有人出庭。这下法官可气坏了。好啊，竟然藐视本法庭，来啊，判Avant输，并赔Silvaco两千万！本来Silvaco上庭前战战兢兢的，盼望着和解就不错了。这下倒好，不光不用和解了，还得了一大笔钱。呵呵，人们都说国外重视知识产权。这种重视其实是来自于众多这样的动不动就成败上千万的官司。所以同学，如果你是学理工出身的，那你不妨去学学法律。如果你是学文科出身的，那你不妨去学学理工。估摸着在不久的将来，国内这样的涉及知识产权的大官司也会越来越多。作为一个懂高科技的律师(或者一个懂知识产权法律的工程师)会很抢手的。 但是，一个公司如果光靠打官司，那也是赢得不了客户的。说实话，Smart-Spice做得还是蛮不错的，价格又便宜。Smart-Spice还是第一个“基于使用时间许可证”(use-time based license)的工具。这对许多小公司或个人用户是个好消息。如果你没几万美元去买高大上的商业SPICE，或者你就只需要跑几次仿真，那就可以最少花十几美元用Smart-Spice完成你要做的事。这就像买车还是租车一样。卖车店能赚钱，租车店也会有很多顾客的。这不也是一个很好的商业模式吗？ Ivan Pesic于2012年因癌症在日本去世。如今，他本来想当汽车修理工的儿子已经继承了老爸的事业，接替掌管Silvaco了。 Aeolus-AS 我们应该感到骄傲–这是我们中国本土的SPICE。虽然名字叫起来很拗口。光从名字上也看不出这是SPICE。它是由华大九天开发的。至于为什么起这样一个名字，还是请华大的刘总来解答吧。本人并没有用过这个工具。下面的几句话是从华大的网页上摘下来的，也算给他们做个广告吧。“它是新一代高速高精度并行晶体管级电路仿真工具，能够在保持高精度的前提下突破目前验证大规模电路所遇到的容量、速度瓶颈。Aeolus-AS能够处理上千万个元器件规模的设计，仿真速度也比上一代晶体管级电路仿真工具有大幅提升，同时支持多核并行。” 还有一类是工业界但非商业(也就是不拿出来卖的)SPICE，通常它们都是公司内部开发使用的。一般只有拥有Fab的大公司(像Intel、前Infenion、前Motorola、Fujitsu等)才能负担得起一个开发团队。这种公司内部的SPICE基本都会有自己的器件模型。在这里我们就不多说了。 SPICE的变异与进化SPICE的变异与进化 SPICE最初是用来做小型电路仿真的。电路中的元器件数也就几十最多到几百个。随着电路规模越做越大，电路种类越来越多，人们会问：SPICE能不能跑得更快一些，能运行的电路更大一些？自然而然的，SPICE的变种就出现了。我们在这儿讲三个方面：第一是快速仿真；第二是数模混合仿真；第三是扩展应用。 先说说快速仿真(fast SPICE)。这也是市场最大，发展最多的一块儿。因为SPICE是把整个电路放到一个矩阵中来解。人们就想能不能把电路分成小块单独解，然后再把各块之间连接起来，这样不就快了吗？的确，对数字电路，确实可以用分割的方法。因为数字电路的信号是有方向的，我们可以在没有直流通路的地方把它分开(例如在两个串联的反相器中间)。另外就是数字信号是离散的，我们可以把它分成几段。分的段越大，时间步长也就能越大，需要解的次数就少了(当然结果也就没那么精确了)。还有就是器件模型。我们前面讲过如今的mosfet模型非常复杂，要花很多时间去算，那能不能把它简化呢？可以。事实证明对数字电路以及数模混合电路(像PLL、Memory、Serdes)来说，用表格模型(table model)来代替复杂的方程模型是个不错的选择。通过这些简化，快速仿真可以比原来的SPICE快几十到上百倍，而精度是在SPICE的5%~10%之内。像EPIC的PowerMill(后来成为Synopsys的NanoSim)，Anagram的ADM(后来成为Avant的StarSim)，Celestry(后来成为Cadence)的UltraSim，Nassda(后来成为Synopsys)的HSIM，等等。最近比较流行的是Magma(现在是Synopsys)的FineSim，BDA(现在是Mentor)的AFS，Proplus的NanoSpice。 其次来说说数模混合仿真。当一个系统中既有模拟电路，又有数字电路，人么自然就会想到把SPICE和数字仿真器(如Synopsys的VerilogVCS、Cadence的NC、Mentor的ModelSim)连在一起运行。SPICE去算模拟电路部分，数字仿真器去算数字电路部分，它们之间用数模&#x2F;模数转换器(AD&#x2F;DA)连接。注意这种运行方式跟上面的快速仿真不同。这样的混合仿真需要两个仿真器。而且这样的构架有缺点。主要的问题是数模转换没有一个标准。市面上有很多SPICE以及Verilog仿真工具，每一个工具的转换界面都不一样，这就造成混合仿真的界面非常复杂。因此，最近发展的混合仿真都采用数模一体化的构架，大大简化了转换界面，而且用户只需要再一个环境下就可以进行混合仿真。这样的工具有Cadence的Virtuoso-AMS、Synopsys的HSIM-plusHDL、Silvaco的Harmony、华大的Aeolus-ADS等。 最后再来说说SPICE的扩展应用。虽说SPICE是针对集成电路(IC)开发的，但它的应用已扩展到系统级(System Level)，主要是电路板(PCB)级的仿真。那系统级仿真与集成电路仿真有何区别呢？它们不都是电路吗？呵呵，没错，它们都是电路，但区别还是蛮大的。主要是它们的规模与尺寸的不同。我们知道，集成电路是集成在芯片上的。其器件尺寸现在已做到纳米级。而系统的尺寸还在毫米、厘米甚至米的数量级。学过电磁的同学都知道，当器件的尺寸大于信号波长的时候，就要考虑分布的场效应了。拿一段导线做例子。一段在芯片上的导线，你可以把它看做一个电阻。而一段电路板上的导线，你就必须用传输线(Transmission Line)来代表它，否则误差就太大了。如果信号的频率再高，那就要用S参数了(S-Parameter)。因此，电路仿真发展出一大分支，这就是所谓的“信号完整性”工具。像Agilent的ADS、Mentor的HyperLynx以及Cadence的OrCAD和Allegro SPICE今后的道路 从70年代初到如今的四十多年里，SPICE从只能仿真十几个节点&#x2F;器件到今天可以仿真上百万个节点&#x2F;器件的电路，这是一个非常惊人的成就。但这个成就的主要原因是摩尔定律。前面我们讲述过自从90年代中期，SPICE本身就没有太大的变化了。这怪就怪(不，应该是感谢才对)SPICE的先驱们。他们奠定了一个坚实的基础，使得我们后面的人都没什么可做的了。的确，要改变SPICE的基石，例如改进的节点分析法(Modified Nodal Analysis)，稀疏矩阵解法(Sparse Metrix Solver)，牛顿-拉夫逊迭代(Newton-Raphson Iteration)，隐形数值积分(Implicit Numberical Integration)，等等，确实不容易。说到底，SPICE是一个解非线性常微分方程的工具。你要想从根本上有个革命性的改变，那你还是从数学上着手吧。 SPICE是一个非常通用的工具。虽然集成电路是它的着重点，但我们看到它也被广泛应用到了系统级、电源级甚至延伸到了不同领域的仿真。我们前面讲到了数模混合(Mixed-Signal)，但它还是在电路的范畴内。可不可以把它扩展到其他领域(Mixed-Domain&#x2F;Multiple Discipline)，比如机械、热力甚至生物领域？答案是可以的。例如，在电路领域中，我们解的是跨过两个节点的电压和通过一个支路的电流。而在机械领域中，我们解的是两个点的位置和力。从早期Saber的MAST语言，到现在的工业标准Verilog-AMS和VHDL-AMS都已经支持不同领域的描述。这就给跨领域的仿真带来了可能。虽然Verilog-AMS还没有被模拟电路设计者广泛采用，但它很可能先从另一个地方发扬光大。比如，微机电系统(MEMS)很有可能是下一个大的应用领域。 另一方面，虽然SPICE可以解很多类型的电路，但它的运算速度也因此受到了制约。每一种电路都有它自己的特点，比如数字电路信号的离散型，存储器(RAM)结构的重复性，等等。我们可以在SPICE的基础上，利用这些电路的特点来开发特制的“SPICE”以提高仿真的效率。前面说的快速SPICE仿真工具就属于这一类。它们的通用性不如SPICE，但它们针对某一类电路的仿真效率是非常高的。 最后一方面，我们从SPICE的发展可以清晰的看到，软件的发展是与硬件的发展密不可分的。现在的处理器基本上都是多核、多线程的，新一代的商业SPICE也利用了这些新的处理器架构。最新的图形处理器(GPU)更是达到了上百个核，上万个线程。并行的开发工具像开放计算语言(OpenCL)，CUDA也逐渐成熟。高性能计算(HPC)以及云计算也在日益普及。SPICE能否利用这些新的环境来提高仿真效率呢？呵呵，这个问题就需要你来解答了。下面的图给出了主要SPICE的发展过程。其中的代号如下： tr td,th{ border:2px solid lightgrey; } .mt{ border-collapse: collapse; } 代号 UCB gEDA Meta SNPS μSIM CDN MENT 意义 伯克利 GNU EDA Meta-Software Synopsys MicroSIM Cadence Mentor 下面的图给出了主要快速仿真工具的发展过程，“+”代表并购。 注意这些快速仿真工具都是商业化的。目前还没有一个开源的快速仿真工具具有像伯克利SPICE那样广泛的影响力。 哪里可以找到SPICE仿真模型？ 寻找SPICE模型最好的方法就是去浏览厂商或是制造商的网页。下面列出的是部分最常用的并且在其网站上提供SPICE模型的芯片制造商。 厂商 描述 Analog Devices 放大器和比较器、AD&#x2F;DA、嵌入式处理与DSP、MEMS和传感器、RF&#x2F;IF组件、开关&#x2F;多路复用器、模拟微控制器、接口、电源与温度管理 Analog and RF Models 模拟与射频模型 Apex Microtechnology 线性放大器、PWM放大器 Christophe Basso 开关电源 Coilcraft, Inc. 功率磁技术、射频电感、EMI&#x2F;RFI滤波器、宽带磁技术 Directed Energy 二极管、开关模式MOSFETs、HF&#x2F;VHF线性MOSFET、MOSFET驱动IC Duncan Amps 放大器、真空管 Fairchild Semiconductors 放大器与比较器、二极管与整流二极管、接口、数字逻辑设备、信号转换、电压频率转换器、微控制器、光电管、开关、功率控制器、功率驱动器、晶体管、滤波器、稳压器 Infineon Technologies AG 光纤、微控制器、功率半导体、小型信号离散原件 International Rectifier HEXFET功率MOSFET、二极管、桥、晶闸管、继电器、高压IC、只能功率模块、只能功率开关、HiRel功率MOSFETs、HiRel高压门驱动器 Kemet 含有铝、陶瓷和钽的表面覆盖电容器与含有陶瓷和钽的贴片电容 Linear Technology 信号调理、数据转换、功率管理、接口、高频率与光学 Maxim 放大器与比较器、模拟开关与多路复用器、时钟、计数器、继电器线路、振荡器、RTC、数据转换器、采样与保持、数字电势剂、光纤通信、滤波器(模拟)、高频ASIC、热插拔与功率开关、接口与互联、内存：暂时、非暂时、多功能、温度管理、传感器、传感器调理、电压参考、无线、射频与电缆 National Semiconductor 放大器、功率管理、温度传感器、接口、LVDS、以太网、USB技术、Micro SMD ON Semiconductor 功率管理、放大器、比较器、模拟开关、晶闸管、二极管、整流器、双极性晶体管、FET、标准逻辑、差分逻辑 Philips 模拟&#x2F;线性、音频、汽车、连接器、数据&#x2F;媒体&#x2F;视频处理、离散、显示器、接口与控制、逻辑、微控制器、功率与功率管理、射频、传感器 Polyfet Polyfet晶体管 Protek 瞬态电压抑止 SMPS Power Supplies 开关电源仿真 Supertex 混和信号半导体、高压接口产品 ST Microelectronics 放大器与线性IC、模拟与混和信号IC、二极管、EMI滤波与调理、逻辑、信号开关、内存、微控制器、电源管理、保护设备、传感器、智能卡IC、晶闸管与交流开关、晶体管 Texas Instruments 缓冲器、驱动器与收发器、触发器、锁存存器、门、计数器、解码器&#x2F;编码器&#x2F;多路复用器、数字比较器 Tyco Electronics(前身Amp) 电磁元件、无源元件、电源、射频与微波产品 Vishay 模拟开关、电容、二极管、电感、集成模块、功率IC、LED、功率MOSFET、电阻以及热敏电阻的制造商。 Zetex 直流—直流变换控制器、参考电压源、电流监控、电机控制、Acoustar™声音解决方案、线性稳压器","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"}]},{"title":"放大器的谐波失真(THD)","slug":"放大器的谐波失真-THD","date":"2023-08-21T13:47:21.000Z","updated":"2023-11-20T13:25:44.169Z","comments":true,"path":"2023/08/21/放大器的谐波失真-THD/","link":"","permalink":"http://shenguosai.github.io/2023/08/21/%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E8%B0%90%E6%B3%A2%E5%A4%B1%E7%9C%9F-THD/","excerpt":"本文主要总结和收集关于放大器谐波失真的原因及改良方法。 一、什么是谐波失真 THD是英文Total Harmonic Distortion的缩写，译成中文即为总谐波失真。 谐波失真是什么？谐波失真的原因是电路电路的线性度不好。理想线性电路的输入x和输出y可以使用一次方程表示：$y&#x3D;ax+b$","text":"本文主要总结和收集关于放大器谐波失真的原因及改良方法。 一、什么是谐波失真 THD是英文Total Harmonic Distortion的缩写，译成中文即为总谐波失真。 谐波失真是什么？谐波失真的原因是电路电路的线性度不好。理想线性电路的输入x和输出y可以使用一次方程表示：$y&#x3D;ax+b$ 如果输出和输入的关系偏离了上述方程的直线我们称之为线性度差。下面是一个典型的线性度差的代表电路：Diode Clip电路。根据二极管的顺方向I-V特性可知，在±0.6V之外被clip，就是说当输入电压在±0.6V之外时，电路显现非线性特性，如下图：如果将正弦波作为此电路的输入信号，输出信号变为在原信号基础上叠加了“不存在”的信号。其输入即输出入下式所示：输入：$V_{in}&#x3D;sinωt$输出：$V_{out}&#x3D;a_1sin(ωt+φ_1)+a_2sin(ωt+φ_2)+a_3sin(ωt+φ_3)+…$输入输出的FFT(Fast Fourier Transform)结果如下图所示： 二、谐波失真的定量分析在进行谐波失真的定量分析时经常用到的指标为THD和THD+N。 THD+N即Total Harmonic Distortion + Noise的缩写。 通常我们所说的谐波失真都是叠加了输入信号的高次谐波。THD的定义即为在基波的高次谐波的平方和的平方根与基波的电压之比。即：$V_{THD}&#x3D;\\frac{\\sqrt{V_2^2+V_3^2+V_4^2+…+V_N^2}}{V_1}$其中，$V_1$为基波电压成分，$V_2$、$V_3$、$V_4$···$V_N$为整数倍的谐波电压成分。高次谐波成分+噪声，即THD+N就是在高次谐波中再加入噪声：$V_{THD}&#x3D;\\frac{\\sqrt{V_2^2+V_3^2+V_4^2+…+V_N^2+V_{Noise}^2}}{V_1}$ 三、通过反馈改善谐波失真改善THD方法中最一般的方法就是利用反馈，还是用上面的Diode Clip电路举例说明，在此电路中加入放大器及其反馈后电路结构如下： 我们使用LTSpice中的理想放大器，设置其直流增益为100dB，带宽为10MHz。则1kHz的输入信号的增益为80dB。 由于作为中间节点的放大器的输出可以对非线性进行抵消，所以整个电路的输入输出特性有了较大的改善。 使用1kHz的正弦波作为输入时可以看出只有少量的谐波成分的残留。 通过FFT结果可以看到奇数倍的高次谐波成分。$THD&#x3D;3.2%$ 下面讨论如果进一步削减谐波失真应该怎么做首先为了加强反馈网络我们可以保持放大器带宽的情况下将放大器的增益提高到120dB以上。 可以看到THD完全没有改善还是3.2%，原因是1kHz的反馈量没有变化。 然后尝试保持放大器的直流增益不变将带宽增加到100MHz。由于是单极点放大器，所以1kHz时的增益约上升10倍。 THD改善了0.35%，约上升了1&#x2F;10。所以， 改善AC的谐波失真需要重点关注带宽！！ 为确保放大器的稳定性，在高频阶段通常降低增益。也就是说在单位增益频率附近的信号无法使用反馈来改善THD。所以，一般来说高频信号的THD会比较差。 四、输出端形成的开关谐波失真经过妥当设计的放大器在规格范围内使用时，造成谐波失真的最多原因是输出端的谐波失真。通过使用射极跟随器驱动负载电路的电路举例说明： 射极跟随器通常对输入电压进行约1倍的放大输出(即，输出&#x3D;输入)，但如果集电极的电流在接近0A附近工作时，线性度会发生恶化。 使用正弦波作为输入信号，在集电极电流为0(cut off)时输出波形出现严重失真。 现实中放大器则通常通过一个npn和一个pnp组成推挽式结构，在一侧无法正常工作时通过另一侧进行补偿。 即使使用合适的偏置在输入信号为0时两侧的三极管均不会发生cut off(Class AB)，在大振幅或大负载电流的情况下也会使一侧的三极管发生cut off，不可避免地导致THD指标恶化。 开关谐波失真在Class A结构中可以避免，但是会增加功耗及电路的复杂度。 五、耗尽层电容引起的失真去除开关因素导致的失真之后，剩余的就是耗尽层电容为起因导致的失真。由于耗尽层是绝缘的，所以在Si和耗尽层之间可以看做形成电容，这个电容称之为耗尽层电容。耗尽层的长度随两边的电压不同而变化，就是说随着两端电压的不同耗尽层电容值是发生变化的。可变容量二极管就是利用这一原理制作而成的。普通的小信号用PN结二极管以及晶体管的集电极和基电极之间的容值也会跟随两端电压而变化。耗尽层电容导致的失真由以下电路模型展示。虽然在直流区域有反馈，但是在100kHz时输出由G1的互导和Q1的寄生电容决定。Q1以外均使用理想器件，Q1为共基级放大电路，所以输出波形仅会受到由集电极电位影响的非线性度影响而导致失真。Q1的集极-基级之间的反向偏置，所以在集电极上形成耗尽层电容$C_{ob}$经电源V2连接GND。 若集电极电压发生变化，则$C_{ob}$的容值发生变化，导致$C_{ob}$的充电电流释放至GND而造成了失真发生。THD为0.47%。 其对策为增加射极跟随器使$C_{ob}$的充电电流能够回流。通过Q2可以使Q1的集电极&#x3D;&#x3D;&gt; $C_{ob}$&#x3D;&#x3D;&gt; GND释放的电流进行回流而抵消$C_{ob}$造成的非线性。为使开环增益相同增加C3. 此时，THD有了巨大的改善，变为0.0008%。 参考文献：Douglas Self, Small Signal Audio Design, 2010, Focal Press黒田徹, 解析OPアンプ&amp;トランジスタ活用, 2002, CQ出版","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"}]},{"title":"《我叫赵甲第》片尾名言及经典台词","slug":"《我叫赵甲第》片尾名言","date":"2023-08-19T06:04:53.000Z","updated":"2023-11-20T13:25:30.912Z","comments":true,"path":"2023/08/19/《我叫赵甲第》片尾名言/","link":"","permalink":"http://shenguosai.github.io/2023/08/19/%E3%80%8A%E6%88%91%E5%8F%AB%E8%B5%B5%E7%94%B2%E7%AC%AC%E3%80%8B%E7%89%87%E5%B0%BE%E5%90%8D%E8%A8%80/","excerpt":"片尾名言第1集 生活的道路是自由美好的，可是我们迷了路，贪婪毒害了任性，用仇恨分割了世界。 ——查理·卓别林《大独裁者》 第2集 一切都是瞬息，一切都将会过去，而那过去了的，就会成为亲切的怀恋。 ——亚历山大·普希金《假如生活欺骗了你》 第3集 我姑且举灰黑的手装作喝干一杯酒，我将在不知道时候的时候独立远行。 ——鲁迅《野草》 第4集 一旦走进深处，人与人就是相互的迷宫。 ——史铁生《活出爱》","text":"片尾名言第1集 生活的道路是自由美好的，可是我们迷了路，贪婪毒害了任性，用仇恨分割了世界。 ——查理·卓别林《大独裁者》 第2集 一切都是瞬息，一切都将会过去，而那过去了的，就会成为亲切的怀恋。 ——亚历山大·普希金《假如生活欺骗了你》 第3集 我姑且举灰黑的手装作喝干一杯酒，我将在不知道时候的时候独立远行。 ——鲁迅《野草》 第4集 一旦走进深处，人与人就是相互的迷宫。 ——史铁生《活出爱》 第5集 爱情是叹息吹起的一阵烟。 ——威廉·莎士比亚《罗密欧与朱丽叶》 第6集 当我猜到谜底，才发现，一切都已过去，岁月早已换了谜题。 ——席慕蓉《谜题》 第7集 即使一切都已发生过，我也习惯了，不再流泪。 ——舒婷《路遇》 第8集 孤独的人有他们自己的泥沼。 ——张爱玲《年轻的时候》 第9集 有生命的种子绝不会悲观、叹气，它相信有了阻力才有磨炼。 ——夏衍《种子的力》 第10集 我们飞翔得越高，我们在那些不能飞翔得人眼中的形象越是渺小。 ——费里德里希·尼采《查拉图斯特拉如是说》 第11集 纵使黑暗吞噬了一切，太阳还可以重新回来。 ——汪国真《只要明天还在》 第12集 我们的心是一座宝库，一下子倒空了，就会破产。 ——奥诺雷·德·巴尔扎克《高老头》 第13集 人总是倾向于把自己生活的小圈子看作是世界的中心，并把自己特殊的个人生活当做宇宙的法则。 ——恩斯特·卡希尔《人论》 第14集 从前有个古老的故事，一个猎人得到了无上的光荣和尊严，但他却长时间遇到极大的困难和生命的危险。 ——汉斯·安徒生《光荣的荆棘路》 第15集 弓在紧张状态的顶点马上将直射出，最沉重而又最自由的一箭。 ——阿尔贝·加缪《适度与过度》 第16集 我想无论是写作还是人生，正确的出发都是走进窄门，不要被宽阔的大门所迷惑，那里面的路没有多长。 ——余华《兄弟》 第17集 未来不同于过去之处，在于它明确地留给人类充足的选择和行动的空间。 ——齐格蒙特·鲍曼《自由》 第18集 要像一座卓立的塔，绝不因为暴雨而倾斜。 ——但丁·阿利吉耶里《神曲》 第19集 你看不见你自己，你看见的只是你的影子。 ——泰戈尔《飞鸟集》 第20集 君子成人之美，不成人之恶，小人反是。 ——孔子《论语》 第21集 唯一能自慰的是，我们曾真诚而充满激情地在这个世界上生活过，竭尽全力的劳动过，并不计代价地将自己的血汗献给了不死的人类之树。 ——路遥《平凡的世界》 第22集 一个不成熟的人的标志，是他愿意为了某个理由而轰轰烈烈的死去；而一个成熟的人的标志，是他愿意为了某个理由而谦恭的活下去。 ——杰罗姆·塞林格《麦田里的守望者》 第23集 忘却了的梦，日后也无法重温。 ——川端康成《千只鹤》 第24集 死并非生的对立面，而是作为生的一部分永存。 ——村上春树《挪威的森林》 第25集 天亮的日子多着呢，太阳不过是一个晓星。 ——亨利·梭罗《瓦尔登湖》 第26集 沙漠很美，是因为有个地方藏着一口井。 ——安托万·埃克苏佩里《小王子》 第27集 我相信那一切都是种子，只有经过埋葬，才有生机。 ——顾城《给我的尊师安徒生》 第28集 一个人自身能够成为什么样的人，取决于他在生命旅途中所遭遇到的他人以及召唤着他的信念。 ——卡尔·雅斯贝尔斯《时代的精神状况》 第29集 生命对每个人都提出了问题，他必须通过对自己生命的理解来回答生命的提问。 ——维克多·弗兰克尔《活出生命的意义》 第30集 人们所走的道路会预示某种结局。这就是说，如果他们坚持走他们的道路，他们就一定会到达那种结局。 ——查尔斯·狄更斯《圣诞颂歌》 经典台词 人必有所执，方能有所成。 说说为什么抽烟，为了等一个劝我戒烟的女人。 争取不要错过谁，错过的，就尽量去祝福。 人生为棋我为卒，行动虽慢，命运多舛，可谁曾见我后腿半步？ 一个人在山脚喊得再起劲，山腰和山头上的人都懒得理会。 耿直其实很多时候也是一种变相的圆融，成本低，收益却不低，是聪明人才知道的诀窍。 多读书，是腹有诗书气自华，看人待物能多几分透彻；多识人，是以人为镜，能够多自省自知。 任何一个好的作品，都只是作者在讲一个故事。任何一部被后来者冠上伟大的作品，都是一群好事者在挖掘作者自己都不懂的东西。 如果你是一个好人，那你也要知道世上总有没你好的坏人，你得保护好自己。不能把所有人都想象得太美好。付出没有回报，好心被误解，都不要对生活失去信心。如果你是一个坏人，那你也要相信世上总有一种东西叫良心，要相信报应。如果你是一个男人，就要知道女人的善良，珍惜她们的青春。如果你是一个女人，就要懂得男人的不易，理解他们的奔波。如果你是一个孩子，期待着精彩人生，请不要急着长大。如果你是一个老人，见多了风霜险恶，请不要把慈悲麻木。如果你是一个功成名就的夫人，请尊重人生。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"}]},{"title":"日本鬼子名称的由来","slug":"日本鬼子名称的由来","date":"2023-08-17T13:39:53.000Z","updated":"2023-11-20T13:26:21.983Z","comments":true,"path":"2023/08/17/日本鬼子名称的由来/","link":"","permalink":"http://shenguosai.github.io/2023/08/17/%E6%97%A5%E6%9C%AC%E9%AC%BC%E5%AD%90%E5%90%8D%E7%A7%B0%E7%9A%84%E7%94%B1%E6%9D%A5/","excerpt":"中日甲午战争的记者会上，日本人想嘲讽和羞辱中国人，事先准备好了一副对联的上联让与会的中国代表当场对出下联。上联：骑奇马、张长弓，琴瑟琵琶、八大王并肩居头上，单戈独战。","text":"中日甲午战争的记者会上，日本人想嘲讽和羞辱中国人，事先准备好了一副对联的上联让与会的中国代表当场对出下联。上联：骑奇马、张长弓，琴瑟琵琶、八大王并肩居头上，单戈独战。 “骑奇马，张长弓”这两句是将第一个字本身拆开两个字组成的，而琴瑟琵琶这四个字共共有八个王字对应了后半部分“八大王并肩居头上”，末句“单戈独战”的“单戈”合成一个繁体的“战”字。日本人出这个对联的大意是自己骑着快马张着长弓，兵强马壮的兵临中国，赢得胜利，并以此鄙视和嘲讽中国。 正当日本人洋洋得意认为没有中国人对出下联时，一位负责谈判的清朝大臣拿起笔写出了下联。下联：倭委人、袭龙衣，魑魅魍魉、四小鬼屈膝跪身旁，合手擒拿。 这个下联真是神来之笔，令日本人膛目结舌。下面每一句都工整的对应上联。倭委人袭龙衣对应骑齐马张长弓，魑魅魍魉对应琴瑟琵琶，且魑魅魍魉左偏旁都是鬼字而且有四个。从字形看鬼字末笔一横勾就像是在下跪故屈膝跪身旁，末句合手擒拿的合手就是拿字，正好对应上面的八大王并肩居头上、单戈独战，而且还反过来将了日本人一军。下联的意思是日本小人偷穿龙袍，只不过是魑魅魍魉四个小鬼而已，赶快下跪认错否则合手擒拿，这下联是句句工整字字珠玑。 从那以后中国人不在称日本人为倭寇而叫日本鬼子了。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"}]},{"title":"几种功率管","slug":"几种功率管","date":"2023-08-17T03:32:09.000Z","updated":"2024-02-01T09:16:59.765Z","comments":true,"path":"2023/08/17/几种功率管/","link":"","permalink":"http://shenguosai.github.io/2023/08/17/%E5%87%A0%E7%A7%8D%E5%8A%9F%E7%8E%87%E7%AE%A1/","excerpt":"DMOS：Double-Diffused MOSVDMOS：Virtical DMOS垂直扩散DMOS，VDMOS的漏极在硅片背面，沟道在两个维度上包围源极，所以叫“垂直”，实际上栅极依然是水平的。VDMOS是PowerMOS（大功率MOS器件）的一种，通过垂直设计减小沟道场强，可以使短沟道承受很高的电压和电流。缺点是漏极要从背面引出，很难用和主流集成电路工艺兼容。这种结构可以减小漏电流并提高开关速度，具有低导通电阻、高电压承受能力和低开关损耗的优点。它在功率电子器件中广泛应用，如逆变器、直流-直流转换器和交流电机驱动器等。主要缺点是存在体效应和漏电流，且制造过程较为复杂。","text":"DMOS：Double-Diffused MOSVDMOS：Virtical DMOS垂直扩散DMOS，VDMOS的漏极在硅片背面，沟道在两个维度上包围源极，所以叫“垂直”，实际上栅极依然是水平的。VDMOS是PowerMOS（大功率MOS器件）的一种，通过垂直设计减小沟道场强，可以使短沟道承受很高的电压和电流。缺点是漏极要从背面引出，很难用和主流集成电路工艺兼容。这种结构可以减小漏电流并提高开关速度，具有低导通电阻、高电压承受能力和低开关损耗的优点。它在功率电子器件中广泛应用，如逆变器、直流-直流转换器和交流电机驱动器等。主要缺点是存在体效应和漏电流，且制造过程较为复杂。 LDMOS：Lateral DMOS，常用于高电压大电流电路。水平扩散DMOS，也是PowerMOS的一种，和VDMOS的区别是去掉了背部的漏极引出，方便兼容其它工艺(CMOS工艺)，和其他集成电路整合在同一块芯片上。可以看到LDMOS把背部的Drain引出挪到了右边，代价是相对VDMOS面积变大了。LDMOS具有高电压承受能力和低导通电阻的优点。LDMOS主要应用于高频功率放大器、天线开关和发射机等领域。LDMOS的主要缺点是存在漏电流和温度效应，且不适用于高速开关应用。LDMOS由于更容易与CMOS工艺兼容而被广泛采用。LDMOS器件结构如上图所示，是一种双扩散结构的功率器件。这项技术是在相同的源&#x2F;漏区域注入两次，一次注入浓度较大（典型注入剂量 1015cm-2）的砷（As），另一次注入浓度较小（典型剂量1013cm-2）的硼（B）。注入之后再进行一个高温推进过程，由于硼扩散比砷快，所以在栅极边界下会沿着横向扩散更远（上图中P阱），形成一个有浓度梯度的沟道，它的沟道长度由这两次横向扩散的距离之差决定。为了增加击穿电压，在有源区和漏区之间有一个漂移区。LDMOS中的漂移区是该类器件设计的关键，漂移区的杂质浓度比较低，因此，当LDMOS 接高压时，漂移区由于是高阻，能够承受更高的电压。图1所示LDMOS的多晶扩展到漂移区的场氧上面，充当场极板，会弱化漂移区的表面电场，有利于提高击穿电压。场极板的作用大小与场极板的长度密切相关。要使场极板能充分发挥作用，一要设计好SiO2层的厚度，二要设计好场极板的长度。 DEMOS：Drain-Extended MOS，常用于高电压小电流电路。SGT：Superjunction MOSFET采用多个交替的不同材料层构成，具有高电压承受能力和低导通电阻的优点。SGT主要应用于高压直流输电、电动汽车和太阳能发电等领域。SGT的主要缺点是制造成本较高。 Cool MOS英飞凌发明制造的功率管，是一种快速开关MOSFET，具有低开关损耗和低导通电阻的优点。主要应用于高效率电源、LED驱动器和电动汽车充电器等领域。主要缺点是存在体效应和漏电流，且制造成本较高。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Semiconductor Device","slug":"Semiconductor-Device","permalink":"http://shenguosai.github.io/tags/Semiconductor-Device/"}]},{"title":"Hexo设置博客文章加密","slug":"Hexo设置博客文章加密","date":"2023-08-10T05:53:55.000Z","updated":"2023-11-20T13:27:47.383Z","comments":true,"path":"2023/08/10/Hexo设置博客文章加密/","link":"","permalink":"http://shenguosai.github.io/2023/08/10/Hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/","excerpt":"准备Hexo搭配使用hexo-blog-encrypt插件可以写一些比较私密的博客，通过密码验证的方式让其他人不能随意浏览。 安装插件在blog\\目录运行以下代码： 1npm install hexo-blog-encrypt","text":"准备Hexo搭配使用hexo-blog-encrypt插件可以写一些比较私密的博客，通过密码验证的方式让其他人不能随意浏览。 安装插件在blog\\目录运行以下代码： 1npm install hexo-blog-encrypt 一般配置 在根目录的配置文件_config.yml中添加以下代码：12encrypt: enable: true 设置加密之后，需要在新建博文时在文章头部添加加密的信息设置：12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: password: message: --- 密码。1234567891011121314```message```：输入密码界面的提示说明。# 针对Tag的加密将以下代码复制到根目录下的```_config.yml```:```ymlencrypt: #hexo-blog-encrypt enable: true abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. tags: - &#123;name: TagName1, password: 密码A&#125; - &#123;name: TagName2, password: 密码B&#125; wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"Diary","slug":"Diary","date":"2023-08-10T05:44:16.000Z","updated":"2023-08-14T13:42:34.935Z","comments":true,"path":"2023/08/10/Diary/","link":"","permalink":"http://shenguosai.github.io/2023/08/10/Diary/","excerpt":"有东西被加密了, 请输入密码查看.","text":"da0a26c26fdc3adc6c296250a94e3b4e37c3b1006ca99a84384837ba60666222e63725afa8c7c2484146bec8770d930f27f7cbc1aab385730bb6de9b9ad40f43dc2cb4512ea66ecbaee77d3f110270396c07f5cd7bd50682f5f02dbdaf13ea6860ba18e5b1afe4437475cfc9a7886f683b96d82cf5f34d13d51e41f134c39c9ea107b82e03c415164a5e8c9ae6eccbaa51c1178359541f6830029add2fb6f40840c70cf58cbc4c1072765cef35d99caa54c46f6082ed4eafbc5c8a712c402da025b37459a55746c3e6a4655acd89ce5e67399fe459bf0c2209a13272a753ddf5d7f0edcfb2b4a276678b29181051780d6fffc40bb589b3b6e07371fc6f747133dc5b1aaca82c81747d924009a737dbe8d7e20d6578593acdfed76f2cc96759cadb6cfbb5a645343d65f5d123167707bf6304feaa884122b034aa43511972cee66bdf43407664d75cb05a9a77519bdfbe652e369c983f020291c63cd12da4a27ae1d705a9af859a5f3a72df076a434407221d0b328e6897f5b88b56dbdb70f2acf649e8b9ddfc6781a8dd84a39cae4c79b5027d90c573265b1d0d4946f27960d34dc519243c1146bdc6d78b0b5c8e40c7f59244bce1ccb6d0731a9d692077c1552430fd2248d67287f47278ca75f43f4429bcfe08ccf7a28a6f74b69007c892ee3ac3ef7ed1cf1811992166020e52eb3233ded82462edef42e403fb1f1244f6e826d8645e3b8cd81ba522390fe87acf696bc93f5630e0e5d30160915dfabd563a7c2db1925269db3bd58cb0f3fccc553b22f087a98afe780988954a508a15b8a77a2c5038ddbaa0a7028d78b2f7079dcb04101d14e9958ff7616c0c2197ba5121d248cf5c40582923105fdff4f48737d01166eb036005e4e187bd9c10fea918fe517d83d25d95fee0a2980a33723905b2e3ba25393feaf4f7b200395a79ec953f7d2d4d07461ce9d0aba0671344d13f3fae33123fabcb5936e86aae19fe8e0281dd09cb72e7db1db290aa4f33f009590c7622dd46e50dee040ac1f324995ca4acd5fe1870e3974694b96bb83fa4fa2bf6ac69d06010a824e6726a22782035bca256deb5cf20c5867626805151fec3c291312a8ee941afed3351682d93bcdc925efb517bd95cabb3478e9ffdd9bd028cdb206fc888a2c584e7f56d187bff9faf091d0b500ee77b3865b3af54ee8684888e7878e9418639fbc2c25e2e6653922590a3c2b5af1047b7c2a8a020e8c9fe2669c6ff7e2f56af1eb3a6ef1c3241835aa357b7cccbb1fdc193181dec3b28da8f2f007a41171ecd7656ed8895b7cfd5263da1d4d13f396b33bcea3ac367c56429b09e9740225271cd1348e74ccc724e92f7ceb3a0f42383ac49aba0c42a57c0ae0990b38a5f4f9689c45bdd56001dee9238f4d5e206f85b42693b06c5b46a5200ed72e92f7bf7badbb173cf8d9c8c27632dd20e73a62785570687b5f68d14135ad2e0bf9ca194db20558ffd04450f6004f6d8f53a816bad7179fcbda7a690632c430d2eb10434907b3c673a414f80bc5f080a834596e747861ca2f230c45ff395deb360c598fe2c33bbfb975a7ee41d5fea213e0b53d8b622e3cb2bae7119364d9b950116e499091680652d0ed6b8fa4181054baa4299a78eb4520bcde742dfd11e0ce3362d49e5bb73d75bb16bbd45ac9433e22bb9e90dd43c34d171ac84eda03e51e4ce12d06629fb9cdca604ab46ee649d4d60c19faea309d40391b1030c4fa7b3b1483af70eb718462898faaedf9b0140bc3f0f8547b9a304e6e06fb8cb8ef2b987d8c88ad7270081922080b415a9b7ddc23468427045bfdcd8c0c72f00a726429abc1c4bb3add6f72044ba1b0c96c03d1e155b28ae058e36c6fbc83228b4b9635eb9f12916936fca3032c20e8eb5f45b1c3664f37276ea2c0120b0031482688f4ca3e327dd9fc2966d542f5cdb7c6b4afb8560caf7d67987b548203c34f01778e974ccd05af607c2c5ae18838cad7f184af989699fd4133a5897a6c588b86cb918b0fdd47704675a4b7519293d9d70f49555a948e7b20a43a3213d6200a1ff95e48f220ba7b59f3bf97c1d7800828ec6eadf3ce0cf97b8cea0b1a18c4c1c22742fb6f5dbd71c4b3a07b84bc2590efe095475619769f0753ca377f330b7ed8c43a6f8f81b1f1e8c38b42f86b309d76c31fc50af4921df43adbadb542b35a0afa0a4caf8198b377e430335441ce958b9265897b8cfb9e1977313c480563806172843f6ad88f778f457c12ccea447e12e2309cf1e5363ab93289d518a5ffdc501a323edbe086cc5467a3d36c40a5a18a2da992a1500b98f62becec044663ac01e263511d132b91f54739c667abe360bad5fd05859271f6105b4fb5e62bc34bc1d3721e144656d50dfa85944610e8f5db42ccc3b1d8ffc57d14d8a54106d1677a70e1f3b7595ede530ad66d1f399e411deafff2082352755e10398418ae0dfda8f5c644e9cd1ab5e146b4f6a7f4c7c13b0a9e24caa5513db025f583db8efd0d8e3a4159976d63a8c10dbc87609cd595f503932ead13b399131d9845e057f76b70dedf7cb2ad699a0e14829f3bc283c64030ef8335864d7f8131dabc1b248941dc8ef912a5b49c12e5be395bf98cb79439a9149270833046c293fe1237300f32f915c5186f5400be088e36709e6e5b30c2ee8e057f4bed4c38cd79c1f3b2ba264fea481d57b301833913b1dc954f33d1b177d7ad593efdc9134fd0267a23ffe01167e668955b46416ee90fda13e1668c9bdb8369a79e8381ad17da814064593ca2b6bd08b9fbcc270fe799dcec8bbc2b48669c5f31d7308f2aa58f23200a337d54546559144c26d19018dbfe692fc72bec000cc6a6e2c7c822ab71750319944457ab6f59970ea41017cb9f1849d5c815bc98df02a9493ccfd027ba3be22bf2a0dbaf5c360ca0deb41984333b7d5bc34eea7d3192416718cae31f0efa0661c27bf85a8dc6d39290cbd24c227b83d3408dd9747f297a7fe341bcab3c3ff9f44cccda6ba142e529e8481d3fbc9df52b83a4c81cd6c6962a05c4e54cfd5a94605806df99bc6cf149402e07f84f47f606203cdf79409c88265d17e917539a161de1bc526d059bb5a77358a583beb9761ddc8b0314889e241ce5e12e2110fa224d3f122c6552a29230c58ec7e57854ef2f7311e6d6b799b91c772bc511b394e5559cf67043bdeb22640c40d11edcd136dfa8b67cce7503fdebc1c2c2d0be6f4a106861d312bc17faab67141138d8ccd791f6a13d25263f04d390c02a1f0c6dc99ecd677b1 您好, 这里需要密码.","categories":[{"name":"Article","slug":"Article","permalink":"http://shenguosai.github.io/categories/Article/"}],"tags":[{"name":"Privacy","slug":"Privacy","permalink":"http://shenguosai.github.io/tags/Privacy/"}]},{"title":"Ubuntu系统搭建FTP服务器","slug":"Ubuntu系统搭建FTP服务器","date":"2023-08-07T14:32:50.000Z","updated":"2024-02-04T02:15:37.180Z","comments":true,"path":"2023/08/07/Ubuntu系统搭建FTP服务器/","link":"","permalink":"http://shenguosai.github.io/2023/08/07/Ubuntu%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"Ubuntu发行版本：20.04.6 LTS 安装 vsftpd 软件包12sudo apt-get updatesudo apt-get install vsftp","text":"Ubuntu发行版本：20.04.6 LTS 安装 vsftpd 软件包12sudo apt-get updatesudo apt-get install vsftp 查看版本确认是否安装成功：vsftpd -v 配置文件在终端打开vsftpd配置文件： 1sudo vim /etc/vsftpd.conf 修改配置如下： 1234567891011anonymous_enable=NO #禁止匿名用户local_enable=YES #允许本地用户访问chroot_local_user=YES #防止FTP用户访问其主目录之外的任何文件write_enable=YES #上传与删除文件及文件夹权限allow_writeable_chroot=YES #允许用户在FTP根目录下创建和修改文件夹及文件port_enable=YES #开启主动模式pasv_enable=YES #开启被动模式#设置FTP端口范围，以便在打开了防火墙的情况下开放对应端口pasv_min_port=39000pasv_max_port=40000 保存文件，并重启vsftpd服务，使更改生效。 1sudo systemctl restart vsftpd 防火墙设置如果是VPS要在网页控制面板中开启相应端口。防火墙打开FTP服务所需端口号。 添加FTP用户创建名为guest的用户并设置密码： 12sudo useradd -d /home/ftp -s /bin/bash guest #新建ftp用户,-d:指定目录，-s：指定shellsudo passwd guest #新建ftp用户密码 记得要将用户登录所在的文件夹的权限赋予ftp用户，否则无法进行上传和删除。 附录1：主动模式与被动模式的区别1.FTP有控制连接和数据连接控制连接标准端口为21，用于发送FTP命令信息。数据连接标准端口为20，用于上传、下载数据。FTP协议与其它协议不同之处就在于客户端访问FTP服务器需要建立两个TCP连接，一个用来传输FTP命令，一个用来传输数据。 2.PORT(主动)模式所谓主动模式，是指FTP服务器主动去连接客户端的数据端口来传输数据。第一步：客户端提交PORT命令访问服务端的21端口，并分配一个数据端口监听(1027端口)；第二步：服务器返回确认；第三步：FTP服务器向客户端发送TCP连接请求，目标端口为1027，源端口为20。建立起传输数据的连接。 3.PASV(被动)模式所谓被动模式，是指FTP服务器“被动”等待客户端来连接自己的数据端口。第一步：客户端的命令端口与服务器的命令端口建立连接，并发送命令“PAVS”；第二步：服务器返回命令“PORT 2024”告诉客户端服务器用来监听数据连接的端口；第三步：客户端初始化一个从自己的数据端口到服务器指定的数据端口的数据连接；第四步：服务器给客户端的数据端口返回一个“ACK”响应。 附录2：vsftpd配置文件翻译123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# 示例配置文件，地址： /etc/vsftpd.conf## vsftpd的默认编译设置比较谨慎，这个示例文件会放宽一些限制，使ftp服务更加易用。# 同时建议查看vsftpd.conf.5文件以了解所有编译默认值。## 特别提醒：这个示例文件并不包含vsftpd选项的所有内容，建议阅读vsftpd.conf.5手册页以充分了解vsftpd的功能。### # 用来设置vsftpd是否以独立守护进程运行。# 如果设置为&quot;listen=YES&quot;，则表示vsftpd将作为独立守护进程运行；# 如果设置为&quot;listen=NO&quot;，则表示vsftpd将不会以独立守护进程运行，而是通过inetd或者initscript启动。listen=NO## 设置vsftpd是否启用IPv6监听。# 如果设置为&quot;listen_ipv6=YES&quot;，则表示vsftpd将启用IPv6监听；# 如果设置为&quot;listen_ipv6=NO&quot;，则表示vsftpd将不会启用IPv6监听。# 默认情况下，IPv6监听地址为&quot;::&quot;，同时可以接受IPv6和IPv4客户端的连接。# 如果你只需要监听IPv4或IPv6地址，则不需要同时启用两种监听，如果你需要同时监听特定的IPv4和IPv6地址，则需要运行两个vsftpd实例，并使用两个不同的配置文件来进行配置。listen_ipv6=YES## 设置是否允许匿名FTP登录。anonymous_enable=NO## 设置是否允许本地用户登录FTP服务器。local_enable=YES## 设置是否允许FTP用户执行写入操作。# write_enable=YES## 设置本地用户的默认umask值。# umask是一个三位八进制数，用来控制新建文件或目录的访问权限。# 在FTP服务器中，local_umask选项用来设置本地用户上传文件或创建目录时的默认权限。# 默认情况下，local_umask的值为077，表示新建的文件或目录权限为只有所有者可读、可写、可执行，其他用户无权访问。# 如果你的用户希望默认权限为所有者可读、可写、可执行，其他用户可读、可执行，则可以将local_umask的值设置为022。local_umask=022## 设置是否允许匿名FTP用户上传文件。# 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户上传文件。# 但是，这个选项只有在全局写入权限被激活时才会生效。此外，你还需要创建一个由FTP用户可写的目录，以便匿名FTP用户可以上传文件。# 需要注意的是，开启匿名FTP用户上传文件功能可能存在一定的安全风险，因此需要谨慎使用。# anon_upload_enable=YES## 设置是否允许匿名FTP用户创建新目录。# 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户创建新目录。# 需要注意的是，开启匿名FTP用户创建新目录功能可能存在一定的安全风险，因此需要谨慎使用。# anon_mkdir_write_enable=YES## 这段配置文件是用来设置是否启用目录消息功能。# 如果设置为YES，则表示启用目录消息功能。当远程用户进入某个目录时，会显示该目录的消息。dirmessage_enable=YES## 设置是否启用本地时间功能。# 启用本地时间功能后，vsftpd将会在目录列表中显示本地时间而非GMT时间。use_localtime=YES## 启用上传和下载日志记录功能。# 启用该功能后，vsftpd会记录每个用户的上传和下载操作，并将其记录到指定的日志文件中。xferlog_enable=YES## 设置数据传输的端口号。# 将其值设置为YES，则表示数据传输使用的端口号为20。connect_from_port_20=YES## 设置匿名用户上传的文件的所有者。# 设置为YES，则表示上传的文件将会被转换为指定用户的所有权。# chown_uploads=YES# 设置为指定的用户名。# chown_username=whoever## 设置vsftpd日志文件的路径。该路径必须具有可写权限，并且对于vsftpd进程来说，必须具有可访问权限。# xferlog_file=/var/log/vsftpd.log## 设置vsftpd日志文件的格式。设备为YES则存储为标准ftpd xferlog格式。# xferlog_std_format=YES## 设置vsftpd空闲会话超时的时间（以秒为单位）。# idle_session_timeout=600## 设置vsftpd数据连接超时的时间（以秒为单位）。# data_connection_timeout=120## vsftpd建议在系统中定义一个唯一的用户，供FTP服务器使用，作为完全隔离和无特权的用户。# nopriv_user选项可以用来指定该用户的用户名。# nopriv_user=ftpsecure## 用于启用异步ABOR请求的识别。# 异步ABOR请求是一种FTP客户端请求，用于取消当前正在进行的数据传输操作。# 启用该选项可以提高FTP服务器的性能，但也会增加安全风险。因为异步ABOR请求的代码比较复杂，可能会被黑客利用进行恶意攻击。# 所以，如果安全性是首要考虑因素，则不建议启用该选项。# async_abor_enable=YES## 用于控制FTP服务器是否启用ASCII模式下的文件转换功能。# 默认情况下，FTP服务器会假装允许ASCII模式，但实际上会忽略该请求。# 如果需要启用ASCII模式下的文件转换功能，则可以将ascii_upload_enable和ascii_download_enable选项的注释去掉，并将它们的值设置为YES。# 在ASCII模式下，FTP服务器会将文本文件中的换行符和回车符进行转换，以便在不同操作系统之间进行传输。# 但是，需要注意的是，ASCII模式下可能存在一些安全风险。例如，攻击者可以利用SIZE命令在ASCII模式下发送一个超大文件名，导致FTP服务器崩溃。# 因此，建议谨慎使用ASCII模式，并确保FTP服务器已经做好了相应的安全措施。# ascii_upload_enable=YES# ascii_download_enable=YES## vsftpd的登录横幅的设置，你可以理解为登录成功后的欢迎词。# ftpd_banner=Welcome to blah FTP service.## 设备是否拒绝匿名电子邮件地址# 有助于减轻利用匿名访问FTP服务器进行的拒绝服务（DoS）攻击。如果检测到被禁止的电子邮件地址，服务器将拒绝该用户的访问。# deny_email_enable=YES# 如果启用了拒绝匿名电子邮件地址的选项，则通过从指定的文件“/etc/vsftpd.banned_emails”读取被禁止的电子邮件地址列表。# banned_email_file=/etc/vsftpd.banned_emails## 设备限制本地用户仅访问其home目录。# 如果启用，则本地用户将仅访问其home目录和其子目录，无法访问其他目录。# chroot_local_user=YES## 是否允许本地用户，是否将本地用户限制在其主目录中，如果设置为YES，则不会将列在chroot_list_file中的用户限制在其主目录中。# chroot_local_user=YES# 是否启用chroot_list_file列表，用于指定哪些用户不应该被限制在主目录中。# chroot_list_enable=YES# 指定了chroot_list_file列表的路径和名称。一行一个用户名。# chroot_list_file=/etc/vsftpd.chroot_list## 否启用ls命令的递归选项“-R”，该选项可以在列出目录内容时递归地列出子目录。# 默认情况下，该选项被禁用以避免远程用户在大型站点上引起过多的I/O。# ls_recurse_enable=YES## 自定义配置：## 指定了一个空目录作为安全chroot() jail。# 在某些情况下，vsftpd不需要访问文件系统，因此可以将FTP用户限制在这个空目录中，以增强安全性。该目录应该为空，并且不应该被FTP用户写入。secure_chroot_dir=/var/run/vsftpd/empty## 指定vsftpd将使用的PAM服务的名称。# 默认情况下，pam_service_name的值为“vsftpd”，这意味着vsftpd将使用名为“vsftpd”的PAM服务来进行认证。# 如果需要使用其他的PAM服务，可以修改该选项的值。pam_service_name=vsftpd## 用于指定在SSL加密连接中使用的RSA证书的位置。# 通过设置rsa_cert_file和rsa_private_key_file选项来指定RSA证书和私钥的位置。# 其中，rsa_cert_file选项用于指定证书文件的位置，而rsa_private_key_file选项用于指定私钥文件的位置。rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pemrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key# 是否启用SSL加密连接。ssl_enable=NO## 指定是否在vsftpd中使用UTF-8编码的文件系统。# utf8_filesystem=YES","categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Linux","slug":"Note/Linux","permalink":"http://shenguosai.github.io/categories/Note/Linux/"}],"tags":[]}],"categories":[{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/categories/Note/"},{"name":"Phone","slug":"Note/Phone","permalink":"http://shenguosai.github.io/categories/Note/Phone/"},{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"},{"name":"Windows","slug":"Note/Windows","permalink":"http://shenguosai.github.io/categories/Note/Windows/"},{"name":"Linux","slug":"Note/Linux","permalink":"http://shenguosai.github.io/categories/Note/Linux/"},{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"},{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/categories/Semiconductor/"},{"name":"EDA","slug":"Semiconductor/EDA","permalink":"http://shenguosai.github.io/categories/Semiconductor/EDA/"},{"name":"Projects","slug":"Projects","permalink":"http://shenguosai.github.io/categories/Projects/"},{"name":"CXT2503S","slug":"Projects/CXT2503S","permalink":"http://shenguosai.github.io/categories/Projects/CXT2503S/"},{"name":"Analog","slug":"Semiconductor/Analog","permalink":"http://shenguosai.github.io/categories/Semiconductor/Analog/"},{"name":"TV-Software","slug":"Tutorial/TV-Software","permalink":"http://shenguosai.github.io/categories/Tutorial/TV-Software/"},{"name":"TVBox","slug":"Tutorial/TV-Software/TVBox","permalink":"http://shenguosai.github.io/categories/Tutorial/TV-Software/TVBox/"},{"name":"post-sim","slug":"Semiconductor/post-sim","permalink":"http://shenguosai.github.io/categories/Semiconductor/post-sim/"},{"name":"Process","slug":"Semiconductor/Process","permalink":"http://shenguosai.github.io/categories/Semiconductor/Process/"},{"name":"vim","slug":"Note/vim","permalink":"http://shenguosai.github.io/categories/Note/vim/"},{"name":"Win-Software","slug":"Tutorial/Win-Software","permalink":"http://shenguosai.github.io/categories/Tutorial/Win-Software/"},{"name":"Adobe","slug":"Tutorial/Win-Software/Adobe","permalink":"http://shenguosai.github.io/categories/Tutorial/Win-Software/Adobe/"},{"name":"Education","slug":"Education","permalink":"http://shenguosai.github.io/categories/Education/"},{"name":"Electronic Equipments","slug":"Electronic-Equipments","permalink":"http://shenguosai.github.io/categories/Electronic-Equipments/"},{"name":"分享","slug":"分享","permalink":"http://shenguosai.github.io/categories/%E5%88%86%E4%BA%AB/"},{"name":"Article","slug":"Article","permalink":"http://shenguosai.github.io/categories/Article/"}],"tags":[{"name":"折腾","slug":"折腾","permalink":"http://shenguosai.github.io/tags/%E6%8A%98%E8%85%BE/"},{"name":"Windows","slug":"Windows","permalink":"http://shenguosai.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"http://shenguosai.github.io/tags/Linux/"},{"name":"Semicondcutor","slug":"Semicondcutor","permalink":"http://shenguosai.github.io/tags/Semicondcutor/"},{"name":"Device","slug":"Device","permalink":"http://shenguosai.github.io/tags/Device/"},{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"},{"name":"EDA","slug":"EDA","permalink":"http://shenguosai.github.io/tags/EDA/"},{"name":"Note","slug":"Note","permalink":"http://shenguosai.github.io/tags/Note/"},{"name":"WorkLogs","slug":"WorkLogs","permalink":"http://shenguosai.github.io/tags/WorkLogs/"},{"name":"Swiching Regulator","slug":"Swiching-Regulator","permalink":"http://shenguosai.github.io/tags/Swiching-Regulator/"},{"name":"Buck-Boost","slug":"Buck-Boost","permalink":"http://shenguosai.github.io/tags/Buck-Boost/"},{"name":"反馈","slug":"反馈","permalink":"http://shenguosai.github.io/tags/%E5%8F%8D%E9%A6%88/"},{"name":"Life","slug":"Life","permalink":"http://shenguosai.github.io/tags/Life/"},{"name":"Calibre","slug":"Calibre","permalink":"http://shenguosai.github.io/tags/Calibre/"},{"name":"工艺","slug":"工艺","permalink":"http://shenguosai.github.io/tags/%E5%B7%A5%E8%89%BA/"},{"name":"software","slug":"software","permalink":"http://shenguosai.github.io/tags/software/"},{"name":"Children","slug":"Children","permalink":"http://shenguosai.github.io/tags/Children/"},{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"},{"name":"育儿","slug":"育儿","permalink":"http://shenguosai.github.io/tags/%E8%82%B2%E5%84%BF/"},{"name":"Semiconductor Device","slug":"Semiconductor-Device","permalink":"http://shenguosai.github.io/tags/Semiconductor-Device/"},{"name":"Privacy","slug":"Privacy","permalink":"http://shenguosai.github.io/tags/Privacy/"}]}