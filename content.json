{"meta":{"title":"Hexo","subtitle":"","description":"","author":"乙未丁酉","url":"http://shenguosai.github.io","root":"/"},"pages":[{"title":"分类","date":"2023-08-10T05:39:40.188Z","updated":"2023-08-02T15:39:31.464Z","comments":false,"path":"categories/index.html","permalink":"http://shenguosai.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-08-02T15:39:31.465Z","updated":"2023-08-02T15:39:31.465Z","comments":true,"path":"links/index.html","permalink":"http://shenguosai.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-08-10T05:40:13.509Z","updated":"2023-08-02T15:39:31.467Z","comments":false,"path":"tags/index.html","permalink":"http://shenguosai.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2023-08-08T17:07:20.711Z","updated":"2023-08-02T15:39:31.463Z","comments":false,"path":"about/index.html","permalink":"http://shenguosai.github.io/about/index.html","excerpt":"","text":"个人详细介绍"}],"posts":[{"title":"日本鬼子名称的由来","slug":"日本鬼子名称的由来","date":"2023-08-17T13:39:53.000Z","updated":"2023-08-17T14:25:23.715Z","comments":true,"path":"2023/08/17/日本鬼子名称的由来/","link":"","permalink":"http://shenguosai.github.io/2023/08/17/%E6%97%A5%E6%9C%AC%E9%AC%BC%E5%AD%90%E5%90%8D%E7%A7%B0%E7%9A%84%E7%94%B1%E6%9D%A5/","excerpt":"","text":"中日甲午战争的记者会上，日本人想嘲讽和羞辱中国人，事先准备好了一副对联的上联让与会的中国代表当场对出下联。上联：骑奇马、张长弓，琴瑟琵琶、八大王并肩居头上，单戈独战。“骑奇马，张长弓”这两句是将第一个字本身拆开两个字组成的，而琴瑟琵琶这四个字共共有八个王字对应了后半部分“八大王并肩居头上”，末句“单戈独战”的“单戈”合成一个繁体的“战”字。日本人出这个对联的大意是自己骑着快马张着长弓，兵强马壮的兵临中国，赢得胜利，并以此鄙视和嘲讽中国。正当日本人洋洋得意认为没有中国人对出下联时，一位负责谈判的清朝大臣拿起笔写出了下联。下联：倭委人、袭龙衣，魑魅魍魉、四小鬼屈膝跪身旁，合手擒拿。这个下联真是神来之笔，令日本人膛目结舌。下面每一句都工整的对应上联。倭委人袭龙衣对应骑齐马张长弓，魑魅魍魉对应琴瑟琵琶，且魑魅魍魉左偏旁都是鬼字而且有四个。从字形看鬼字末笔一横勾就像是在下跪故屈膝跪身旁，末句合手擒拿的合手就是拿字，正好对应上面的八大王并肩居头上、单戈独战，而且还反过来将了日本人一军。下联的意思是日本小人偷穿龙袍，只不过是魑魅魍魉四个小鬼而已，赶快下跪认错否则合手擒拿，这下联是句句工整字字珠玑。从那以后中国人不在称日本人为倭寇而叫日本鬼子了。","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"}]},{"title":"NLDMOS和DEMOS","slug":"NLDMOS和DEMOS","date":"2023-08-17T03:32:09.000Z","updated":"2023-08-17T14:02:32.943Z","comments":true,"path":"2023/08/17/NLDMOS和DEMOS/","link":"","permalink":"http://shenguosai.github.io/2023/08/17/NLDMOS%E5%92%8CDEMOS/","excerpt":"","text":"DMOS：Double-Diffusion MOSVDMOS：Virtical DMOSLDMOS：Lateral DMOSDEMOS：Drain-Extending MOS","categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"}],"tags":[{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"}]},{"title":"Hexo设置博客文章加密","slug":"Hexo设置博客文章加密","date":"2023-08-10T05:53:55.000Z","updated":"2023-08-10T08:35:18.090Z","comments":true,"path":"2023/08/10/Hexo设置博客文章加密/","link":"","permalink":"http://shenguosai.github.io/2023/08/10/Hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/","excerpt":"","text":"准备Hexo搭配使用hexo-blog-encrypt插件可以写一些比较私密的博客，通过密码验证的方式让其他人不能随意浏览。 安装插件在blog\\目录运行以下代码： 1npm install hexo-blog-encrypt 一般配置 在根目录的配置文件_config.yml中添加以下代码：12encrypt: enable: true 设置加密之后，需要在新建博文时在文章头部添加加密的信息设置：12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: password: message: --- 密码。1234567891011121314```message```：输入密码界面的提示说明。# 针对Tag的加密将以下代码复制到根目录下的```_config.yml```:```ymlencrypt: #hexo-blog-encrypt enable: true abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. tags: - &#123;name: TagName1, password: 密码A&#125; - &#123;name: TagName2, password: 密码B&#125; wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"Diary","slug":"Diary","date":"2023-08-10T05:44:16.000Z","updated":"2023-08-14T13:42:34.935Z","comments":true,"path":"2023/08/10/Diary/","link":"","permalink":"http://shenguosai.github.io/2023/08/10/Diary/","excerpt":"有东西被加密了, 请输入密码查看.","text":"da0a26c26fdc3adc6c296250a94e3b4e37c3b1006ca99a84384837ba60666222e63725afa8c7c2484146bec8770d930f27f7cbc1aab385730bb6de9b9ad40f43dc2cb4512ea66ecbaee77d3f110270396c07f5cd7bd50682f5f02dbdaf13ea6860ba18e5b1afe4437475cfc9a7886f683b96d82cf5f34d13d51e41f134c39c9ea107b82e03c415164a5e8c9ae6eccbaa51c1178359541f6830029add2fb6f40840c70cf58cbc4c1072765cef35d99caa54c46f6082ed4eafbc5c8a712c402da025b37459a55746c3e6a4655acd89ce5e67399fe459bf0c2209a13272a753ddf5d7f0edcfb2b4a276678b29181051780d6fffc40bb589b3b6e07371fc6f747133dc5b1aaca82c81747d924009a737dbe8d7e20d6578593acdfed76f2cc96759cadb6cfbb5a645343d65f5d123167707bf6304feaa884122b034aa43511972cee66bdf43407664d75cb05a9a77519bdfbe652e369c983f020291c63cd12da4a27ae1d705a9af859a5f3a72df076a434407221d0b328e6897f5b88b56dbdb70f2acf649e8b9ddfc6781a8dd84a39cae4c79b5027d90c573265b1d0d4946f27960d34dc519243c1146bdc6d78b0b5c8e40c7f59244bce1ccb6d0731a9d692077c1552430fd2248d67287f47278ca75f43f4429bcfe08ccf7a28a6f74b69007c892ee3ac3ef7ed1cf1811992166020e52eb3233ded82462edef42e403fb1f1244f6e826d8645e3b8cd81ba522390fe87acf696bc93f5630e0e5d30160915dfabd563a7c2db1925269db3bd58cb0f3fccc553b22f087a98afe780988954a508a15b8a77a2c5038ddbaa0a7028d78b2f7079dcb04101d14e9958ff7616c0c2197ba5121d248cf5c40582923105fdff4f48737d01166eb036005e4e187bd9c10fea918fe517d83d25d95fee0a2980a33723905b2e3ba25393feaf4f7b200395a79ec953f7d2d4d07461ce9d0aba0671344d13f3fae33123fabcb5936e86aae19fe8e0281dd09cb72e7db1db290aa4f33f009590c7622dd46e50dee040ac1f324995ca4acd5fe1870e3974694b96bb83fa4fa2bf6ac69d06010a824e6726a22782035bca256deb5cf20c5867626805151fec3c291312a8ee941afed3351682d93bcdc925efb517bd95cabb3478e9ffdd9bd028cdb206fc888a2c584e7f56d187bff9faf091d0b500ee77b3865b3af54ee8684888e7878e9418639fbc2c25e2e6653922590a3c2b5af1047b7c2a8a020e8c9fe2669c6ff7e2f56af1eb3a6ef1c3241835aa357b7cccbb1fdc193181dec3b28da8f2f007a41171ecd7656ed8895b7cfd5263da1d4d13f396b33bcea3ac367c56429b09e9740225271cd1348e74ccc724e92f7ceb3a0f42383ac49aba0c42a57c0ae0990b38a5f4f9689c45bdd56001dee9238f4d5e206f85b42693b06c5b46a5200ed72e92f7bf7badbb173cf8d9c8c27632dd20e73a62785570687b5f68d14135ad2e0bf9ca194db20558ffd04450f6004f6d8f53a816bad7179fcbda7a690632c430d2eb10434907b3c673a414f80bc5f080a834596e747861ca2f230c45ff395deb360c598fe2c33bbfb975a7ee41d5fea213e0b53d8b622e3cb2bae7119364d9b950116e499091680652d0ed6b8fa4181054baa4299a78eb4520bcde742dfd11e0ce3362d49e5bb73d75bb16bbd45ac9433e22bb9e90dd43c34d171ac84eda03e51e4ce12d06629fb9cdca604ab46ee649d4d60c19faea309d40391b1030c4fa7b3b1483af70eb718462898faaedf9b0140bc3f0f8547b9a304e6e06fb8cb8ef2b987d8c88ad7270081922080b415a9b7ddc23468427045bfdcd8c0c72f00a726429abc1c4bb3add6f72044ba1b0c96c03d1e155b28ae058e36c6fbc83228b4b9635eb9f12916936fca3032c20e8eb5f45b1c3664f37276ea2c0120b0031482688f4ca3e327dd9fc2966d542f5cdb7c6b4afb8560caf7d67987b548203c34f01778e974ccd05af607c2c5ae18838cad7f184af989699fd4133a5897a6c588b86cb918b0fdd47704675a4b7519293d9d70f49555a948e7b20a43a3213d6200a1ff95e48f220ba7b59f3bf97c1d7800828ec6eadf3ce0cf97b8cea0b1a18c4c1c22742fb6f5dbd71c4b3a07b84bc2590efe095475619769f0753ca377f330b7ed8c43a6f8f81b1f1e8c38b42f86b309d76c31fc50af4921df43adbadb542b35a0afa0a4caf8198b377e430335441ce958b9265897b8cfb9e1977313c480563806172843f6ad88f778f457c12ccea447e12e2309cf1e5363ab93289d518a5ffdc501a323edbe086cc5467a3d36c40a5a18a2da992a1500b98f62becec044663ac01e263511d132b91f54739c667abe360bad5fd05859271f6105b4fb5e62bc34bc1d3721e144656d50dfa85944610e8f5db42ccc3b1d8ffc57d14d8a54106d1677a70e1f3b7595ede530ad66d1f399e411deafff2082352755e10398418ae0dfda8f5c644e9cd1ab5e146b4f6a7f4c7c13b0a9e24caa5513db025f583db8efd0d8e3a4159976d63a8c10dbc87609cd595f503932ead13b399131d9845e057f76b70dedf7cb2ad699a0e14829f3bc283c64030ef8335864d7f8131dabc1b248941dc8ef912a5b49c12e5be395bf98cb79439a9149270833046c293fe1237300f32f915c5186f5400be088e36709e6e5b30c2ee8e057f4bed4c38cd79c1f3b2ba264fea481d57b301833913b1dc954f33d1b177d7ad593efdc9134fd0267a23ffe01167e668955b46416ee90fda13e1668c9bdb8369a79e8381ad17da814064593ca2b6bd08b9fbcc270fe799dcec8bbc2b48669c5f31d7308f2aa58f23200a337d54546559144c26d19018dbfe692fc72bec000cc6a6e2c7c822ab71750319944457ab6f59970ea41017cb9f1849d5c815bc98df02a9493ccfd027ba3be22bf2a0dbaf5c360ca0deb41984333b7d5bc34eea7d3192416718cae31f0efa0661c27bf85a8dc6d39290cbd24c227b83d3408dd9747f297a7fe341bcab3c3ff9f44cccda6ba142e529e8481d3fbc9df52b83a4c81cd6c6962a05c4e54cfd5a94605806df99bc6cf149402e07f84f47f606203cdf7d3dc8797289ed7cf0a6ef36a9c05520c 您好, 这里需要密码.","categories":[{"name":"Article","slug":"Article","permalink":"http://shenguosai.github.io/categories/Article/"}],"tags":[{"name":"Privacy","slug":"Privacy","permalink":"http://shenguosai.github.io/tags/Privacy/"}]},{"title":"Ubuntu系统搭建FTP服务器","slug":"Ubuntu系统搭建FTP服务器","date":"2023-08-07T14:32:50.000Z","updated":"2023-08-08T16:42:01.731Z","comments":true,"path":"2023/08/07/Ubuntu系统搭建FTP服务器/","link":"","permalink":"http://shenguosai.github.io/2023/08/07/Ubuntu%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"Ubuntu发行版本：20.04.6 LTS 安装 vsftpd 软件包12sudo apt-get updatesudo apt-get install vsftp 查看版本确认是否安装成功：vsftpd -v 配置文件在终端打开vsftpd配置文件： 1sudo vim /etc/vsftpd.conf 修改配置如下： 1234567891011anonymous_enable=NO #禁止匿名用户local_enable=YES #允许本地用户访问chroot_local_user=YES #防止FTP用户访问其主目录之外的任何文件write_enable=YES #上传与删除文件及文件夹权限allow_writeable_chroot=YES #允许用户在FTP根目录下创建和修改文件夹及文件port_enable=YES #开启主动模式pasv_enable=YES #开启被动模式#设置FTP端口范围，以便在打开了防火墙的情况下开放对应端口pasv_min_port=39000pasv_max_port=40000 保存文件，并重启vsftpd服务，使更改生效。 1sudo systemctl restart vsftpd 防火墙设置如果是VPS要在网页控制面板中开启相应端口。防火墙打开FTP服务所需端口号。 添加FTP用户创建名为guest的用户并设置密码： 12sudo useradd -d /home/ftp -s /bin/bash guest #新建ftp用户,-d:指定目录，-s：指定shellsudo passwd guest #新建ftp用户密码 记得要将用户登录所在的文件夹的权限赋予ftp用户，否则无法进行上传和删除。 附录1：主动模式与被动模式的区别1.FTP有控制连接和数据连接控制连接标准端口为21，用于发送FTP命令信息。数据连接标准端口为20，用于上传、下载数据。FTP协议与其它协议不同之处就在于客户端访问FTP服务器需要建立两个TCP连接，一个用来传输FTP命令，一个用来传输数据。 2.PORT(主动)模式所谓主动模式，是指FTP服务器主动去连接客户端的数据端口来传输数据。第一步：客户端提交PORT命令访问服务端的21端口，并分配一个数据端口监听(1027端口)；第二步：服务器返回确认；第三步：FTP服务器向客户端发送TCP连接请求，目标端口为1027，源端口为20。建立起传输数据的连接。 3.PASV(被动)模式所谓被动模式，是指FTP服务器“被动”等待客户端来连接自己的数据端口。第一步：客户端的命令端口与服务器的命令端口建立连接，并发送命令“PAVS”；第二步：服务器返回命令“PORT 2024”告诉客户端服务器用来监听数据连接的端口；第三步：客户端初始化一个从自己的数据端口到服务器指定的数据端口的数据连接；第四步：服务器给客户端的数据端口返回一个“ACK”响应。 附录2：vsftpd配置文件翻译123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# 示例配置文件，地址： /etc/vsftpd.conf## vsftpd的默认编译设置比较谨慎，这个示例文件会放宽一些限制，使ftp服务更加易用。# 同时建议查看vsftpd.conf.5文件以了解所有编译默认值。## 特别提醒：这个示例文件并不包含vsftpd选项的所有内容，建议阅读vsftpd.conf.5手册页以充分了解vsftpd的功能。### # 用来设置vsftpd是否以独立守护进程运行。# 如果设置为&quot;listen=YES&quot;，则表示vsftpd将作为独立守护进程运行；# 如果设置为&quot;listen=NO&quot;，则表示vsftpd将不会以独立守护进程运行，而是通过inetd或者initscript启动。listen=NO## 设置vsftpd是否启用IPv6监听。# 如果设置为&quot;listen_ipv6=YES&quot;，则表示vsftpd将启用IPv6监听；# 如果设置为&quot;listen_ipv6=NO&quot;，则表示vsftpd将不会启用IPv6监听。# 默认情况下，IPv6监听地址为&quot;::&quot;，同时可以接受IPv6和IPv4客户端的连接。# 如果你只需要监听IPv4或IPv6地址，则不需要同时启用两种监听，如果你需要同时监听特定的IPv4和IPv6地址，则需要运行两个vsftpd实例，并使用两个不同的配置文件来进行配置。listen_ipv6=YES## 设置是否允许匿名FTP登录。anonymous_enable=NO## 设置是否允许本地用户登录FTP服务器。local_enable=YES## 设置是否允许FTP用户执行写入操作。# write_enable=YES## 设置本地用户的默认umask值。# umask是一个三位八进制数，用来控制新建文件或目录的访问权限。# 在FTP服务器中，local_umask选项用来设置本地用户上传文件或创建目录时的默认权限。# 默认情况下，local_umask的值为077，表示新建的文件或目录权限为只有所有者可读、可写、可执行，其他用户无权访问。# 如果你的用户希望默认权限为所有者可读、可写、可执行，其他用户可读、可执行，则可以将local_umask的值设置为022。local_umask=022## 设置是否允许匿名FTP用户上传文件。# 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户上传文件。# 但是，这个选项只有在全局写入权限被激活时才会生效。此外，你还需要创建一个由FTP用户可写的目录，以便匿名FTP用户可以上传文件。# 需要注意的是，开启匿名FTP用户上传文件功能可能存在一定的安全风险，因此需要谨慎使用。# anon_upload_enable=YES## 设置是否允许匿名FTP用户创建新目录。# 如果将该选项的注释去掉（即将“#”删去），并将其值设置为YES，则表示允许匿名FTP用户创建新目录。# 需要注意的是，开启匿名FTP用户创建新目录功能可能存在一定的安全风险，因此需要谨慎使用。# anon_mkdir_write_enable=YES## 这段配置文件是用来设置是否启用目录消息功能。# 如果设置为YES，则表示启用目录消息功能。当远程用户进入某个目录时，会显示该目录的消息。dirmessage_enable=YES## 设置是否启用本地时间功能。# 启用本地时间功能后，vsftpd将会在目录列表中显示本地时间而非GMT时间。use_localtime=YES## 启用上传和下载日志记录功能。# 启用该功能后，vsftpd会记录每个用户的上传和下载操作，并将其记录到指定的日志文件中。xferlog_enable=YES## 设置数据传输的端口号。# 将其值设置为YES，则表示数据传输使用的端口号为20。connect_from_port_20=YES## 设置匿名用户上传的文件的所有者。# 设置为YES，则表示上传的文件将会被转换为指定用户的所有权。# chown_uploads=YES# 设置为指定的用户名。# chown_username=whoever## 设置vsftpd日志文件的路径。该路径必须具有可写权限，并且对于vsftpd进程来说，必须具有可访问权限。# xferlog_file=/var/log/vsftpd.log## 设置vsftpd日志文件的格式。设备为YES则存储为标准ftpd xferlog格式。# xferlog_std_format=YES## 设置vsftpd空闲会话超时的时间（以秒为单位）。# idle_session_timeout=600## 设置vsftpd数据连接超时的时间（以秒为单位）。# data_connection_timeout=120## vsftpd建议在系统中定义一个唯一的用户，供FTP服务器使用，作为完全隔离和无特权的用户。# nopriv_user选项可以用来指定该用户的用户名。# nopriv_user=ftpsecure## 用于启用异步ABOR请求的识别。# 异步ABOR请求是一种FTP客户端请求，用于取消当前正在进行的数据传输操作。# 启用该选项可以提高FTP服务器的性能，但也会增加安全风险。因为异步ABOR请求的代码比较复杂，可能会被黑客利用进行恶意攻击。# 所以，如果安全性是首要考虑因素，则不建议启用该选项。# async_abor_enable=YES## 用于控制FTP服务器是否启用ASCII模式下的文件转换功能。# 默认情况下，FTP服务器会假装允许ASCII模式，但实际上会忽略该请求。# 如果需要启用ASCII模式下的文件转换功能，则可以将ascii_upload_enable和ascii_download_enable选项的注释去掉，并将它们的值设置为YES。# 在ASCII模式下，FTP服务器会将文本文件中的换行符和回车符进行转换，以便在不同操作系统之间进行传输。# 但是，需要注意的是，ASCII模式下可能存在一些安全风险。例如，攻击者可以利用SIZE命令在ASCII模式下发送一个超大文件名，导致FTP服务器崩溃。# 因此，建议谨慎使用ASCII模式，并确保FTP服务器已经做好了相应的安全措施。# ascii_upload_enable=YES# ascii_download_enable=YES## vsftpd的登录横幅的设置，你可以理解为登录成功后的欢迎词。# ftpd_banner=Welcome to blah FTP service.## 设备是否拒绝匿名电子邮件地址# 有助于减轻利用匿名访问FTP服务器进行的拒绝服务（DoS）攻击。如果检测到被禁止的电子邮件地址，服务器将拒绝该用户的访问。# deny_email_enable=YES# 如果启用了拒绝匿名电子邮件地址的选项，则通过从指定的文件“/etc/vsftpd.banned_emails”读取被禁止的电子邮件地址列表。# banned_email_file=/etc/vsftpd.banned_emails## 设备限制本地用户仅访问其home目录。# 如果启用，则本地用户将仅访问其home目录和其子目录，无法访问其他目录。# chroot_local_user=YES## 是否允许本地用户，是否将本地用户限制在其主目录中，如果设置为YES，则不会将列在chroot_list_file中的用户限制在其主目录中。# chroot_local_user=YES# 是否启用chroot_list_file列表，用于指定哪些用户不应该被限制在主目录中。# chroot_list_enable=YES# 指定了chroot_list_file列表的路径和名称。一行一个用户名。# chroot_list_file=/etc/vsftpd.chroot_list## 否启用ls命令的递归选项“-R”，该选项可以在列出目录内容时递归地列出子目录。# 默认情况下，该选项被禁用以避免远程用户在大型站点上引起过多的I/O。# ls_recurse_enable=YES## 自定义配置：## 指定了一个空目录作为安全chroot() jail。# 在某些情况下，vsftpd不需要访问文件系统，因此可以将FTP用户限制在这个空目录中，以增强安全性。该目录应该为空，并且不应该被FTP用户写入。secure_chroot_dir=/var/run/vsftpd/empty## 指定vsftpd将使用的PAM服务的名称。# 默认情况下，pam_service_name的值为“vsftpd”，这意味着vsftpd将使用名为“vsftpd”的PAM服务来进行认证。# 如果需要使用其他的PAM服务，可以修改该选项的值。pam_service_name=vsftpd## 用于指定在SSL加密连接中使用的RSA证书的位置。# 通过设置rsa_cert_file和rsa_private_key_file选项来指定RSA证书和私钥的位置。# 其中，rsa_cert_file选项用于指定证书文件的位置，而rsa_private_key_file选项用于指定私钥文件的位置。rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pemrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key# 是否启用SSL加密连接。ssl_enable=NO## 指定是否在vsftpd中使用UTF-8编码的文件系统。# utf8_filesystem=YES","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"在自己搭建的hexo博客上发布文章","slug":"Hexo发布文章","date":"2023-08-02T16:19:02.735Z","updated":"2023-08-08T16:57:41.217Z","comments":true,"path":"2023/08/03/Hexo发布文章/","link":"","permalink":"http://shenguosai.github.io/2023/08/03/Hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/","excerpt":"","text":"在/source/_posts目录下建立.md文件并撰写内容；编辑文章时要在第一行中加上title，如果不按此格式来写的话在hexo博客中就会显示这篇文章没有名字。123---title: 文章题目--- 命名完成后，将终端当前目录更改为/source/_posts输入hexo g(完整命令为hexo generate)，生成静态文件；输入hexo s(完整命令为hexo server)，启动local服务器，主要用于本地预览。完成后打开浏览器输入http://localhost:4000，就会发现多了刚才写的那篇博客。输入hexo d(完整命令为hexo deploy)，将本地文件发布到github仓库上。 每次对hexo博客上的.md文件进行更改后都要重复步骤2，这样更改的内容才能在hexo博客上显示。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]},{"title":"Hexo搭建个人博客挂载Github(未完)","slug":"Hexo搭建私人博客挂载github","date":"2023-08-02T16:03:40.079Z","updated":"2023-08-08T16:41:00.568Z","comments":true,"path":"2023/08/03/Hexo搭建私人博客挂载github/","link":"","permalink":"http://shenguosai.github.io/2023/08/03/Hexo%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BDgithub/","excerpt":"","text":"一、准备工作1.GitGit官网下载下载完成后，双击安装包，选项全部默认，一路Next安装完成。测试安装成功，输入git --version显示版本信息即可。 12shenguosai@LAPTOP-FBGFH99L ~$ git --versiongit version 2.37.1 2.Node.jsNode官网下载下载完成后，双击安装包，选项全部默认，一路Next安装完成。测试安装成功，输入node -v显示版本信息即可。 12shenguosai@LAPTOP-FBGFH99L ~$ node -vv18.15.0 3.Gitee或GitHub(目前只成功挂载GitHub@2023&#x2F;8&#x2F;3)准备Gitee或GitHub账号，这个是用来托管的，可以不需要自己的服务器和域名就可以拥有自己的博客。Gitee官网GitHub官网注册完成后，创建一个仓库，然后就可以将hexo挂载到这个仓库中了。创建仓库的时候用 YourName.github.io 或 YourNama.gitee.io ，这样后面托管的域名比较好记。 二、博客搭建1.Hexo下载新建一个文件夹作为博客的顶级目录。打开cmd，进入到新建的文件夹目录，输入npm install hexo-cli -g以安装hexo。 2.Hexo初始化安装完成后，输入hexo init blog进行初始化。注：blog就是步骤1中新建的目录。初始化后，文件夹下就会有下方形式的目录结构。设置好图床后添加 3.启动博客使用终端将目录进入到blog下 12345678910111213141516171819202122shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ latotal 245drwxrwxr-x 1 shenguos 197121 0 Aug 2 18:38 .drwxrwxr-x 1 shenguos 197121 0 Aug 2 15:13 ..drwxrwxr-x 1 shenguos 197121 0 Aug 3 00:39 .deploy_gitdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 .github-rw-rw-r-- 1 shenguos 197121 82 Aug 2 15:14 .gitignore-rw-rw-r-- 1 shenguos 197121 0 Aug 2 15:14 _config.landscape.yml-rw-rw-r-- 1 shenguos 197121 2582 Aug 3 00:01 _config.yml-rwxrwxr-x 1 shenguos 197121 352551 Aug 3 00:38 db.jsondrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:34 node_modules-rwxrwxr-x 1 shenguos 197121 92731 Aug 2 15:34 package-lock.json-rw-rw-r-- 1 shenguos 197121 655 Aug 2 15:34 package.jsondrwxrwxr-x 1 shenguos 197121 0 Aug 3 00:08 publicdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 scaffoldsdrwxrwxr-x 1 shenguos 197121 0 Aug 2 15:14 sourcedrwxrwxr-x 1 shenguos 197121 0 Aug 2 23:53 themesshenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ hexo sINFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. 本地静态网页就启动了，在浏览器输入http://localhost:4000/就能看到如下网页。设置好图床后添加 三、挂载到GitHub上1.挂载须知a) git配置12git config --global user.name &quot;shenguosai&quot; //用户名git config --global user.email &quot;xxx@xx.com&quot; //邮箱 用户名和邮箱根据注册github的信息自行修改。 b) SSH密钥挂载到GitHub上时，为了方便，我们要创建ssh密钥，使用ssh连接更为方便的推送。方法：ssh-keygen -C &quot;xxxx@xxx.com&quot;就会生成密钥，Linux用户在~/.ssh/中，Windows用户在C:/Users/xxx/.ssh/中。在github上绑定公钥:Settings-&gt;SSH and GPG keys-&gt;SSH keys-&gt;New SSH key将生成的id_rsa.pub中的文本内容复制到Key框中，点击Add SSH key。此处说明需要添加图片，设置好图床后添加。输入ssh -T git@github.com，如果如下所示，出现你的用户名即配置成功。 123shenguosai@LAPTOP-FBGFH99L /mnt/d/99_Git/blog$ ssh -T git@github.comX11 forwarding request failed on channel 0Hi shenguosai! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. c) Token2.开始挂载打开博客目录下的.config.yml(hexo的配置文件)，下拉到最下方。 1234deploy: type: git repo: https://ghp_xxxxxx@github.com/shenguosai/shenguosai.github.io.git branch: master ghp_xxxxxx即使上面申请的token。然后输入hexo cl清除缓存，完成代码为hexo clean。清除缓存后输入hexo g生成静态网页，然后输入hexo d推送到GitHub。","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"}],"tags":[]}],"categories":[{"name":"Knowledge Share","slug":"Knowledge-Share","permalink":"http://shenguosai.github.io/categories/Knowledge-Share/"},{"name":"Tutorial","slug":"Tutorial","permalink":"http://shenguosai.github.io/categories/Tutorial/"},{"name":"Article","slug":"Article","permalink":"http://shenguosai.github.io/categories/Article/"}],"tags":[{"name":"Poetry","slug":"Poetry","permalink":"http://shenguosai.github.io/tags/Poetry/"},{"name":"Semiconductor","slug":"Semiconductor","permalink":"http://shenguosai.github.io/tags/Semiconductor/"},{"name":"Privacy","slug":"Privacy","permalink":"http://shenguosai.github.io/tags/Privacy/"}]}